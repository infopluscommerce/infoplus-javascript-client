/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/ProductionModel', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/ProductionModel'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.ProductionModelApi = factory(root.infoplus.ApiClient, root.infoplus.ApiResponse, root.infoplus.ProductionModel, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, ApiResponse, ProductionModel, RecordFile) {
  'use strict';

  /**
   * ProductionModel service.
   * @module api/ProductionModelApi
   * @version beta
   */

  /**
   * Constructs a new ProductionModelApi. 
   * @alias module:api/ProductionModelApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addProductionModel operation.
     * @callback module:api/ProductionModelApi~addProductionModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductionModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a productionModel
     * Inserts a new productionModel using the specified data.
     * @param {module:model/ProductionModel} body ProductionModel to be inserted.
     * @param {module:api/ProductionModelApi~addProductionModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductionModel}
     */
    this.addProductionModel = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addProductionModel");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductionModel;

      return this.apiClient.callApi(
        '/beta/productionModel', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addProductionModelAudit operation.
     * @callback module:api/ProductionModelApi~addProductionModelAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a productionModel
     * Adds an audit to an existing productionModel.
     * @param {Number} productionModelId Id of the productionModel to add an audit to
     * @param {String} productionModelAudit The audit to add
     * @param {module:api/ProductionModelApi~addProductionModelAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addProductionModelAudit = function(productionModelId, productionModelAudit, callback) {
      var postBody = null;

      // verify the required parameter 'productionModelId' is set
      if (productionModelId === undefined || productionModelId === null) {
        throw new Error("Missing the required parameter 'productionModelId' when calling addProductionModelAudit");
      }

      // verify the required parameter 'productionModelAudit' is set
      if (productionModelAudit === undefined || productionModelAudit === null) {
        throw new Error("Missing the required parameter 'productionModelAudit' when calling addProductionModelAudit");
      }


      var pathParams = {
        'productionModelId': productionModelId,
        'productionModelAudit': productionModelAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/productionModel/{productionModelId}/audit/{productionModelAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addProductionModelFile operation.
     * @callback module:api/ProductionModelApi~addProductionModelFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a productionModel
     * Adds a file to an existing productionModel.
     * @param {Number} productionModelId Id of the productionModel to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/ProductionModelApi~addProductionModelFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addProductionModelFile = function(productionModelId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'productionModelId' is set
      if (productionModelId === undefined || productionModelId === null) {
        throw new Error("Missing the required parameter 'productionModelId' when calling addProductionModelFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addProductionModelFile");
      }


      var pathParams = {
        'productionModelId': productionModelId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/productionModel/{productionModelId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addProductionModelFileByURL operation.
     * @callback module:api/ProductionModelApi~addProductionModelFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a productionModel by URL.
     * Adds a file to an existing productionModel by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} productionModelId Id of the productionModel to add an file to
     * @param {module:api/ProductionModelApi~addProductionModelFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addProductionModelFileByURL = function(body, productionModelId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addProductionModelFileByURL");
      }

      // verify the required parameter 'productionModelId' is set
      if (productionModelId === undefined || productionModelId === null) {
        throw new Error("Missing the required parameter 'productionModelId' when calling addProductionModelFileByURL");
      }


      var pathParams = {
        'productionModelId': productionModelId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/productionModel/{productionModelId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addProductionModelTag operation.
     * @callback module:api/ProductionModelApi~addProductionModelTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a productionModel.
     * Adds a tag to an existing productionModel.
     * @param {Number} productionModelId Id of the productionModel to add a tag to
     * @param {String} productionModelTag The tag to add
     * @param {module:api/ProductionModelApi~addProductionModelTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addProductionModelTag = function(productionModelId, productionModelTag, callback) {
      var postBody = null;

      // verify the required parameter 'productionModelId' is set
      if (productionModelId === undefined || productionModelId === null) {
        throw new Error("Missing the required parameter 'productionModelId' when calling addProductionModelTag");
      }

      // verify the required parameter 'productionModelTag' is set
      if (productionModelTag === undefined || productionModelTag === null) {
        throw new Error("Missing the required parameter 'productionModelTag' when calling addProductionModelTag");
      }


      var pathParams = {
        'productionModelId': productionModelId,
        'productionModelTag': productionModelTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/productionModel/{productionModelId}/tag/{productionModelTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProductionModel operation.
     * @callback module:api/ProductionModelApi~deleteProductionModelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a productionModel
     * Deletes the productionModel identified by the specified id.
     * @param {Number} productionModelId Id of the productionModel to be deleted.
     * @param {module:api/ProductionModelApi~deleteProductionModelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteProductionModel = function(productionModelId, callback) {
      var postBody = null;

      // verify the required parameter 'productionModelId' is set
      if (productionModelId === undefined || productionModelId === null) {
        throw new Error("Missing the required parameter 'productionModelId' when calling deleteProductionModel");
      }


      var pathParams = {
        'productionModelId': productionModelId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/productionModel/{productionModelId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProductionModelFile operation.
     * @callback module:api/ProductionModelApi~deleteProductionModelFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a productionModel.
     * Deletes an existing productionModel file using the specified data.
     * @param {Number} productionModelId Id of the productionModel to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/ProductionModelApi~deleteProductionModelFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteProductionModelFile = function(productionModelId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'productionModelId' is set
      if (productionModelId === undefined || productionModelId === null) {
        throw new Error("Missing the required parameter 'productionModelId' when calling deleteProductionModelFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteProductionModelFile");
      }


      var pathParams = {
        'productionModelId': productionModelId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/productionModel/{productionModelId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProductionModelTag operation.
     * @callback module:api/ProductionModelApi~deleteProductionModelTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a productionModel.
     * Deletes an existing productionModel tag using the specified data.
     * @param {Number} productionModelId Id of the productionModel to remove tag from
     * @param {String} productionModelTag The tag to delete
     * @param {module:api/ProductionModelApi~deleteProductionModelTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteProductionModelTag = function(productionModelId, productionModelTag, callback) {
      var postBody = null;

      // verify the required parameter 'productionModelId' is set
      if (productionModelId === undefined || productionModelId === null) {
        throw new Error("Missing the required parameter 'productionModelId' when calling deleteProductionModelTag");
      }

      // verify the required parameter 'productionModelTag' is set
      if (productionModelTag === undefined || productionModelTag === null) {
        throw new Error("Missing the required parameter 'productionModelTag' when calling deleteProductionModelTag");
      }


      var pathParams = {
        'productionModelId': productionModelId,
        'productionModelTag': productionModelTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/productionModel/{productionModelId}/tag/{productionModelTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateProductionModelById operation.
     * @callback module:api/ProductionModelApi~getDuplicateProductionModelByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductionModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a productionModel by id
     * Returns a duplicated productionModel identified by the specified id.
     * @param {Number} productionModelId Id of the productionModel to be duplicated.
     * @param {module:api/ProductionModelApi~getDuplicateProductionModelByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductionModel}
     */
    this.getDuplicateProductionModelById = function(productionModelId, callback) {
      var postBody = null;

      // verify the required parameter 'productionModelId' is set
      if (productionModelId === undefined || productionModelId === null) {
        throw new Error("Missing the required parameter 'productionModelId' when calling getDuplicateProductionModelById");
      }


      var pathParams = {
        'productionModelId': productionModelId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ProductionModel;

      return this.apiClient.callApi(
        '/beta/productionModel/duplicate/{productionModelId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductionModelByFilter operation.
     * @callback module:api/ProductionModelApi~getProductionModelByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductionModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search productionModels by filter
     * Returns the list of productionModels that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/ProductionModelApi~getProductionModelByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProductionModel>}
     */
    this.getProductionModelByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ProductionModel];

      return this.apiClient.callApi(
        '/beta/productionModel/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductionModelById operation.
     * @callback module:api/ProductionModelApi~getProductionModelByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductionModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a productionModel by id
     * Returns the productionModel identified by the specified id.
     * @param {Number} productionModelId Id of the productionModel to be returned.
     * @param {module:api/ProductionModelApi~getProductionModelByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductionModel}
     */
    this.getProductionModelById = function(productionModelId, callback) {
      var postBody = null;

      // verify the required parameter 'productionModelId' is set
      if (productionModelId === undefined || productionModelId === null) {
        throw new Error("Missing the required parameter 'productionModelId' when calling getProductionModelById");
      }


      var pathParams = {
        'productionModelId': productionModelId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ProductionModel;

      return this.apiClient.callApi(
        '/beta/productionModel/{productionModelId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductionModelFiles operation.
     * @callback module:api/ProductionModelApi~getProductionModelFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a productionModel.
     * Get all existing productionModel files.
     * @param {Number} productionModelId Id of the productionModel to get files for
     * @param {module:api/ProductionModelApi~getProductionModelFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getProductionModelFiles = function(productionModelId, callback) {
      var postBody = null;

      // verify the required parameter 'productionModelId' is set
      if (productionModelId === undefined || productionModelId === null) {
        throw new Error("Missing the required parameter 'productionModelId' when calling getProductionModelFiles");
      }


      var pathParams = {
        'productionModelId': productionModelId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/productionModel/{productionModelId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductionModelTags operation.
     * @callback module:api/ProductionModelApi~getProductionModelTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a productionModel.
     * Get all existing productionModel tags.
     * @param {Number} productionModelId Id of the productionModel to get tags for
     * @param {module:api/ProductionModelApi~getProductionModelTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getProductionModelTags = function(productionModelId, callback) {
      var postBody = null;

      // verify the required parameter 'productionModelId' is set
      if (productionModelId === undefined || productionModelId === null) {
        throw new Error("Missing the required parameter 'productionModelId' when calling getProductionModelTags");
      }


      var pathParams = {
        'productionModelId': productionModelId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/productionModel/{productionModelId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProductionModel operation.
     * @callback module:api/ProductionModelApi~updateProductionModelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a productionModel
     * Updates an existing productionModel using the specified data.
     * @param {module:model/ProductionModel} body ProductionModel to be updated.
     * @param {module:api/ProductionModelApi~updateProductionModelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateProductionModel = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateProductionModel");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/productionModel', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProductionModelCustomFields operation.
     * @callback module:api/ProductionModelApi~updateProductionModelCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a productionModel custom fields
     * Updates an existing productionModel custom fields using the specified data.
     * @param {module:model/ProductionModel} body ProductionModel to be updated.
     * @param {module:api/ProductionModelApi~updateProductionModelCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateProductionModelCustomFields = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateProductionModelCustomFields");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/productionModel/customFields', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
