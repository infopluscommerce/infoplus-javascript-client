/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: v3.0
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Load', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Load'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.LoadApi = factory(root.infoplus.ApiClient, root.infoplus.Load, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, Load, RecordFile) {
  'use strict';

  /**
   * Load service.
   * @module api/LoadApi
   * @version v3.0
   */

  /**
   * Constructs a new LoadApi. 
   * @alias module:api/LoadApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addLoadAudit operation.
     * @callback module:api/LoadApi~addLoadAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a load
     * Adds an audit to an existing load.
     * @param {Number} loadId Id of the load to add an audit to
     * @param {String} loadAudit The audit to add
     * @param {module:api/LoadApi~addLoadAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addLoadAudit = function(loadId, loadAudit, callback) {
      var postBody = null;

      // verify the required parameter 'loadId' is set
      if (loadId === undefined || loadId === null) {
        throw new Error("Missing the required parameter 'loadId' when calling addLoadAudit");
      }

      // verify the required parameter 'loadAudit' is set
      if (loadAudit === undefined || loadAudit === null) {
        throw new Error("Missing the required parameter 'loadAudit' when calling addLoadAudit");
      }


      var pathParams = {
        'loadId': loadId,
        'loadAudit': loadAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/load/{loadId}/audit/{loadAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addLoadFile operation.
     * @callback module:api/LoadApi~addLoadFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a load
     * Adds a file to an existing load.
     * @param {Number} loadId Id of the load to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/LoadApi~addLoadFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addLoadFile = function(loadId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'loadId' is set
      if (loadId === undefined || loadId === null) {
        throw new Error("Missing the required parameter 'loadId' when calling addLoadFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addLoadFile");
      }


      var pathParams = {
        'loadId': loadId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/load/{loadId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addLoadFileByURL operation.
     * @callback module:api/LoadApi~addLoadFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a load by URL.
     * Adds a file to an existing load by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} loadId Id of the load to add an file to
     * @param {module:api/LoadApi~addLoadFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addLoadFileByURL = function(body, loadId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addLoadFileByURL");
      }

      // verify the required parameter 'loadId' is set
      if (loadId === undefined || loadId === null) {
        throw new Error("Missing the required parameter 'loadId' when calling addLoadFileByURL");
      }


      var pathParams = {
        'loadId': loadId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/load/{loadId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addLoadTag operation.
     * @callback module:api/LoadApi~addLoadTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a load.
     * Adds a tag to an existing load.
     * @param {Number} loadId Id of the load to add a tag to
     * @param {String} loadTag The tag to add
     * @param {module:api/LoadApi~addLoadTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addLoadTag = function(loadId, loadTag, callback) {
      var postBody = null;

      // verify the required parameter 'loadId' is set
      if (loadId === undefined || loadId === null) {
        throw new Error("Missing the required parameter 'loadId' when calling addLoadTag");
      }

      // verify the required parameter 'loadTag' is set
      if (loadTag === undefined || loadTag === null) {
        throw new Error("Missing the required parameter 'loadTag' when calling addLoadTag");
      }


      var pathParams = {
        'loadId': loadId,
        'loadTag': loadTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/load/{loadId}/tag/{loadTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLoadFile operation.
     * @callback module:api/LoadApi~deleteLoadFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a load.
     * Deletes an existing load file using the specified data.
     * @param {Number} loadId Id of the load to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/LoadApi~deleteLoadFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLoadFile = function(loadId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'loadId' is set
      if (loadId === undefined || loadId === null) {
        throw new Error("Missing the required parameter 'loadId' when calling deleteLoadFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteLoadFile");
      }


      var pathParams = {
        'loadId': loadId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/load/{loadId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLoadTag operation.
     * @callback module:api/LoadApi~deleteLoadTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a load.
     * Deletes an existing load tag using the specified data.
     * @param {Number} loadId Id of the load to remove tag from
     * @param {String} loadTag The tag to delete
     * @param {module:api/LoadApi~deleteLoadTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLoadTag = function(loadId, loadTag, callback) {
      var postBody = null;

      // verify the required parameter 'loadId' is set
      if (loadId === undefined || loadId === null) {
        throw new Error("Missing the required parameter 'loadId' when calling deleteLoadTag");
      }

      // verify the required parameter 'loadTag' is set
      if (loadTag === undefined || loadTag === null) {
        throw new Error("Missing the required parameter 'loadTag' when calling deleteLoadTag");
      }


      var pathParams = {
        'loadId': loadId,
        'loadTag': loadTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/load/{loadId}/tag/{loadTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateLoadById operation.
     * @callback module:api/LoadApi~getDuplicateLoadByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Load} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a load by id
     * Returns a duplicated load identified by the specified id.
     * @param {Number} loadId Id of the load to be duplicated.
     * @param {module:api/LoadApi~getDuplicateLoadByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Load}
     */
    this.getDuplicateLoadById = function(loadId, callback) {
      var postBody = null;

      // verify the required parameter 'loadId' is set
      if (loadId === undefined || loadId === null) {
        throw new Error("Missing the required parameter 'loadId' when calling getDuplicateLoadById");
      }


      var pathParams = {
        'loadId': loadId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Load;

      return this.apiClient.callApi(
        '/v3.0/load/duplicate/{loadId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoadByFilter operation.
     * @callback module:api/LoadApi~getLoadByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Load>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search loads by filter
     * Returns the list of loads that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/LoadApi~getLoadByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Load>}
     */
    this.getLoadByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Load];

      return this.apiClient.callApi(
        '/v3.0/load/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoadById operation.
     * @callback module:api/LoadApi~getLoadByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Load} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a load by id
     * Returns the load identified by the specified id.
     * @param {Number} loadId Id of the load to be returned.
     * @param {module:api/LoadApi~getLoadByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Load}
     */
    this.getLoadById = function(loadId, callback) {
      var postBody = null;

      // verify the required parameter 'loadId' is set
      if (loadId === undefined || loadId === null) {
        throw new Error("Missing the required parameter 'loadId' when calling getLoadById");
      }


      var pathParams = {
        'loadId': loadId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Load;

      return this.apiClient.callApi(
        '/v3.0/load/{loadId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoadFiles operation.
     * @callback module:api/LoadApi~getLoadFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a load.
     * Get all existing load files.
     * @param {Number} loadId Id of the load to get files for
     * @param {module:api/LoadApi~getLoadFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getLoadFiles = function(loadId, callback) {
      var postBody = null;

      // verify the required parameter 'loadId' is set
      if (loadId === undefined || loadId === null) {
        throw new Error("Missing the required parameter 'loadId' when calling getLoadFiles");
      }


      var pathParams = {
        'loadId': loadId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/load/{loadId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoadTags operation.
     * @callback module:api/LoadApi~getLoadTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a load.
     * Get all existing load tags.
     * @param {Number} loadId Id of the load to get tags for
     * @param {module:api/LoadApi~getLoadTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getLoadTags = function(loadId, callback) {
      var postBody = null;

      // verify the required parameter 'loadId' is set
      if (loadId === undefined || loadId === null) {
        throw new Error("Missing the required parameter 'loadId' when calling getLoadTags");
      }


      var pathParams = {
        'loadId': loadId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/load/{loadId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLoadCustomFields operation.
     * @callback module:api/LoadApi~updateLoadCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a load custom fields
     * Updates an existing load custom fields using the specified data.
     * @param {module:model/Load} body Load to be updated.
     * @param {module:api/LoadApi~updateLoadCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateLoadCustomFields = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateLoadCustomFields");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/load/customFields', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
