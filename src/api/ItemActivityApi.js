/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ItemActivity', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ItemActivity'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.ItemActivityApi = factory(root.infoplus.ApiClient, root.infoplus.ItemActivity, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, ItemActivity, RecordFile) {
  'use strict';

  /**
   * ItemActivity service.
   * @module api/ItemActivityApi
   * @version beta
   */

  /**
   * Constructs a new ItemActivityApi. 
   * @alias module:api/ItemActivityApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addItemActivityAudit operation.
     * @callback module:api/ItemActivityApi~addItemActivityAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for an itemActivity
     * Adds an audit to an existing itemActivity.
     * @param {Number} itemActivityId Id of the itemActivity to add an audit to
     * @param {String} itemActivityAudit The audit to add
     * @param {module:api/ItemActivityApi~addItemActivityAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addItemActivityAudit = function(itemActivityId, itemActivityAudit, callback) {
      var postBody = null;

      // verify the required parameter 'itemActivityId' is set
      if (itemActivityId === undefined || itemActivityId === null) {
        throw new Error("Missing the required parameter 'itemActivityId' when calling addItemActivityAudit");
      }

      // verify the required parameter 'itemActivityAudit' is set
      if (itemActivityAudit === undefined || itemActivityAudit === null) {
        throw new Error("Missing the required parameter 'itemActivityAudit' when calling addItemActivityAudit");
      }


      var pathParams = {
        'itemActivityId': itemActivityId,
        'itemActivityAudit': itemActivityAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemActivity/{itemActivityId}/audit/{itemActivityAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addItemActivityFile operation.
     * @callback module:api/ItemActivityApi~addItemActivityFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to an itemActivity
     * Adds a file to an existing itemActivity.
     * @param {Number} itemActivityId Id of the itemActivity to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/ItemActivityApi~addItemActivityFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addItemActivityFile = function(itemActivityId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'itemActivityId' is set
      if (itemActivityId === undefined || itemActivityId === null) {
        throw new Error("Missing the required parameter 'itemActivityId' when calling addItemActivityFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addItemActivityFile");
      }


      var pathParams = {
        'itemActivityId': itemActivityId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemActivity/{itemActivityId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addItemActivityFileByURL operation.
     * @callback module:api/ItemActivityApi~addItemActivityFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to an itemActivity by URL.
     * Adds a file to an existing itemActivity by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} itemActivityId Id of the itemActivity to add an file to
     * @param {module:api/ItemActivityApi~addItemActivityFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addItemActivityFileByURL = function(body, itemActivityId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addItemActivityFileByURL");
      }

      // verify the required parameter 'itemActivityId' is set
      if (itemActivityId === undefined || itemActivityId === null) {
        throw new Error("Missing the required parameter 'itemActivityId' when calling addItemActivityFileByURL");
      }


      var pathParams = {
        'itemActivityId': itemActivityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemActivity/{itemActivityId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addItemActivityTag operation.
     * @callback module:api/ItemActivityApi~addItemActivityTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for an itemActivity.
     * Adds a tag to an existing itemActivity.
     * @param {Number} itemActivityId Id of the itemActivity to add a tag to
     * @param {String} itemActivityTag The tag to add
     * @param {module:api/ItemActivityApi~addItemActivityTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addItemActivityTag = function(itemActivityId, itemActivityTag, callback) {
      var postBody = null;

      // verify the required parameter 'itemActivityId' is set
      if (itemActivityId === undefined || itemActivityId === null) {
        throw new Error("Missing the required parameter 'itemActivityId' when calling addItemActivityTag");
      }

      // verify the required parameter 'itemActivityTag' is set
      if (itemActivityTag === undefined || itemActivityTag === null) {
        throw new Error("Missing the required parameter 'itemActivityTag' when calling addItemActivityTag");
      }


      var pathParams = {
        'itemActivityId': itemActivityId,
        'itemActivityTag': itemActivityTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemActivity/{itemActivityId}/tag/{itemActivityTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteItemActivityFile operation.
     * @callback module:api/ItemActivityApi~deleteItemActivityFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for an itemActivity.
     * Deletes an existing itemActivity file using the specified data.
     * @param {Number} itemActivityId Id of the itemActivity to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/ItemActivityApi~deleteItemActivityFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteItemActivityFile = function(itemActivityId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'itemActivityId' is set
      if (itemActivityId === undefined || itemActivityId === null) {
        throw new Error("Missing the required parameter 'itemActivityId' when calling deleteItemActivityFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteItemActivityFile");
      }


      var pathParams = {
        'itemActivityId': itemActivityId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemActivity/{itemActivityId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteItemActivityTag operation.
     * @callback module:api/ItemActivityApi~deleteItemActivityTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for an itemActivity.
     * Deletes an existing itemActivity tag using the specified data.
     * @param {Number} itemActivityId Id of the itemActivity to remove tag from
     * @param {String} itemActivityTag The tag to delete
     * @param {module:api/ItemActivityApi~deleteItemActivityTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteItemActivityTag = function(itemActivityId, itemActivityTag, callback) {
      var postBody = null;

      // verify the required parameter 'itemActivityId' is set
      if (itemActivityId === undefined || itemActivityId === null) {
        throw new Error("Missing the required parameter 'itemActivityId' when calling deleteItemActivityTag");
      }

      // verify the required parameter 'itemActivityTag' is set
      if (itemActivityTag === undefined || itemActivityTag === null) {
        throw new Error("Missing the required parameter 'itemActivityTag' when calling deleteItemActivityTag");
      }


      var pathParams = {
        'itemActivityId': itemActivityId,
        'itemActivityTag': itemActivityTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemActivity/{itemActivityId}/tag/{itemActivityTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateItemActivityById operation.
     * @callback module:api/ItemActivityApi~getDuplicateItemActivityByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemActivity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated an itemActivity by id
     * Returns a duplicated itemActivity identified by the specified id.
     * @param {Number} itemActivityId Id of the itemActivity to be duplicated.
     * @param {module:api/ItemActivityApi~getDuplicateItemActivityByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemActivity}
     */
    this.getDuplicateItemActivityById = function(itemActivityId, callback) {
      var postBody = null;

      // verify the required parameter 'itemActivityId' is set
      if (itemActivityId === undefined || itemActivityId === null) {
        throw new Error("Missing the required parameter 'itemActivityId' when calling getDuplicateItemActivityById");
      }


      var pathParams = {
        'itemActivityId': itemActivityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ItemActivity;

      return this.apiClient.callApi(
        '/beta/itemActivity/duplicate/{itemActivityId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemActivityByFilter operation.
     * @callback module:api/ItemActivityApi~getItemActivityByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ItemActivity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search itemActivitys by filter
     * Returns the list of itemActivitys that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/ItemActivityApi~getItemActivityByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ItemActivity>}
     */
    this.getItemActivityByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ItemActivity];

      return this.apiClient.callApi(
        '/beta/itemActivity/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemActivityById operation.
     * @callback module:api/ItemActivityApi~getItemActivityByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemActivity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an itemActivity by id
     * Returns the itemActivity identified by the specified id.
     * @param {Number} itemActivityId Id of the itemActivity to be returned.
     * @param {module:api/ItemActivityApi~getItemActivityByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemActivity}
     */
    this.getItemActivityById = function(itemActivityId, callback) {
      var postBody = null;

      // verify the required parameter 'itemActivityId' is set
      if (itemActivityId === undefined || itemActivityId === null) {
        throw new Error("Missing the required parameter 'itemActivityId' when calling getItemActivityById");
      }


      var pathParams = {
        'itemActivityId': itemActivityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ItemActivity;

      return this.apiClient.callApi(
        '/beta/itemActivity/{itemActivityId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemActivityFiles operation.
     * @callback module:api/ItemActivityApi~getItemActivityFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for an itemActivity.
     * Get all existing itemActivity files.
     * @param {Number} itemActivityId Id of the itemActivity to get files for
     * @param {module:api/ItemActivityApi~getItemActivityFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getItemActivityFiles = function(itemActivityId, callback) {
      var postBody = null;

      // verify the required parameter 'itemActivityId' is set
      if (itemActivityId === undefined || itemActivityId === null) {
        throw new Error("Missing the required parameter 'itemActivityId' when calling getItemActivityFiles");
      }


      var pathParams = {
        'itemActivityId': itemActivityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemActivity/{itemActivityId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemActivityTags operation.
     * @callback module:api/ItemActivityApi~getItemActivityTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for an itemActivity.
     * Get all existing itemActivity tags.
     * @param {Number} itemActivityId Id of the itemActivity to get tags for
     * @param {module:api/ItemActivityApi~getItemActivityTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getItemActivityTags = function(itemActivityId, callback) {
      var postBody = null;

      // verify the required parameter 'itemActivityId' is set
      if (itemActivityId === undefined || itemActivityId === null) {
        throw new Error("Missing the required parameter 'itemActivityId' when calling getItemActivityTags");
      }


      var pathParams = {
        'itemActivityId': itemActivityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemActivity/{itemActivityId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
