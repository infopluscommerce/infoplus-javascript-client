/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/ItemReceiptActivity', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/ItemReceiptActivity'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.ItemReceiptActivityApi = factory(root.infoplus.ApiClient, root.infoplus.ApiResponse, root.infoplus.ItemReceiptActivity, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, ApiResponse, ItemReceiptActivity, RecordFile) {
  'use strict';

  /**
   * ItemReceiptActivity service.
   * @module api/ItemReceiptActivityApi
   * @version beta
   */

  /**
   * Constructs a new ItemReceiptActivityApi. 
   * @alias module:api/ItemReceiptActivityApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addItemReceiptActivity operation.
     * @callback module:api/ItemReceiptActivityApi~addItemReceiptActivityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemReceiptActivity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an itemReceiptActivity
     * Inserts a new itemReceiptActivity using the specified data.
     * @param {module:model/ItemReceiptActivity} body ItemReceiptActivity to be inserted.
     * @param {module:api/ItemReceiptActivityApi~addItemReceiptActivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemReceiptActivity}
     */
    this.addItemReceiptActivity = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addItemReceiptActivity");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ItemReceiptActivity;

      return this.apiClient.callApi(
        '/beta/itemReceiptActivity', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addItemReceiptActivityAudit operation.
     * @callback module:api/ItemReceiptActivityApi~addItemReceiptActivityAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for an itemReceiptActivity
     * Adds an audit to an existing itemReceiptActivity.
     * @param {Number} itemReceiptActivityId Id of the itemReceiptActivity to add an audit to
     * @param {String} itemReceiptActivityAudit The audit to add
     * @param {module:api/ItemReceiptActivityApi~addItemReceiptActivityAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addItemReceiptActivityAudit = function(itemReceiptActivityId, itemReceiptActivityAudit, callback) {
      var postBody = null;

      // verify the required parameter 'itemReceiptActivityId' is set
      if (itemReceiptActivityId === undefined || itemReceiptActivityId === null) {
        throw new Error("Missing the required parameter 'itemReceiptActivityId' when calling addItemReceiptActivityAudit");
      }

      // verify the required parameter 'itemReceiptActivityAudit' is set
      if (itemReceiptActivityAudit === undefined || itemReceiptActivityAudit === null) {
        throw new Error("Missing the required parameter 'itemReceiptActivityAudit' when calling addItemReceiptActivityAudit");
      }


      var pathParams = {
        'itemReceiptActivityId': itemReceiptActivityId,
        'itemReceiptActivityAudit': itemReceiptActivityAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemReceiptActivity/{itemReceiptActivityId}/audit/{itemReceiptActivityAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addItemReceiptActivityFile operation.
     * @callback module:api/ItemReceiptActivityApi~addItemReceiptActivityFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to an itemReceiptActivity
     * Adds a file to an existing itemReceiptActivity.
     * @param {Number} itemReceiptActivityId Id of the itemReceiptActivity to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/ItemReceiptActivityApi~addItemReceiptActivityFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addItemReceiptActivityFile = function(itemReceiptActivityId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'itemReceiptActivityId' is set
      if (itemReceiptActivityId === undefined || itemReceiptActivityId === null) {
        throw new Error("Missing the required parameter 'itemReceiptActivityId' when calling addItemReceiptActivityFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addItemReceiptActivityFile");
      }


      var pathParams = {
        'itemReceiptActivityId': itemReceiptActivityId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemReceiptActivity/{itemReceiptActivityId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addItemReceiptActivityFileByURL operation.
     * @callback module:api/ItemReceiptActivityApi~addItemReceiptActivityFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to an itemReceiptActivity by URL.
     * Adds a file to an existing itemReceiptActivity by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} itemReceiptActivityId Id of the itemReceiptActivity to add an file to
     * @param {module:api/ItemReceiptActivityApi~addItemReceiptActivityFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addItemReceiptActivityFileByURL = function(body, itemReceiptActivityId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addItemReceiptActivityFileByURL");
      }

      // verify the required parameter 'itemReceiptActivityId' is set
      if (itemReceiptActivityId === undefined || itemReceiptActivityId === null) {
        throw new Error("Missing the required parameter 'itemReceiptActivityId' when calling addItemReceiptActivityFileByURL");
      }


      var pathParams = {
        'itemReceiptActivityId': itemReceiptActivityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemReceiptActivity/{itemReceiptActivityId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addItemReceiptActivityTag operation.
     * @callback module:api/ItemReceiptActivityApi~addItemReceiptActivityTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for an itemReceiptActivity.
     * Adds a tag to an existing itemReceiptActivity.
     * @param {Number} itemReceiptActivityId Id of the itemReceiptActivity to add a tag to
     * @param {String} itemReceiptActivityTag The tag to add
     * @param {module:api/ItemReceiptActivityApi~addItemReceiptActivityTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addItemReceiptActivityTag = function(itemReceiptActivityId, itemReceiptActivityTag, callback) {
      var postBody = null;

      // verify the required parameter 'itemReceiptActivityId' is set
      if (itemReceiptActivityId === undefined || itemReceiptActivityId === null) {
        throw new Error("Missing the required parameter 'itemReceiptActivityId' when calling addItemReceiptActivityTag");
      }

      // verify the required parameter 'itemReceiptActivityTag' is set
      if (itemReceiptActivityTag === undefined || itemReceiptActivityTag === null) {
        throw new Error("Missing the required parameter 'itemReceiptActivityTag' when calling addItemReceiptActivityTag");
      }


      var pathParams = {
        'itemReceiptActivityId': itemReceiptActivityId,
        'itemReceiptActivityTag': itemReceiptActivityTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemReceiptActivity/{itemReceiptActivityId}/tag/{itemReceiptActivityTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteItemReceiptActivity operation.
     * @callback module:api/ItemReceiptActivityApi~deleteItemReceiptActivityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an itemReceiptActivity
     * Deletes the itemReceiptActivity identified by the specified id.
     * @param {Number} itemReceiptActivityId Id of the itemReceiptActivity to be deleted.
     * @param {module:api/ItemReceiptActivityApi~deleteItemReceiptActivityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteItemReceiptActivity = function(itemReceiptActivityId, callback) {
      var postBody = null;

      // verify the required parameter 'itemReceiptActivityId' is set
      if (itemReceiptActivityId === undefined || itemReceiptActivityId === null) {
        throw new Error("Missing the required parameter 'itemReceiptActivityId' when calling deleteItemReceiptActivity");
      }


      var pathParams = {
        'itemReceiptActivityId': itemReceiptActivityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemReceiptActivity/{itemReceiptActivityId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteItemReceiptActivityFile operation.
     * @callback module:api/ItemReceiptActivityApi~deleteItemReceiptActivityFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for an itemReceiptActivity.
     * Deletes an existing itemReceiptActivity file using the specified data.
     * @param {Number} itemReceiptActivityId Id of the itemReceiptActivity to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/ItemReceiptActivityApi~deleteItemReceiptActivityFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteItemReceiptActivityFile = function(itemReceiptActivityId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'itemReceiptActivityId' is set
      if (itemReceiptActivityId === undefined || itemReceiptActivityId === null) {
        throw new Error("Missing the required parameter 'itemReceiptActivityId' when calling deleteItemReceiptActivityFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteItemReceiptActivityFile");
      }


      var pathParams = {
        'itemReceiptActivityId': itemReceiptActivityId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemReceiptActivity/{itemReceiptActivityId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteItemReceiptActivityTag operation.
     * @callback module:api/ItemReceiptActivityApi~deleteItemReceiptActivityTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for an itemReceiptActivity.
     * Deletes an existing itemReceiptActivity tag using the specified data.
     * @param {Number} itemReceiptActivityId Id of the itemReceiptActivity to remove tag from
     * @param {String} itemReceiptActivityTag The tag to delete
     * @param {module:api/ItemReceiptActivityApi~deleteItemReceiptActivityTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteItemReceiptActivityTag = function(itemReceiptActivityId, itemReceiptActivityTag, callback) {
      var postBody = null;

      // verify the required parameter 'itemReceiptActivityId' is set
      if (itemReceiptActivityId === undefined || itemReceiptActivityId === null) {
        throw new Error("Missing the required parameter 'itemReceiptActivityId' when calling deleteItemReceiptActivityTag");
      }

      // verify the required parameter 'itemReceiptActivityTag' is set
      if (itemReceiptActivityTag === undefined || itemReceiptActivityTag === null) {
        throw new Error("Missing the required parameter 'itemReceiptActivityTag' when calling deleteItemReceiptActivityTag");
      }


      var pathParams = {
        'itemReceiptActivityId': itemReceiptActivityId,
        'itemReceiptActivityTag': itemReceiptActivityTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemReceiptActivity/{itemReceiptActivityId}/tag/{itemReceiptActivityTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateItemReceiptActivityById operation.
     * @callback module:api/ItemReceiptActivityApi~getDuplicateItemReceiptActivityByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemReceiptActivity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated an itemReceiptActivity by id
     * Returns a duplicated itemReceiptActivity identified by the specified id.
     * @param {Number} itemReceiptActivityId Id of the itemReceiptActivity to be duplicated.
     * @param {module:api/ItemReceiptActivityApi~getDuplicateItemReceiptActivityByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemReceiptActivity}
     */
    this.getDuplicateItemReceiptActivityById = function(itemReceiptActivityId, callback) {
      var postBody = null;

      // verify the required parameter 'itemReceiptActivityId' is set
      if (itemReceiptActivityId === undefined || itemReceiptActivityId === null) {
        throw new Error("Missing the required parameter 'itemReceiptActivityId' when calling getDuplicateItemReceiptActivityById");
      }


      var pathParams = {
        'itemReceiptActivityId': itemReceiptActivityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ItemReceiptActivity;

      return this.apiClient.callApi(
        '/beta/itemReceiptActivity/duplicate/{itemReceiptActivityId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemReceiptActivityByFilter operation.
     * @callback module:api/ItemReceiptActivityApi~getItemReceiptActivityByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ItemReceiptActivity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search itemReceiptActivitys by filter
     * Returns the list of itemReceiptActivitys that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/ItemReceiptActivityApi~getItemReceiptActivityByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ItemReceiptActivity>}
     */
    this.getItemReceiptActivityByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ItemReceiptActivity];

      return this.apiClient.callApi(
        '/beta/itemReceiptActivity/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemReceiptActivityById operation.
     * @callback module:api/ItemReceiptActivityApi~getItemReceiptActivityByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemReceiptActivity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an itemReceiptActivity by id
     * Returns the itemReceiptActivity identified by the specified id.
     * @param {Number} itemReceiptActivityId Id of the itemReceiptActivity to be returned.
     * @param {module:api/ItemReceiptActivityApi~getItemReceiptActivityByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemReceiptActivity}
     */
    this.getItemReceiptActivityById = function(itemReceiptActivityId, callback) {
      var postBody = null;

      // verify the required parameter 'itemReceiptActivityId' is set
      if (itemReceiptActivityId === undefined || itemReceiptActivityId === null) {
        throw new Error("Missing the required parameter 'itemReceiptActivityId' when calling getItemReceiptActivityById");
      }


      var pathParams = {
        'itemReceiptActivityId': itemReceiptActivityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ItemReceiptActivity;

      return this.apiClient.callApi(
        '/beta/itemReceiptActivity/{itemReceiptActivityId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemReceiptActivityFiles operation.
     * @callback module:api/ItemReceiptActivityApi~getItemReceiptActivityFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for an itemReceiptActivity.
     * Get all existing itemReceiptActivity files.
     * @param {Number} itemReceiptActivityId Id of the itemReceiptActivity to get files for
     * @param {module:api/ItemReceiptActivityApi~getItemReceiptActivityFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getItemReceiptActivityFiles = function(itemReceiptActivityId, callback) {
      var postBody = null;

      // verify the required parameter 'itemReceiptActivityId' is set
      if (itemReceiptActivityId === undefined || itemReceiptActivityId === null) {
        throw new Error("Missing the required parameter 'itemReceiptActivityId' when calling getItemReceiptActivityFiles");
      }


      var pathParams = {
        'itemReceiptActivityId': itemReceiptActivityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemReceiptActivity/{itemReceiptActivityId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemReceiptActivityTags operation.
     * @callback module:api/ItemReceiptActivityApi~getItemReceiptActivityTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for an itemReceiptActivity.
     * Get all existing itemReceiptActivity tags.
     * @param {Number} itemReceiptActivityId Id of the itemReceiptActivity to get tags for
     * @param {module:api/ItemReceiptActivityApi~getItemReceiptActivityTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getItemReceiptActivityTags = function(itemReceiptActivityId, callback) {
      var postBody = null;

      // verify the required parameter 'itemReceiptActivityId' is set
      if (itemReceiptActivityId === undefined || itemReceiptActivityId === null) {
        throw new Error("Missing the required parameter 'itemReceiptActivityId' when calling getItemReceiptActivityTags");
      }


      var pathParams = {
        'itemReceiptActivityId': itemReceiptActivityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemReceiptActivity/{itemReceiptActivityId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateItemReceiptActivity operation.
     * @callback module:api/ItemReceiptActivityApi~updateItemReceiptActivityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an itemReceiptActivity
     * Updates an existing itemReceiptActivity using the specified data.
     * @param {module:model/ItemReceiptActivity} body ItemReceiptActivity to be updated.
     * @param {module:api/ItemReceiptActivityApi~updateItemReceiptActivityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateItemReceiptActivity = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateItemReceiptActivity");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemReceiptActivity', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
