/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FinanceSystemConnectionLog', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FinanceSystemConnectionLog'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.FinanceSystemConnectionLogApi = factory(root.infoplus.ApiClient, root.infoplus.FinanceSystemConnectionLog, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, FinanceSystemConnectionLog, RecordFile) {
  'use strict';

  /**
   * FinanceSystemConnectionLog service.
   * @module api/FinanceSystemConnectionLogApi
   * @version beta
   */

  /**
   * Constructs a new FinanceSystemConnectionLogApi. 
   * @alias module:api/FinanceSystemConnectionLogApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addFinanceSystemConnectionLogAudit operation.
     * @callback module:api/FinanceSystemConnectionLogApi~addFinanceSystemConnectionLogAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a financeSystemConnectionLog
     * Adds an audit to an existing financeSystemConnectionLog.
     * @param {Number} financeSystemConnectionLogId Id of the financeSystemConnectionLog to add an audit to
     * @param {String} financeSystemConnectionLogAudit The audit to add
     * @param {module:api/FinanceSystemConnectionLogApi~addFinanceSystemConnectionLogAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addFinanceSystemConnectionLogAudit = function(financeSystemConnectionLogId, financeSystemConnectionLogAudit, callback) {
      var postBody = null;

      // verify the required parameter 'financeSystemConnectionLogId' is set
      if (financeSystemConnectionLogId === undefined || financeSystemConnectionLogId === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionLogId' when calling addFinanceSystemConnectionLogAudit");
      }

      // verify the required parameter 'financeSystemConnectionLogAudit' is set
      if (financeSystemConnectionLogAudit === undefined || financeSystemConnectionLogAudit === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionLogAudit' when calling addFinanceSystemConnectionLogAudit");
      }


      var pathParams = {
        'financeSystemConnectionLogId': financeSystemConnectionLogId,
        'financeSystemConnectionLogAudit': financeSystemConnectionLogAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/audit/{financeSystemConnectionLogAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addFinanceSystemConnectionLogFile operation.
     * @callback module:api/FinanceSystemConnectionLogApi~addFinanceSystemConnectionLogFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a financeSystemConnectionLog
     * Adds a file to an existing financeSystemConnectionLog.
     * @param {Number} financeSystemConnectionLogId Id of the financeSystemConnectionLog to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/FinanceSystemConnectionLogApi~addFinanceSystemConnectionLogFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addFinanceSystemConnectionLogFile = function(financeSystemConnectionLogId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'financeSystemConnectionLogId' is set
      if (financeSystemConnectionLogId === undefined || financeSystemConnectionLogId === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionLogId' when calling addFinanceSystemConnectionLogFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addFinanceSystemConnectionLogFile");
      }


      var pathParams = {
        'financeSystemConnectionLogId': financeSystemConnectionLogId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addFinanceSystemConnectionLogFileByURL operation.
     * @callback module:api/FinanceSystemConnectionLogApi~addFinanceSystemConnectionLogFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a financeSystemConnectionLog by URL.
     * Adds a file to an existing financeSystemConnectionLog by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} financeSystemConnectionLogId Id of the financeSystemConnectionLog to add an file to
     * @param {module:api/FinanceSystemConnectionLogApi~addFinanceSystemConnectionLogFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addFinanceSystemConnectionLogFileByURL = function(body, financeSystemConnectionLogId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addFinanceSystemConnectionLogFileByURL");
      }

      // verify the required parameter 'financeSystemConnectionLogId' is set
      if (financeSystemConnectionLogId === undefined || financeSystemConnectionLogId === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionLogId' when calling addFinanceSystemConnectionLogFileByURL");
      }


      var pathParams = {
        'financeSystemConnectionLogId': financeSystemConnectionLogId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addFinanceSystemConnectionLogTag operation.
     * @callback module:api/FinanceSystemConnectionLogApi~addFinanceSystemConnectionLogTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a financeSystemConnectionLog.
     * Adds a tag to an existing financeSystemConnectionLog.
     * @param {Number} financeSystemConnectionLogId Id of the financeSystemConnectionLog to add a tag to
     * @param {String} financeSystemConnectionLogTag The tag to add
     * @param {module:api/FinanceSystemConnectionLogApi~addFinanceSystemConnectionLogTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addFinanceSystemConnectionLogTag = function(financeSystemConnectionLogId, financeSystemConnectionLogTag, callback) {
      var postBody = null;

      // verify the required parameter 'financeSystemConnectionLogId' is set
      if (financeSystemConnectionLogId === undefined || financeSystemConnectionLogId === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionLogId' when calling addFinanceSystemConnectionLogTag");
      }

      // verify the required parameter 'financeSystemConnectionLogTag' is set
      if (financeSystemConnectionLogTag === undefined || financeSystemConnectionLogTag === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionLogTag' when calling addFinanceSystemConnectionLogTag");
      }


      var pathParams = {
        'financeSystemConnectionLogId': financeSystemConnectionLogId,
        'financeSystemConnectionLogTag': financeSystemConnectionLogTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/tag/{financeSystemConnectionLogTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFinanceSystemConnectionLogFile operation.
     * @callback module:api/FinanceSystemConnectionLogApi~deleteFinanceSystemConnectionLogFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a financeSystemConnectionLog.
     * Deletes an existing financeSystemConnectionLog file using the specified data.
     * @param {Number} financeSystemConnectionLogId Id of the financeSystemConnectionLog to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/FinanceSystemConnectionLogApi~deleteFinanceSystemConnectionLogFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFinanceSystemConnectionLogFile = function(financeSystemConnectionLogId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'financeSystemConnectionLogId' is set
      if (financeSystemConnectionLogId === undefined || financeSystemConnectionLogId === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionLogId' when calling deleteFinanceSystemConnectionLogFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteFinanceSystemConnectionLogFile");
      }


      var pathParams = {
        'financeSystemConnectionLogId': financeSystemConnectionLogId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFinanceSystemConnectionLogTag operation.
     * @callback module:api/FinanceSystemConnectionLogApi~deleteFinanceSystemConnectionLogTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a financeSystemConnectionLog.
     * Deletes an existing financeSystemConnectionLog tag using the specified data.
     * @param {Number} financeSystemConnectionLogId Id of the financeSystemConnectionLog to remove tag from
     * @param {String} financeSystemConnectionLogTag The tag to delete
     * @param {module:api/FinanceSystemConnectionLogApi~deleteFinanceSystemConnectionLogTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFinanceSystemConnectionLogTag = function(financeSystemConnectionLogId, financeSystemConnectionLogTag, callback) {
      var postBody = null;

      // verify the required parameter 'financeSystemConnectionLogId' is set
      if (financeSystemConnectionLogId === undefined || financeSystemConnectionLogId === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionLogId' when calling deleteFinanceSystemConnectionLogTag");
      }

      // verify the required parameter 'financeSystemConnectionLogTag' is set
      if (financeSystemConnectionLogTag === undefined || financeSystemConnectionLogTag === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionLogTag' when calling deleteFinanceSystemConnectionLogTag");
      }


      var pathParams = {
        'financeSystemConnectionLogId': financeSystemConnectionLogId,
        'financeSystemConnectionLogTag': financeSystemConnectionLogTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/tag/{financeSystemConnectionLogTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateFinanceSystemConnectionLogById operation.
     * @callback module:api/FinanceSystemConnectionLogApi~getDuplicateFinanceSystemConnectionLogByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FinanceSystemConnectionLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a financeSystemConnectionLog by id
     * Returns a duplicated financeSystemConnectionLog identified by the specified id.
     * @param {Number} financeSystemConnectionLogId Id of the financeSystemConnectionLog to be duplicated.
     * @param {module:api/FinanceSystemConnectionLogApi~getDuplicateFinanceSystemConnectionLogByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FinanceSystemConnectionLog}
     */
    this.getDuplicateFinanceSystemConnectionLogById = function(financeSystemConnectionLogId, callback) {
      var postBody = null;

      // verify the required parameter 'financeSystemConnectionLogId' is set
      if (financeSystemConnectionLogId === undefined || financeSystemConnectionLogId === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionLogId' when calling getDuplicateFinanceSystemConnectionLogById");
      }


      var pathParams = {
        'financeSystemConnectionLogId': financeSystemConnectionLogId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = FinanceSystemConnectionLog;

      return this.apiClient.callApi(
        '/beta/financeSystemConnectionLog/duplicate/{financeSystemConnectionLogId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFinanceSystemConnectionLogByFilter operation.
     * @callback module:api/FinanceSystemConnectionLogApi~getFinanceSystemConnectionLogByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FinanceSystemConnectionLog>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search financeSystemConnectionLogs by filter
     * Returns the list of financeSystemConnectionLogs that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/FinanceSystemConnectionLogApi~getFinanceSystemConnectionLogByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FinanceSystemConnectionLog>}
     */
    this.getFinanceSystemConnectionLogByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FinanceSystemConnectionLog];

      return this.apiClient.callApi(
        '/beta/financeSystemConnectionLog/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFinanceSystemConnectionLogById operation.
     * @callback module:api/FinanceSystemConnectionLogApi~getFinanceSystemConnectionLogByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FinanceSystemConnectionLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a financeSystemConnectionLog by id
     * Returns the financeSystemConnectionLog identified by the specified id.
     * @param {Number} financeSystemConnectionLogId Id of the financeSystemConnectionLog to be returned.
     * @param {module:api/FinanceSystemConnectionLogApi~getFinanceSystemConnectionLogByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FinanceSystemConnectionLog}
     */
    this.getFinanceSystemConnectionLogById = function(financeSystemConnectionLogId, callback) {
      var postBody = null;

      // verify the required parameter 'financeSystemConnectionLogId' is set
      if (financeSystemConnectionLogId === undefined || financeSystemConnectionLogId === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionLogId' when calling getFinanceSystemConnectionLogById");
      }


      var pathParams = {
        'financeSystemConnectionLogId': financeSystemConnectionLogId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = FinanceSystemConnectionLog;

      return this.apiClient.callApi(
        '/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFinanceSystemConnectionLogFiles operation.
     * @callback module:api/FinanceSystemConnectionLogApi~getFinanceSystemConnectionLogFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a financeSystemConnectionLog.
     * Get all existing financeSystemConnectionLog files.
     * @param {Number} financeSystemConnectionLogId Id of the financeSystemConnectionLog to get files for
     * @param {module:api/FinanceSystemConnectionLogApi~getFinanceSystemConnectionLogFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getFinanceSystemConnectionLogFiles = function(financeSystemConnectionLogId, callback) {
      var postBody = null;

      // verify the required parameter 'financeSystemConnectionLogId' is set
      if (financeSystemConnectionLogId === undefined || financeSystemConnectionLogId === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionLogId' when calling getFinanceSystemConnectionLogFiles");
      }


      var pathParams = {
        'financeSystemConnectionLogId': financeSystemConnectionLogId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFinanceSystemConnectionLogTags operation.
     * @callback module:api/FinanceSystemConnectionLogApi~getFinanceSystemConnectionLogTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a financeSystemConnectionLog.
     * Get all existing financeSystemConnectionLog tags.
     * @param {Number} financeSystemConnectionLogId Id of the financeSystemConnectionLog to get tags for
     * @param {module:api/FinanceSystemConnectionLogApi~getFinanceSystemConnectionLogTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getFinanceSystemConnectionLogTags = function(financeSystemConnectionLogId, callback) {
      var postBody = null;

      // verify the required parameter 'financeSystemConnectionLogId' is set
      if (financeSystemConnectionLogId === undefined || financeSystemConnectionLogId === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionLogId' when calling getFinanceSystemConnectionLogTags");
      }


      var pathParams = {
        'financeSystemConnectionLogId': financeSystemConnectionLogId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
