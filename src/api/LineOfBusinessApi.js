/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/LineOfBusiness', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/LineOfBusiness'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.LineOfBusinessApi = factory(root.infoplus.ApiClient, root.infoplus.ApiResponse, root.infoplus.LineOfBusiness, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, ApiResponse, LineOfBusiness, RecordFile) {
  'use strict';

  /**
   * LineOfBusiness service.
   * @module api/LineOfBusinessApi
   * @version beta
   */

  /**
   * Constructs a new LineOfBusinessApi. 
   * @alias module:api/LineOfBusinessApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addLineOfBusiness operation.
     * @callback module:api/LineOfBusinessApi~addLineOfBusinessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LineOfBusiness} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a lineOfBusiness
     * Inserts a new lineOfBusiness using the specified data.
     * @param {module:model/LineOfBusiness} body LineOfBusiness to be inserted.
     * @param {module:api/LineOfBusinessApi~addLineOfBusinessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LineOfBusiness}
     */
    this.addLineOfBusiness = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addLineOfBusiness");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LineOfBusiness;

      return this.apiClient.callApi(
        '/beta/lineOfBusiness', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addLineOfBusinessAudit operation.
     * @callback module:api/LineOfBusinessApi~addLineOfBusinessAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a lineOfBusiness
     * Adds an audit to an existing lineOfBusiness.
     * @param {Number} lineOfBusinessId Id of the lineOfBusiness to add an audit to
     * @param {String} lineOfBusinessAudit The audit to add
     * @param {module:api/LineOfBusinessApi~addLineOfBusinessAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addLineOfBusinessAudit = function(lineOfBusinessId, lineOfBusinessAudit, callback) {
      var postBody = null;

      // verify the required parameter 'lineOfBusinessId' is set
      if (lineOfBusinessId === undefined || lineOfBusinessId === null) {
        throw new Error("Missing the required parameter 'lineOfBusinessId' when calling addLineOfBusinessAudit");
      }

      // verify the required parameter 'lineOfBusinessAudit' is set
      if (lineOfBusinessAudit === undefined || lineOfBusinessAudit === null) {
        throw new Error("Missing the required parameter 'lineOfBusinessAudit' when calling addLineOfBusinessAudit");
      }


      var pathParams = {
        'lineOfBusinessId': lineOfBusinessId,
        'lineOfBusinessAudit': lineOfBusinessAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/lineOfBusiness/{lineOfBusinessId}/audit/{lineOfBusinessAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addLineOfBusinessFile operation.
     * @callback module:api/LineOfBusinessApi~addLineOfBusinessFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a lineOfBusiness
     * Adds a file to an existing lineOfBusiness.
     * @param {Number} lineOfBusinessId Id of the lineOfBusiness to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/LineOfBusinessApi~addLineOfBusinessFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addLineOfBusinessFile = function(lineOfBusinessId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'lineOfBusinessId' is set
      if (lineOfBusinessId === undefined || lineOfBusinessId === null) {
        throw new Error("Missing the required parameter 'lineOfBusinessId' when calling addLineOfBusinessFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addLineOfBusinessFile");
      }


      var pathParams = {
        'lineOfBusinessId': lineOfBusinessId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/lineOfBusiness/{lineOfBusinessId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addLineOfBusinessFileByURL operation.
     * @callback module:api/LineOfBusinessApi~addLineOfBusinessFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a lineOfBusiness by URL.
     * Adds a file to an existing lineOfBusiness by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} lineOfBusinessId Id of the lineOfBusiness to add an file to
     * @param {module:api/LineOfBusinessApi~addLineOfBusinessFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addLineOfBusinessFileByURL = function(body, lineOfBusinessId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addLineOfBusinessFileByURL");
      }

      // verify the required parameter 'lineOfBusinessId' is set
      if (lineOfBusinessId === undefined || lineOfBusinessId === null) {
        throw new Error("Missing the required parameter 'lineOfBusinessId' when calling addLineOfBusinessFileByURL");
      }


      var pathParams = {
        'lineOfBusinessId': lineOfBusinessId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/lineOfBusiness/{lineOfBusinessId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addLineOfBusinessTag operation.
     * @callback module:api/LineOfBusinessApi~addLineOfBusinessTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a lineOfBusiness.
     * Adds a tag to an existing lineOfBusiness.
     * @param {Number} lineOfBusinessId Id of the lineOfBusiness to add a tag to
     * @param {String} lineOfBusinessTag The tag to add
     * @param {module:api/LineOfBusinessApi~addLineOfBusinessTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addLineOfBusinessTag = function(lineOfBusinessId, lineOfBusinessTag, callback) {
      var postBody = null;

      // verify the required parameter 'lineOfBusinessId' is set
      if (lineOfBusinessId === undefined || lineOfBusinessId === null) {
        throw new Error("Missing the required parameter 'lineOfBusinessId' when calling addLineOfBusinessTag");
      }

      // verify the required parameter 'lineOfBusinessTag' is set
      if (lineOfBusinessTag === undefined || lineOfBusinessTag === null) {
        throw new Error("Missing the required parameter 'lineOfBusinessTag' when calling addLineOfBusinessTag");
      }


      var pathParams = {
        'lineOfBusinessId': lineOfBusinessId,
        'lineOfBusinessTag': lineOfBusinessTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/lineOfBusiness/{lineOfBusinessId}/tag/{lineOfBusinessTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLineOfBusinessFile operation.
     * @callback module:api/LineOfBusinessApi~deleteLineOfBusinessFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a lineOfBusiness.
     * Deletes an existing lineOfBusiness file using the specified data.
     * @param {Number} lineOfBusinessId Id of the lineOfBusiness to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/LineOfBusinessApi~deleteLineOfBusinessFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLineOfBusinessFile = function(lineOfBusinessId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'lineOfBusinessId' is set
      if (lineOfBusinessId === undefined || lineOfBusinessId === null) {
        throw new Error("Missing the required parameter 'lineOfBusinessId' when calling deleteLineOfBusinessFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteLineOfBusinessFile");
      }


      var pathParams = {
        'lineOfBusinessId': lineOfBusinessId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/lineOfBusiness/{lineOfBusinessId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLineOfBusinessTag operation.
     * @callback module:api/LineOfBusinessApi~deleteLineOfBusinessTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a lineOfBusiness.
     * Deletes an existing lineOfBusiness tag using the specified data.
     * @param {Number} lineOfBusinessId Id of the lineOfBusiness to remove tag from
     * @param {String} lineOfBusinessTag The tag to delete
     * @param {module:api/LineOfBusinessApi~deleteLineOfBusinessTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLineOfBusinessTag = function(lineOfBusinessId, lineOfBusinessTag, callback) {
      var postBody = null;

      // verify the required parameter 'lineOfBusinessId' is set
      if (lineOfBusinessId === undefined || lineOfBusinessId === null) {
        throw new Error("Missing the required parameter 'lineOfBusinessId' when calling deleteLineOfBusinessTag");
      }

      // verify the required parameter 'lineOfBusinessTag' is set
      if (lineOfBusinessTag === undefined || lineOfBusinessTag === null) {
        throw new Error("Missing the required parameter 'lineOfBusinessTag' when calling deleteLineOfBusinessTag");
      }


      var pathParams = {
        'lineOfBusinessId': lineOfBusinessId,
        'lineOfBusinessTag': lineOfBusinessTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/lineOfBusiness/{lineOfBusinessId}/tag/{lineOfBusinessTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateLineOfBusinessById operation.
     * @callback module:api/LineOfBusinessApi~getDuplicateLineOfBusinessByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LineOfBusiness} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a lineOfBusiness by id
     * Returns a duplicated lineOfBusiness identified by the specified id.
     * @param {Number} lineOfBusinessId Id of the lineOfBusiness to be duplicated.
     * @param {module:api/LineOfBusinessApi~getDuplicateLineOfBusinessByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LineOfBusiness}
     */
    this.getDuplicateLineOfBusinessById = function(lineOfBusinessId, callback) {
      var postBody = null;

      // verify the required parameter 'lineOfBusinessId' is set
      if (lineOfBusinessId === undefined || lineOfBusinessId === null) {
        throw new Error("Missing the required parameter 'lineOfBusinessId' when calling getDuplicateLineOfBusinessById");
      }


      var pathParams = {
        'lineOfBusinessId': lineOfBusinessId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LineOfBusiness;

      return this.apiClient.callApi(
        '/beta/lineOfBusiness/duplicate/{lineOfBusinessId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLineOfBusinessByFilter operation.
     * @callback module:api/LineOfBusinessApi~getLineOfBusinessByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LineOfBusiness>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search lineOfBusinesses by filter
     * Returns the list of lineOfBusinesses that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/LineOfBusinessApi~getLineOfBusinessByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LineOfBusiness>}
     */
    this.getLineOfBusinessByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [LineOfBusiness];

      return this.apiClient.callApi(
        '/beta/lineOfBusiness/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLineOfBusinessById operation.
     * @callback module:api/LineOfBusinessApi~getLineOfBusinessByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LineOfBusiness} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a lineOfBusiness by id
     * Returns the lineOfBusiness identified by the specified id.
     * @param {Number} lineOfBusinessId Id of the lineOfBusiness to be returned.
     * @param {module:api/LineOfBusinessApi~getLineOfBusinessByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LineOfBusiness}
     */
    this.getLineOfBusinessById = function(lineOfBusinessId, callback) {
      var postBody = null;

      // verify the required parameter 'lineOfBusinessId' is set
      if (lineOfBusinessId === undefined || lineOfBusinessId === null) {
        throw new Error("Missing the required parameter 'lineOfBusinessId' when calling getLineOfBusinessById");
      }


      var pathParams = {
        'lineOfBusinessId': lineOfBusinessId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LineOfBusiness;

      return this.apiClient.callApi(
        '/beta/lineOfBusiness/{lineOfBusinessId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLineOfBusinessFiles operation.
     * @callback module:api/LineOfBusinessApi~getLineOfBusinessFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a lineOfBusiness.
     * Get all existing lineOfBusiness files.
     * @param {Number} lineOfBusinessId Id of the lineOfBusiness to get files for
     * @param {module:api/LineOfBusinessApi~getLineOfBusinessFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getLineOfBusinessFiles = function(lineOfBusinessId, callback) {
      var postBody = null;

      // verify the required parameter 'lineOfBusinessId' is set
      if (lineOfBusinessId === undefined || lineOfBusinessId === null) {
        throw new Error("Missing the required parameter 'lineOfBusinessId' when calling getLineOfBusinessFiles");
      }


      var pathParams = {
        'lineOfBusinessId': lineOfBusinessId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/lineOfBusiness/{lineOfBusinessId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLineOfBusinessTags operation.
     * @callback module:api/LineOfBusinessApi~getLineOfBusinessTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a lineOfBusiness.
     * Get all existing lineOfBusiness tags.
     * @param {Number} lineOfBusinessId Id of the lineOfBusiness to get tags for
     * @param {module:api/LineOfBusinessApi~getLineOfBusinessTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getLineOfBusinessTags = function(lineOfBusinessId, callback) {
      var postBody = null;

      // verify the required parameter 'lineOfBusinessId' is set
      if (lineOfBusinessId === undefined || lineOfBusinessId === null) {
        throw new Error("Missing the required parameter 'lineOfBusinessId' when calling getLineOfBusinessTags");
      }


      var pathParams = {
        'lineOfBusinessId': lineOfBusinessId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/lineOfBusiness/{lineOfBusinessId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLineOfBusiness operation.
     * @callback module:api/LineOfBusinessApi~updateLineOfBusinessCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a lineOfBusiness
     * Updates an existing lineOfBusiness using the specified data.
     * @param {module:model/LineOfBusiness} body LineOfBusiness to be updated.
     * @param {module:api/LineOfBusinessApi~updateLineOfBusinessCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateLineOfBusiness = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateLineOfBusiness");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/lineOfBusiness', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLineOfBusinessCustomFields operation.
     * @callback module:api/LineOfBusinessApi~updateLineOfBusinessCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a lineOfBusiness custom fields
     * Updates an existing lineOfBusiness custom fields using the specified data.
     * @param {module:model/LineOfBusiness} body LineOfBusiness to be updated.
     * @param {module:api/LineOfBusinessApi~updateLineOfBusinessCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateLineOfBusinessCustomFields = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateLineOfBusinessCustomFields");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/lineOfBusiness/customFields', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
