/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/FinanceSystemConnection', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/FinanceSystemConnection'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.FinanceSystemConnectionApi = factory(root.infoplus.ApiClient, root.infoplus.ApiResponse, root.infoplus.FinanceSystemConnection, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, ApiResponse, FinanceSystemConnection, RecordFile) {
  'use strict';

  /**
   * FinanceSystemConnection service.
   * @module api/FinanceSystemConnectionApi
   * @version beta
   */

  /**
   * Constructs a new FinanceSystemConnectionApi. 
   * @alias module:api/FinanceSystemConnectionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addFinanceSystemConnection operation.
     * @callback module:api/FinanceSystemConnectionApi~addFinanceSystemConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FinanceSystemConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a financeSystemConnection
     * Inserts a new financeSystemConnection using the specified data.
     * @param {module:model/FinanceSystemConnection} body FinanceSystemConnection to be inserted.
     * @param {module:api/FinanceSystemConnectionApi~addFinanceSystemConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FinanceSystemConnection}
     */
    this.addFinanceSystemConnection = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addFinanceSystemConnection");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FinanceSystemConnection;

      return this.apiClient.callApi(
        '/beta/financeSystemConnection', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addFinanceSystemConnectionAudit operation.
     * @callback module:api/FinanceSystemConnectionApi~addFinanceSystemConnectionAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a financeSystemConnection
     * Adds an audit to an existing financeSystemConnection.
     * @param {Number} financeSystemConnectionId Id of the financeSystemConnection to add an audit to
     * @param {String} financeSystemConnectionAudit The audit to add
     * @param {module:api/FinanceSystemConnectionApi~addFinanceSystemConnectionAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addFinanceSystemConnectionAudit = function(financeSystemConnectionId, financeSystemConnectionAudit, callback) {
      var postBody = null;

      // verify the required parameter 'financeSystemConnectionId' is set
      if (financeSystemConnectionId === undefined || financeSystemConnectionId === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionId' when calling addFinanceSystemConnectionAudit");
      }

      // verify the required parameter 'financeSystemConnectionAudit' is set
      if (financeSystemConnectionAudit === undefined || financeSystemConnectionAudit === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionAudit' when calling addFinanceSystemConnectionAudit");
      }


      var pathParams = {
        'financeSystemConnectionId': financeSystemConnectionId,
        'financeSystemConnectionAudit': financeSystemConnectionAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/financeSystemConnection/{financeSystemConnectionId}/audit/{financeSystemConnectionAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addFinanceSystemConnectionFile operation.
     * @callback module:api/FinanceSystemConnectionApi~addFinanceSystemConnectionFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a financeSystemConnection
     * Adds a file to an existing financeSystemConnection.
     * @param {Number} financeSystemConnectionId Id of the financeSystemConnection to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/FinanceSystemConnectionApi~addFinanceSystemConnectionFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addFinanceSystemConnectionFile = function(financeSystemConnectionId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'financeSystemConnectionId' is set
      if (financeSystemConnectionId === undefined || financeSystemConnectionId === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionId' when calling addFinanceSystemConnectionFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addFinanceSystemConnectionFile");
      }


      var pathParams = {
        'financeSystemConnectionId': financeSystemConnectionId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/financeSystemConnection/{financeSystemConnectionId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addFinanceSystemConnectionFileByURL operation.
     * @callback module:api/FinanceSystemConnectionApi~addFinanceSystemConnectionFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a financeSystemConnection by URL.
     * Adds a file to an existing financeSystemConnection by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} financeSystemConnectionId Id of the financeSystemConnection to add an file to
     * @param {module:api/FinanceSystemConnectionApi~addFinanceSystemConnectionFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addFinanceSystemConnectionFileByURL = function(body, financeSystemConnectionId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addFinanceSystemConnectionFileByURL");
      }

      // verify the required parameter 'financeSystemConnectionId' is set
      if (financeSystemConnectionId === undefined || financeSystemConnectionId === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionId' when calling addFinanceSystemConnectionFileByURL");
      }


      var pathParams = {
        'financeSystemConnectionId': financeSystemConnectionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/financeSystemConnection/{financeSystemConnectionId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addFinanceSystemConnectionTag operation.
     * @callback module:api/FinanceSystemConnectionApi~addFinanceSystemConnectionTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a financeSystemConnection.
     * Adds a tag to an existing financeSystemConnection.
     * @param {Number} financeSystemConnectionId Id of the financeSystemConnection to add a tag to
     * @param {String} financeSystemConnectionTag The tag to add
     * @param {module:api/FinanceSystemConnectionApi~addFinanceSystemConnectionTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addFinanceSystemConnectionTag = function(financeSystemConnectionId, financeSystemConnectionTag, callback) {
      var postBody = null;

      // verify the required parameter 'financeSystemConnectionId' is set
      if (financeSystemConnectionId === undefined || financeSystemConnectionId === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionId' when calling addFinanceSystemConnectionTag");
      }

      // verify the required parameter 'financeSystemConnectionTag' is set
      if (financeSystemConnectionTag === undefined || financeSystemConnectionTag === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionTag' when calling addFinanceSystemConnectionTag");
      }


      var pathParams = {
        'financeSystemConnectionId': financeSystemConnectionId,
        'financeSystemConnectionTag': financeSystemConnectionTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/financeSystemConnection/{financeSystemConnectionId}/tag/{financeSystemConnectionTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFinanceSystemConnection operation.
     * @callback module:api/FinanceSystemConnectionApi~deleteFinanceSystemConnectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a financeSystemConnection
     * Deletes the financeSystemConnection identified by the specified id.
     * @param {Number} financeSystemConnectionId Id of the financeSystemConnection to be deleted.
     * @param {module:api/FinanceSystemConnectionApi~deleteFinanceSystemConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFinanceSystemConnection = function(financeSystemConnectionId, callback) {
      var postBody = null;

      // verify the required parameter 'financeSystemConnectionId' is set
      if (financeSystemConnectionId === undefined || financeSystemConnectionId === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionId' when calling deleteFinanceSystemConnection");
      }


      var pathParams = {
        'financeSystemConnectionId': financeSystemConnectionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/financeSystemConnection/{financeSystemConnectionId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFinanceSystemConnectionFile operation.
     * @callback module:api/FinanceSystemConnectionApi~deleteFinanceSystemConnectionFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a financeSystemConnection.
     * Deletes an existing financeSystemConnection file using the specified data.
     * @param {Number} financeSystemConnectionId Id of the financeSystemConnection to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/FinanceSystemConnectionApi~deleteFinanceSystemConnectionFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFinanceSystemConnectionFile = function(financeSystemConnectionId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'financeSystemConnectionId' is set
      if (financeSystemConnectionId === undefined || financeSystemConnectionId === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionId' when calling deleteFinanceSystemConnectionFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteFinanceSystemConnectionFile");
      }


      var pathParams = {
        'financeSystemConnectionId': financeSystemConnectionId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/financeSystemConnection/{financeSystemConnectionId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFinanceSystemConnectionTag operation.
     * @callback module:api/FinanceSystemConnectionApi~deleteFinanceSystemConnectionTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a financeSystemConnection.
     * Deletes an existing financeSystemConnection tag using the specified data.
     * @param {Number} financeSystemConnectionId Id of the financeSystemConnection to remove tag from
     * @param {String} financeSystemConnectionTag The tag to delete
     * @param {module:api/FinanceSystemConnectionApi~deleteFinanceSystemConnectionTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFinanceSystemConnectionTag = function(financeSystemConnectionId, financeSystemConnectionTag, callback) {
      var postBody = null;

      // verify the required parameter 'financeSystemConnectionId' is set
      if (financeSystemConnectionId === undefined || financeSystemConnectionId === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionId' when calling deleteFinanceSystemConnectionTag");
      }

      // verify the required parameter 'financeSystemConnectionTag' is set
      if (financeSystemConnectionTag === undefined || financeSystemConnectionTag === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionTag' when calling deleteFinanceSystemConnectionTag");
      }


      var pathParams = {
        'financeSystemConnectionId': financeSystemConnectionId,
        'financeSystemConnectionTag': financeSystemConnectionTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/financeSystemConnection/{financeSystemConnectionId}/tag/{financeSystemConnectionTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateFinanceSystemConnectionById operation.
     * @callback module:api/FinanceSystemConnectionApi~getDuplicateFinanceSystemConnectionByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FinanceSystemConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a financeSystemConnection by id
     * Returns a duplicated financeSystemConnection identified by the specified id.
     * @param {Number} financeSystemConnectionId Id of the financeSystemConnection to be duplicated.
     * @param {module:api/FinanceSystemConnectionApi~getDuplicateFinanceSystemConnectionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FinanceSystemConnection}
     */
    this.getDuplicateFinanceSystemConnectionById = function(financeSystemConnectionId, callback) {
      var postBody = null;

      // verify the required parameter 'financeSystemConnectionId' is set
      if (financeSystemConnectionId === undefined || financeSystemConnectionId === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionId' when calling getDuplicateFinanceSystemConnectionById");
      }


      var pathParams = {
        'financeSystemConnectionId': financeSystemConnectionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = FinanceSystemConnection;

      return this.apiClient.callApi(
        '/beta/financeSystemConnection/duplicate/{financeSystemConnectionId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFinanceSystemConnectionByFilter operation.
     * @callback module:api/FinanceSystemConnectionApi~getFinanceSystemConnectionByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FinanceSystemConnection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search financeSystemConnections by filter
     * Returns the list of financeSystemConnections that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/FinanceSystemConnectionApi~getFinanceSystemConnectionByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FinanceSystemConnection>}
     */
    this.getFinanceSystemConnectionByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FinanceSystemConnection];

      return this.apiClient.callApi(
        '/beta/financeSystemConnection/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFinanceSystemConnectionById operation.
     * @callback module:api/FinanceSystemConnectionApi~getFinanceSystemConnectionByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FinanceSystemConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a financeSystemConnection by id
     * Returns the financeSystemConnection identified by the specified id.
     * @param {Number} financeSystemConnectionId Id of the financeSystemConnection to be returned.
     * @param {module:api/FinanceSystemConnectionApi~getFinanceSystemConnectionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FinanceSystemConnection}
     */
    this.getFinanceSystemConnectionById = function(financeSystemConnectionId, callback) {
      var postBody = null;

      // verify the required parameter 'financeSystemConnectionId' is set
      if (financeSystemConnectionId === undefined || financeSystemConnectionId === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionId' when calling getFinanceSystemConnectionById");
      }


      var pathParams = {
        'financeSystemConnectionId': financeSystemConnectionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = FinanceSystemConnection;

      return this.apiClient.callApi(
        '/beta/financeSystemConnection/{financeSystemConnectionId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFinanceSystemConnectionFiles operation.
     * @callback module:api/FinanceSystemConnectionApi~getFinanceSystemConnectionFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a financeSystemConnection.
     * Get all existing financeSystemConnection files.
     * @param {Number} financeSystemConnectionId Id of the financeSystemConnection to get files for
     * @param {module:api/FinanceSystemConnectionApi~getFinanceSystemConnectionFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getFinanceSystemConnectionFiles = function(financeSystemConnectionId, callback) {
      var postBody = null;

      // verify the required parameter 'financeSystemConnectionId' is set
      if (financeSystemConnectionId === undefined || financeSystemConnectionId === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionId' when calling getFinanceSystemConnectionFiles");
      }


      var pathParams = {
        'financeSystemConnectionId': financeSystemConnectionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/financeSystemConnection/{financeSystemConnectionId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFinanceSystemConnectionTags operation.
     * @callback module:api/FinanceSystemConnectionApi~getFinanceSystemConnectionTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a financeSystemConnection.
     * Get all existing financeSystemConnection tags.
     * @param {Number} financeSystemConnectionId Id of the financeSystemConnection to get tags for
     * @param {module:api/FinanceSystemConnectionApi~getFinanceSystemConnectionTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getFinanceSystemConnectionTags = function(financeSystemConnectionId, callback) {
      var postBody = null;

      // verify the required parameter 'financeSystemConnectionId' is set
      if (financeSystemConnectionId === undefined || financeSystemConnectionId === null) {
        throw new Error("Missing the required parameter 'financeSystemConnectionId' when calling getFinanceSystemConnectionTags");
      }


      var pathParams = {
        'financeSystemConnectionId': financeSystemConnectionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/financeSystemConnection/{financeSystemConnectionId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFinanceSystemConnection operation.
     * @callback module:api/FinanceSystemConnectionApi~updateFinanceSystemConnectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a financeSystemConnection
     * Updates an existing financeSystemConnection using the specified data.
     * @param {module:model/FinanceSystemConnection} body FinanceSystemConnection to be updated.
     * @param {module:api/FinanceSystemConnectionApi~updateFinanceSystemConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateFinanceSystemConnection = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateFinanceSystemConnection");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/financeSystemConnection', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFinanceSystemConnectionCustomFields operation.
     * @callback module:api/FinanceSystemConnectionApi~updateFinanceSystemConnectionCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a financeSystemConnection custom fields
     * Updates an existing financeSystemConnection custom fields using the specified data.
     * @param {module:model/FinanceSystemConnection} body FinanceSystemConnection to be updated.
     * @param {module:api/FinanceSystemConnectionApi~updateFinanceSystemConnectionCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateFinanceSystemConnectionCustomFields = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateFinanceSystemConnectionCustomFields");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/financeSystemConnection/customFields', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
