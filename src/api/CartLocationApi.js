/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CartLocation', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CartLocation'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.CartLocationApi = factory(root.infoplus.ApiClient, root.infoplus.CartLocation, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, CartLocation, RecordFile) {
  'use strict';

  /**
   * CartLocation service.
   * @module api/CartLocationApi
   * @version beta
   */

  /**
   * Constructs a new CartLocationApi. 
   * @alias module:api/CartLocationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addCartLocationAudit operation.
     * @callback module:api/CartLocationApi~addCartLocationAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a cartLocation
     * Adds an audit to an existing cartLocation.
     * @param {Number} cartLocationId Id of the cartLocation to add an audit to
     * @param {String} cartLocationAudit The audit to add
     * @param {module:api/CartLocationApi~addCartLocationAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addCartLocationAudit = function(cartLocationId, cartLocationAudit, callback) {
      var postBody = null;

      // verify the required parameter 'cartLocationId' is set
      if (cartLocationId === undefined || cartLocationId === null) {
        throw new Error("Missing the required parameter 'cartLocationId' when calling addCartLocationAudit");
      }

      // verify the required parameter 'cartLocationAudit' is set
      if (cartLocationAudit === undefined || cartLocationAudit === null) {
        throw new Error("Missing the required parameter 'cartLocationAudit' when calling addCartLocationAudit");
      }


      var pathParams = {
        'cartLocationId': cartLocationId,
        'cartLocationAudit': cartLocationAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/cartLocation/{cartLocationId}/audit/{cartLocationAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addCartLocationFile operation.
     * @callback module:api/CartLocationApi~addCartLocationFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a cartLocation
     * Adds a file to an existing cartLocation.
     * @param {Number} cartLocationId Id of the cartLocation to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/CartLocationApi~addCartLocationFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addCartLocationFile = function(cartLocationId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'cartLocationId' is set
      if (cartLocationId === undefined || cartLocationId === null) {
        throw new Error("Missing the required parameter 'cartLocationId' when calling addCartLocationFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addCartLocationFile");
      }


      var pathParams = {
        'cartLocationId': cartLocationId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/cartLocation/{cartLocationId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addCartLocationFileByURL operation.
     * @callback module:api/CartLocationApi~addCartLocationFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a cartLocation by URL.
     * Adds a file to an existing cartLocation by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} cartLocationId Id of the cartLocation to add an file to
     * @param {module:api/CartLocationApi~addCartLocationFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addCartLocationFileByURL = function(body, cartLocationId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addCartLocationFileByURL");
      }

      // verify the required parameter 'cartLocationId' is set
      if (cartLocationId === undefined || cartLocationId === null) {
        throw new Error("Missing the required parameter 'cartLocationId' when calling addCartLocationFileByURL");
      }


      var pathParams = {
        'cartLocationId': cartLocationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/cartLocation/{cartLocationId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addCartLocationTag operation.
     * @callback module:api/CartLocationApi~addCartLocationTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a cartLocation.
     * Adds a tag to an existing cartLocation.
     * @param {Number} cartLocationId Id of the cartLocation to add a tag to
     * @param {String} cartLocationTag The tag to add
     * @param {module:api/CartLocationApi~addCartLocationTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addCartLocationTag = function(cartLocationId, cartLocationTag, callback) {
      var postBody = null;

      // verify the required parameter 'cartLocationId' is set
      if (cartLocationId === undefined || cartLocationId === null) {
        throw new Error("Missing the required parameter 'cartLocationId' when calling addCartLocationTag");
      }

      // verify the required parameter 'cartLocationTag' is set
      if (cartLocationTag === undefined || cartLocationTag === null) {
        throw new Error("Missing the required parameter 'cartLocationTag' when calling addCartLocationTag");
      }


      var pathParams = {
        'cartLocationId': cartLocationId,
        'cartLocationTag': cartLocationTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/cartLocation/{cartLocationId}/tag/{cartLocationTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCartLocationFile operation.
     * @callback module:api/CartLocationApi~deleteCartLocationFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a cartLocation.
     * Deletes an existing cartLocation file using the specified data.
     * @param {Number} cartLocationId Id of the cartLocation to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/CartLocationApi~deleteCartLocationFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCartLocationFile = function(cartLocationId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'cartLocationId' is set
      if (cartLocationId === undefined || cartLocationId === null) {
        throw new Error("Missing the required parameter 'cartLocationId' when calling deleteCartLocationFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteCartLocationFile");
      }


      var pathParams = {
        'cartLocationId': cartLocationId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/cartLocation/{cartLocationId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCartLocationTag operation.
     * @callback module:api/CartLocationApi~deleteCartLocationTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a cartLocation.
     * Deletes an existing cartLocation tag using the specified data.
     * @param {Number} cartLocationId Id of the cartLocation to remove tag from
     * @param {String} cartLocationTag The tag to delete
     * @param {module:api/CartLocationApi~deleteCartLocationTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCartLocationTag = function(cartLocationId, cartLocationTag, callback) {
      var postBody = null;

      // verify the required parameter 'cartLocationId' is set
      if (cartLocationId === undefined || cartLocationId === null) {
        throw new Error("Missing the required parameter 'cartLocationId' when calling deleteCartLocationTag");
      }

      // verify the required parameter 'cartLocationTag' is set
      if (cartLocationTag === undefined || cartLocationTag === null) {
        throw new Error("Missing the required parameter 'cartLocationTag' when calling deleteCartLocationTag");
      }


      var pathParams = {
        'cartLocationId': cartLocationId,
        'cartLocationTag': cartLocationTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/cartLocation/{cartLocationId}/tag/{cartLocationTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCartLocationByFilter operation.
     * @callback module:api/CartLocationApi~getCartLocationByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CartLocation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search cartLocations by filter
     * Returns the list of cartLocations that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/CartLocationApi~getCartLocationByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CartLocation>}
     */
    this.getCartLocationByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [CartLocation];

      return this.apiClient.callApi(
        '/beta/cartLocation/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCartLocationById operation.
     * @callback module:api/CartLocationApi~getCartLocationByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartLocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a cartLocation by id
     * Returns the cartLocation identified by the specified id.
     * @param {Number} cartLocationId Id of the cartLocation to be returned.
     * @param {module:api/CartLocationApi~getCartLocationByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartLocation}
     */
    this.getCartLocationById = function(cartLocationId, callback) {
      var postBody = null;

      // verify the required parameter 'cartLocationId' is set
      if (cartLocationId === undefined || cartLocationId === null) {
        throw new Error("Missing the required parameter 'cartLocationId' when calling getCartLocationById");
      }


      var pathParams = {
        'cartLocationId': cartLocationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CartLocation;

      return this.apiClient.callApi(
        '/beta/cartLocation/{cartLocationId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCartLocationFiles operation.
     * @callback module:api/CartLocationApi~getCartLocationFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a cartLocation.
     * Get all existing cartLocation files.
     * @param {Number} cartLocationId Id of the cartLocation to get files for
     * @param {module:api/CartLocationApi~getCartLocationFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getCartLocationFiles = function(cartLocationId, callback) {
      var postBody = null;

      // verify the required parameter 'cartLocationId' is set
      if (cartLocationId === undefined || cartLocationId === null) {
        throw new Error("Missing the required parameter 'cartLocationId' when calling getCartLocationFiles");
      }


      var pathParams = {
        'cartLocationId': cartLocationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/cartLocation/{cartLocationId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCartLocationTags operation.
     * @callback module:api/CartLocationApi~getCartLocationTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a cartLocation.
     * Get all existing cartLocation tags.
     * @param {Number} cartLocationId Id of the cartLocation to get tags for
     * @param {module:api/CartLocationApi~getCartLocationTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getCartLocationTags = function(cartLocationId, callback) {
      var postBody = null;

      // verify the required parameter 'cartLocationId' is set
      if (cartLocationId === undefined || cartLocationId === null) {
        throw new Error("Missing the required parameter 'cartLocationId' when calling getCartLocationTags");
      }


      var pathParams = {
        'cartLocationId': cartLocationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/cartLocation/{cartLocationId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateCartLocationById operation.
     * @callback module:api/CartLocationApi~getDuplicateCartLocationByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartLocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a cartLocation by id
     * Returns a duplicated cartLocation identified by the specified id.
     * @param {Number} cartLocationId Id of the cartLocation to be duplicated.
     * @param {module:api/CartLocationApi~getDuplicateCartLocationByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartLocation}
     */
    this.getDuplicateCartLocationById = function(cartLocationId, callback) {
      var postBody = null;

      // verify the required parameter 'cartLocationId' is set
      if (cartLocationId === undefined || cartLocationId === null) {
        throw new Error("Missing the required parameter 'cartLocationId' when calling getDuplicateCartLocationById");
      }


      var pathParams = {
        'cartLocationId': cartLocationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CartLocation;

      return this.apiClient.callApi(
        '/beta/cartLocation/duplicate/{cartLocationId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
