/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/ManageScheduledPlans', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/ManageScheduledPlans'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.ManageScheduledPlansApi = factory(root.infoplus.ApiClient, root.infoplus.ApiResponse, root.infoplus.ManageScheduledPlans, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, ApiResponse, ManageScheduledPlans, RecordFile) {
  'use strict';

  /**
   * ManageScheduledPlans service.
   * @module api/ManageScheduledPlansApi
   * @version beta
   */

  /**
   * Constructs a new ManageScheduledPlansApi. 
   * @alias module:api/ManageScheduledPlansApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addManageScheduledPlans operation.
     * @callback module:api/ManageScheduledPlansApi~addManageScheduledPlansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManageScheduledPlans} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a manageScheduledPlans
     * Inserts a new manageScheduledPlans using the specified data.
     * @param {module:model/ManageScheduledPlans} body ManageScheduledPlans to be inserted.
     * @param {module:api/ManageScheduledPlansApi~addManageScheduledPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManageScheduledPlans}
     */
    this.addManageScheduledPlans = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addManageScheduledPlans");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ManageScheduledPlans;

      return this.apiClient.callApi(
        '/beta/manageScheduledPlans', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addManageScheduledPlansAudit operation.
     * @callback module:api/ManageScheduledPlansApi~addManageScheduledPlansAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a manageScheduledPlans
     * Adds an audit to an existing manageScheduledPlans.
     * @param {Number} manageScheduledPlansId Id of the manageScheduledPlans to add an audit to
     * @param {String} manageScheduledPlansAudit The audit to add
     * @param {module:api/ManageScheduledPlansApi~addManageScheduledPlansAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addManageScheduledPlansAudit = function(manageScheduledPlansId, manageScheduledPlansAudit, callback) {
      var postBody = null;

      // verify the required parameter 'manageScheduledPlansId' is set
      if (manageScheduledPlansId === undefined || manageScheduledPlansId === null) {
        throw new Error("Missing the required parameter 'manageScheduledPlansId' when calling addManageScheduledPlansAudit");
      }

      // verify the required parameter 'manageScheduledPlansAudit' is set
      if (manageScheduledPlansAudit === undefined || manageScheduledPlansAudit === null) {
        throw new Error("Missing the required parameter 'manageScheduledPlansAudit' when calling addManageScheduledPlansAudit");
      }


      var pathParams = {
        'manageScheduledPlansId': manageScheduledPlansId,
        'manageScheduledPlansAudit': manageScheduledPlansAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/manageScheduledPlans/{manageScheduledPlansId}/audit/{manageScheduledPlansAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addManageScheduledPlansFile operation.
     * @callback module:api/ManageScheduledPlansApi~addManageScheduledPlansFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a manageScheduledPlans
     * Adds a file to an existing manageScheduledPlans.
     * @param {Number} manageScheduledPlansId Id of the manageScheduledPlans to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/ManageScheduledPlansApi~addManageScheduledPlansFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addManageScheduledPlansFile = function(manageScheduledPlansId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'manageScheduledPlansId' is set
      if (manageScheduledPlansId === undefined || manageScheduledPlansId === null) {
        throw new Error("Missing the required parameter 'manageScheduledPlansId' when calling addManageScheduledPlansFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addManageScheduledPlansFile");
      }


      var pathParams = {
        'manageScheduledPlansId': manageScheduledPlansId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/manageScheduledPlans/{manageScheduledPlansId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addManageScheduledPlansFileByURL operation.
     * @callback module:api/ManageScheduledPlansApi~addManageScheduledPlansFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a manageScheduledPlans by URL.
     * Adds a file to an existing manageScheduledPlans by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} manageScheduledPlansId Id of the manageScheduledPlans to add an file to
     * @param {module:api/ManageScheduledPlansApi~addManageScheduledPlansFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addManageScheduledPlansFileByURL = function(body, manageScheduledPlansId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addManageScheduledPlansFileByURL");
      }

      // verify the required parameter 'manageScheduledPlansId' is set
      if (manageScheduledPlansId === undefined || manageScheduledPlansId === null) {
        throw new Error("Missing the required parameter 'manageScheduledPlansId' when calling addManageScheduledPlansFileByURL");
      }


      var pathParams = {
        'manageScheduledPlansId': manageScheduledPlansId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/manageScheduledPlans/{manageScheduledPlansId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addManageScheduledPlansTag operation.
     * @callback module:api/ManageScheduledPlansApi~addManageScheduledPlansTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a manageScheduledPlans.
     * Adds a tag to an existing manageScheduledPlans.
     * @param {Number} manageScheduledPlansId Id of the manageScheduledPlans to add a tag to
     * @param {String} manageScheduledPlansTag The tag to add
     * @param {module:api/ManageScheduledPlansApi~addManageScheduledPlansTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addManageScheduledPlansTag = function(manageScheduledPlansId, manageScheduledPlansTag, callback) {
      var postBody = null;

      // verify the required parameter 'manageScheduledPlansId' is set
      if (manageScheduledPlansId === undefined || manageScheduledPlansId === null) {
        throw new Error("Missing the required parameter 'manageScheduledPlansId' when calling addManageScheduledPlansTag");
      }

      // verify the required parameter 'manageScheduledPlansTag' is set
      if (manageScheduledPlansTag === undefined || manageScheduledPlansTag === null) {
        throw new Error("Missing the required parameter 'manageScheduledPlansTag' when calling addManageScheduledPlansTag");
      }


      var pathParams = {
        'manageScheduledPlansId': manageScheduledPlansId,
        'manageScheduledPlansTag': manageScheduledPlansTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/manageScheduledPlans/{manageScheduledPlansId}/tag/{manageScheduledPlansTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteManageScheduledPlans operation.
     * @callback module:api/ManageScheduledPlansApi~deleteManageScheduledPlansCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a manageScheduledPlans
     * Deletes the manageScheduledPlans identified by the specified id.
     * @param {Number} manageScheduledPlansId Id of the manageScheduledPlans to be deleted.
     * @param {module:api/ManageScheduledPlansApi~deleteManageScheduledPlansCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteManageScheduledPlans = function(manageScheduledPlansId, callback) {
      var postBody = null;

      // verify the required parameter 'manageScheduledPlansId' is set
      if (manageScheduledPlansId === undefined || manageScheduledPlansId === null) {
        throw new Error("Missing the required parameter 'manageScheduledPlansId' when calling deleteManageScheduledPlans");
      }


      var pathParams = {
        'manageScheduledPlansId': manageScheduledPlansId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/manageScheduledPlans/{manageScheduledPlansId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteManageScheduledPlansFile operation.
     * @callback module:api/ManageScheduledPlansApi~deleteManageScheduledPlansFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a manageScheduledPlans.
     * Deletes an existing manageScheduledPlans file using the specified data.
     * @param {Number} manageScheduledPlansId Id of the manageScheduledPlans to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/ManageScheduledPlansApi~deleteManageScheduledPlansFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteManageScheduledPlansFile = function(manageScheduledPlansId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'manageScheduledPlansId' is set
      if (manageScheduledPlansId === undefined || manageScheduledPlansId === null) {
        throw new Error("Missing the required parameter 'manageScheduledPlansId' when calling deleteManageScheduledPlansFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteManageScheduledPlansFile");
      }


      var pathParams = {
        'manageScheduledPlansId': manageScheduledPlansId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/manageScheduledPlans/{manageScheduledPlansId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteManageScheduledPlansTag operation.
     * @callback module:api/ManageScheduledPlansApi~deleteManageScheduledPlansTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a manageScheduledPlans.
     * Deletes an existing manageScheduledPlans tag using the specified data.
     * @param {Number} manageScheduledPlansId Id of the manageScheduledPlans to remove tag from
     * @param {String} manageScheduledPlansTag The tag to delete
     * @param {module:api/ManageScheduledPlansApi~deleteManageScheduledPlansTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteManageScheduledPlansTag = function(manageScheduledPlansId, manageScheduledPlansTag, callback) {
      var postBody = null;

      // verify the required parameter 'manageScheduledPlansId' is set
      if (manageScheduledPlansId === undefined || manageScheduledPlansId === null) {
        throw new Error("Missing the required parameter 'manageScheduledPlansId' when calling deleteManageScheduledPlansTag");
      }

      // verify the required parameter 'manageScheduledPlansTag' is set
      if (manageScheduledPlansTag === undefined || manageScheduledPlansTag === null) {
        throw new Error("Missing the required parameter 'manageScheduledPlansTag' when calling deleteManageScheduledPlansTag");
      }


      var pathParams = {
        'manageScheduledPlansId': manageScheduledPlansId,
        'manageScheduledPlansTag': manageScheduledPlansTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/manageScheduledPlans/{manageScheduledPlansId}/tag/{manageScheduledPlansTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateManageScheduledPlansById operation.
     * @callback module:api/ManageScheduledPlansApi~getDuplicateManageScheduledPlansByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManageScheduledPlans} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a manageScheduledPlans by id
     * Returns a duplicated manageScheduledPlans identified by the specified id.
     * @param {Number} manageScheduledPlansId Id of the manageScheduledPlans to be duplicated.
     * @param {module:api/ManageScheduledPlansApi~getDuplicateManageScheduledPlansByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManageScheduledPlans}
     */
    this.getDuplicateManageScheduledPlansById = function(manageScheduledPlansId, callback) {
      var postBody = null;

      // verify the required parameter 'manageScheduledPlansId' is set
      if (manageScheduledPlansId === undefined || manageScheduledPlansId === null) {
        throw new Error("Missing the required parameter 'manageScheduledPlansId' when calling getDuplicateManageScheduledPlansById");
      }


      var pathParams = {
        'manageScheduledPlansId': manageScheduledPlansId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ManageScheduledPlans;

      return this.apiClient.callApi(
        '/beta/manageScheduledPlans/duplicate/{manageScheduledPlansId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getManageScheduledPlansByFilter operation.
     * @callback module:api/ManageScheduledPlansApi~getManageScheduledPlansByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ManageScheduledPlans>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search manageScheduledPlanses by filter
     * Returns the list of manageScheduledPlanses that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/ManageScheduledPlansApi~getManageScheduledPlansByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ManageScheduledPlans>}
     */
    this.getManageScheduledPlansByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ManageScheduledPlans];

      return this.apiClient.callApi(
        '/beta/manageScheduledPlans/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getManageScheduledPlansById operation.
     * @callback module:api/ManageScheduledPlansApi~getManageScheduledPlansByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManageScheduledPlans} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a manageScheduledPlans by id
     * Returns the manageScheduledPlans identified by the specified id.
     * @param {Number} manageScheduledPlansId Id of the manageScheduledPlans to be returned.
     * @param {module:api/ManageScheduledPlansApi~getManageScheduledPlansByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManageScheduledPlans}
     */
    this.getManageScheduledPlansById = function(manageScheduledPlansId, callback) {
      var postBody = null;

      // verify the required parameter 'manageScheduledPlansId' is set
      if (manageScheduledPlansId === undefined || manageScheduledPlansId === null) {
        throw new Error("Missing the required parameter 'manageScheduledPlansId' when calling getManageScheduledPlansById");
      }


      var pathParams = {
        'manageScheduledPlansId': manageScheduledPlansId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ManageScheduledPlans;

      return this.apiClient.callApi(
        '/beta/manageScheduledPlans/{manageScheduledPlansId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getManageScheduledPlansFiles operation.
     * @callback module:api/ManageScheduledPlansApi~getManageScheduledPlansFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a manageScheduledPlans.
     * Get all existing manageScheduledPlans files.
     * @param {Number} manageScheduledPlansId Id of the manageScheduledPlans to get files for
     * @param {module:api/ManageScheduledPlansApi~getManageScheduledPlansFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getManageScheduledPlansFiles = function(manageScheduledPlansId, callback) {
      var postBody = null;

      // verify the required parameter 'manageScheduledPlansId' is set
      if (manageScheduledPlansId === undefined || manageScheduledPlansId === null) {
        throw new Error("Missing the required parameter 'manageScheduledPlansId' when calling getManageScheduledPlansFiles");
      }


      var pathParams = {
        'manageScheduledPlansId': manageScheduledPlansId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/manageScheduledPlans/{manageScheduledPlansId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getManageScheduledPlansTags operation.
     * @callback module:api/ManageScheduledPlansApi~getManageScheduledPlansTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a manageScheduledPlans.
     * Get all existing manageScheduledPlans tags.
     * @param {Number} manageScheduledPlansId Id of the manageScheduledPlans to get tags for
     * @param {module:api/ManageScheduledPlansApi~getManageScheduledPlansTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getManageScheduledPlansTags = function(manageScheduledPlansId, callback) {
      var postBody = null;

      // verify the required parameter 'manageScheduledPlansId' is set
      if (manageScheduledPlansId === undefined || manageScheduledPlansId === null) {
        throw new Error("Missing the required parameter 'manageScheduledPlansId' when calling getManageScheduledPlansTags");
      }


      var pathParams = {
        'manageScheduledPlansId': manageScheduledPlansId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/manageScheduledPlans/{manageScheduledPlansId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateManageScheduledPlans operation.
     * @callback module:api/ManageScheduledPlansApi~updateManageScheduledPlansCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a manageScheduledPlans
     * Updates an existing manageScheduledPlans using the specified data.
     * @param {module:model/ManageScheduledPlans} body ManageScheduledPlans to be updated.
     * @param {module:api/ManageScheduledPlansApi~updateManageScheduledPlansCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateManageScheduledPlans = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateManageScheduledPlans");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/manageScheduledPlans', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
