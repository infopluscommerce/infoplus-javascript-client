/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/RecordFile', 'model/Vendor'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/RecordFile'), require('../model/Vendor'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.VendorApi = factory(root.infoplus.ApiClient, root.infoplus.ApiResponse, root.infoplus.RecordFile, root.infoplus.Vendor);
  }
}(this, function(ApiClient, ApiResponse, RecordFile, Vendor) {
  'use strict';

  /**
   * Vendor service.
   * @module api/VendorApi
   * @version beta
   */

  /**
   * Constructs a new VendorApi. 
   * @alias module:api/VendorApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addVendor operation.
     * @callback module:api/VendorApi~addVendorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vendor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a vendor
     * Inserts a new vendor using the specified data.
     * @param {module:model/Vendor} body Vendor to be inserted.
     * @param {module:api/VendorApi~addVendorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vendor}
     */
    this.addVendor = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addVendor");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vendor;

      return this.apiClient.callApi(
        '/beta/vendor', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addVendorAudit operation.
     * @callback module:api/VendorApi~addVendorAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a vendor
     * Adds an audit to an existing vendor.
     * @param {Number} vendorId Id of the vendor to add an audit to
     * @param {String} vendorAudit The audit to add
     * @param {module:api/VendorApi~addVendorAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addVendorAudit = function(vendorId, vendorAudit, callback) {
      var postBody = null;

      // verify the required parameter 'vendorId' is set
      if (vendorId === undefined || vendorId === null) {
        throw new Error("Missing the required parameter 'vendorId' when calling addVendorAudit");
      }

      // verify the required parameter 'vendorAudit' is set
      if (vendorAudit === undefined || vendorAudit === null) {
        throw new Error("Missing the required parameter 'vendorAudit' when calling addVendorAudit");
      }


      var pathParams = {
        'vendorId': vendorId,
        'vendorAudit': vendorAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/vendor/{vendorId}/audit/{vendorAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addVendorFile operation.
     * @callback module:api/VendorApi~addVendorFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a vendor
     * Adds a file to an existing vendor.
     * @param {Number} vendorId Id of the vendor to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/VendorApi~addVendorFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addVendorFile = function(vendorId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'vendorId' is set
      if (vendorId === undefined || vendorId === null) {
        throw new Error("Missing the required parameter 'vendorId' when calling addVendorFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addVendorFile");
      }


      var pathParams = {
        'vendorId': vendorId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/vendor/{vendorId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addVendorFileByURL operation.
     * @callback module:api/VendorApi~addVendorFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a vendor by URL.
     * Adds a file to an existing vendor by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} vendorId Id of the vendor to add an file to
     * @param {module:api/VendorApi~addVendorFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addVendorFileByURL = function(body, vendorId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addVendorFileByURL");
      }

      // verify the required parameter 'vendorId' is set
      if (vendorId === undefined || vendorId === null) {
        throw new Error("Missing the required parameter 'vendorId' when calling addVendorFileByURL");
      }


      var pathParams = {
        'vendorId': vendorId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/vendor/{vendorId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addVendorTag operation.
     * @callback module:api/VendorApi~addVendorTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a vendor.
     * Adds a tag to an existing vendor.
     * @param {Number} vendorId Id of the vendor to add a tag to
     * @param {String} vendorTag The tag to add
     * @param {module:api/VendorApi~addVendorTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addVendorTag = function(vendorId, vendorTag, callback) {
      var postBody = null;

      // verify the required parameter 'vendorId' is set
      if (vendorId === undefined || vendorId === null) {
        throw new Error("Missing the required parameter 'vendorId' when calling addVendorTag");
      }

      // verify the required parameter 'vendorTag' is set
      if (vendorTag === undefined || vendorTag === null) {
        throw new Error("Missing the required parameter 'vendorTag' when calling addVendorTag");
      }


      var pathParams = {
        'vendorId': vendorId,
        'vendorTag': vendorTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/vendor/{vendorId}/tag/{vendorTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVendor operation.
     * @callback module:api/VendorApi~deleteVendorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a vendor
     * Deletes the vendor identified by the specified id.
     * @param {Number} vendorId Id of the vendor to be deleted.
     * @param {module:api/VendorApi~deleteVendorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteVendor = function(vendorId, callback) {
      var postBody = null;

      // verify the required parameter 'vendorId' is set
      if (vendorId === undefined || vendorId === null) {
        throw new Error("Missing the required parameter 'vendorId' when calling deleteVendor");
      }


      var pathParams = {
        'vendorId': vendorId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/vendor/{vendorId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVendorFile operation.
     * @callback module:api/VendorApi~deleteVendorFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a vendor.
     * Deletes an existing vendor file using the specified data.
     * @param {Number} vendorId Id of the vendor to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/VendorApi~deleteVendorFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteVendorFile = function(vendorId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'vendorId' is set
      if (vendorId === undefined || vendorId === null) {
        throw new Error("Missing the required parameter 'vendorId' when calling deleteVendorFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteVendorFile");
      }


      var pathParams = {
        'vendorId': vendorId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/vendor/{vendorId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVendorTag operation.
     * @callback module:api/VendorApi~deleteVendorTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a vendor.
     * Deletes an existing vendor tag using the specified data.
     * @param {Number} vendorId Id of the vendor to remove tag from
     * @param {String} vendorTag The tag to delete
     * @param {module:api/VendorApi~deleteVendorTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteVendorTag = function(vendorId, vendorTag, callback) {
      var postBody = null;

      // verify the required parameter 'vendorId' is set
      if (vendorId === undefined || vendorId === null) {
        throw new Error("Missing the required parameter 'vendorId' when calling deleteVendorTag");
      }

      // verify the required parameter 'vendorTag' is set
      if (vendorTag === undefined || vendorTag === null) {
        throw new Error("Missing the required parameter 'vendorTag' when calling deleteVendorTag");
      }


      var pathParams = {
        'vendorId': vendorId,
        'vendorTag': vendorTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/vendor/{vendorId}/tag/{vendorTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateVendorById operation.
     * @callback module:api/VendorApi~getDuplicateVendorByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vendor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a vendor by id
     * Returns a duplicated vendor identified by the specified id.
     * @param {Number} vendorId Id of the vendor to be duplicated.
     * @param {module:api/VendorApi~getDuplicateVendorByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vendor}
     */
    this.getDuplicateVendorById = function(vendorId, callback) {
      var postBody = null;

      // verify the required parameter 'vendorId' is set
      if (vendorId === undefined || vendorId === null) {
        throw new Error("Missing the required parameter 'vendorId' when calling getDuplicateVendorById");
      }


      var pathParams = {
        'vendorId': vendorId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vendor;

      return this.apiClient.callApi(
        '/beta/vendor/duplicate/{vendorId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVendorByFilter operation.
     * @callback module:api/VendorApi~getVendorByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Vendor>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search vendors by filter
     * Returns the list of vendors that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/VendorApi~getVendorByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Vendor>}
     */
    this.getVendorByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Vendor];

      return this.apiClient.callApi(
        '/beta/vendor/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVendorById operation.
     * @callback module:api/VendorApi~getVendorByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vendor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a vendor by id
     * Returns the vendor identified by the specified id.
     * @param {Number} vendorId Id of the vendor to be returned.
     * @param {module:api/VendorApi~getVendorByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vendor}
     */
    this.getVendorById = function(vendorId, callback) {
      var postBody = null;

      // verify the required parameter 'vendorId' is set
      if (vendorId === undefined || vendorId === null) {
        throw new Error("Missing the required parameter 'vendorId' when calling getVendorById");
      }


      var pathParams = {
        'vendorId': vendorId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vendor;

      return this.apiClient.callApi(
        '/beta/vendor/{vendorId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVendorFiles operation.
     * @callback module:api/VendorApi~getVendorFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a vendor.
     * Get all existing vendor files.
     * @param {Number} vendorId Id of the vendor to get files for
     * @param {module:api/VendorApi~getVendorFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getVendorFiles = function(vendorId, callback) {
      var postBody = null;

      // verify the required parameter 'vendorId' is set
      if (vendorId === undefined || vendorId === null) {
        throw new Error("Missing the required parameter 'vendorId' when calling getVendorFiles");
      }


      var pathParams = {
        'vendorId': vendorId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/vendor/{vendorId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVendorTags operation.
     * @callback module:api/VendorApi~getVendorTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a vendor.
     * Get all existing vendor tags.
     * @param {Number} vendorId Id of the vendor to get tags for
     * @param {module:api/VendorApi~getVendorTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getVendorTags = function(vendorId, callback) {
      var postBody = null;

      // verify the required parameter 'vendorId' is set
      if (vendorId === undefined || vendorId === null) {
        throw new Error("Missing the required parameter 'vendorId' when calling getVendorTags");
      }


      var pathParams = {
        'vendorId': vendorId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/vendor/{vendorId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVendor operation.
     * @callback module:api/VendorApi~updateVendorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a vendor
     * Updates an existing vendor using the specified data.
     * @param {module:model/Vendor} body Vendor to be updated.
     * @param {module:api/VendorApi~updateVendorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateVendor = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateVendor");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/vendor', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVendorCustomFields operation.
     * @callback module:api/VendorApi~updateVendorCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a vendor custom fields
     * Updates an existing vendor custom fields using the specified data.
     * @param {module:model/Vendor} body Vendor to be updated.
     * @param {module:api/VendorApi~updateVendorCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateVendorCustomFields = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateVendorCustomFields");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/vendor/customFields', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
