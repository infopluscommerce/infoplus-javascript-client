/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/OverrideReturnAddress', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/OverrideReturnAddress'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.OverrideReturnAddressApi = factory(root.infoplus.ApiClient, root.infoplus.ApiResponse, root.infoplus.OverrideReturnAddress, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, ApiResponse, OverrideReturnAddress, RecordFile) {
  'use strict';

  /**
   * OverrideReturnAddress service.
   * @module api/OverrideReturnAddressApi
   * @version beta
   */

  /**
   * Constructs a new OverrideReturnAddressApi. 
   * @alias module:api/OverrideReturnAddressApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addOverrideReturnAddress operation.
     * @callback module:api/OverrideReturnAddressApi~addOverrideReturnAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OverrideReturnAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an overrideReturnAddress
     * Inserts a new overrideReturnAddress using the specified data.
     * @param {module:model/OverrideReturnAddress} body OverrideReturnAddress to be inserted.
     * @param {module:api/OverrideReturnAddressApi~addOverrideReturnAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OverrideReturnAddress}
     */
    this.addOverrideReturnAddress = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addOverrideReturnAddress");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OverrideReturnAddress;

      return this.apiClient.callApi(
        '/beta/overrideReturnAddress', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addOverrideReturnAddressAudit operation.
     * @callback module:api/OverrideReturnAddressApi~addOverrideReturnAddressAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for an overrideReturnAddress
     * Adds an audit to an existing overrideReturnAddress.
     * @param {Number} overrideReturnAddressId Id of the overrideReturnAddress to add an audit to
     * @param {String} overrideReturnAddressAudit The audit to add
     * @param {module:api/OverrideReturnAddressApi~addOverrideReturnAddressAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addOverrideReturnAddressAudit = function(overrideReturnAddressId, overrideReturnAddressAudit, callback) {
      var postBody = null;

      // verify the required parameter 'overrideReturnAddressId' is set
      if (overrideReturnAddressId === undefined || overrideReturnAddressId === null) {
        throw new Error("Missing the required parameter 'overrideReturnAddressId' when calling addOverrideReturnAddressAudit");
      }

      // verify the required parameter 'overrideReturnAddressAudit' is set
      if (overrideReturnAddressAudit === undefined || overrideReturnAddressAudit === null) {
        throw new Error("Missing the required parameter 'overrideReturnAddressAudit' when calling addOverrideReturnAddressAudit");
      }


      var pathParams = {
        'overrideReturnAddressId': overrideReturnAddressId,
        'overrideReturnAddressAudit': overrideReturnAddressAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/overrideReturnAddress/{overrideReturnAddressId}/audit/{overrideReturnAddressAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addOverrideReturnAddressFile operation.
     * @callback module:api/OverrideReturnAddressApi~addOverrideReturnAddressFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to an overrideReturnAddress
     * Adds a file to an existing overrideReturnAddress.
     * @param {Number} overrideReturnAddressId Id of the overrideReturnAddress to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/OverrideReturnAddressApi~addOverrideReturnAddressFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addOverrideReturnAddressFile = function(overrideReturnAddressId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'overrideReturnAddressId' is set
      if (overrideReturnAddressId === undefined || overrideReturnAddressId === null) {
        throw new Error("Missing the required parameter 'overrideReturnAddressId' when calling addOverrideReturnAddressFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addOverrideReturnAddressFile");
      }


      var pathParams = {
        'overrideReturnAddressId': overrideReturnAddressId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/overrideReturnAddress/{overrideReturnAddressId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addOverrideReturnAddressFileByURL operation.
     * @callback module:api/OverrideReturnAddressApi~addOverrideReturnAddressFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to an overrideReturnAddress by URL.
     * Adds a file to an existing overrideReturnAddress by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} overrideReturnAddressId Id of the overrideReturnAddress to add an file to
     * @param {module:api/OverrideReturnAddressApi~addOverrideReturnAddressFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addOverrideReturnAddressFileByURL = function(body, overrideReturnAddressId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addOverrideReturnAddressFileByURL");
      }

      // verify the required parameter 'overrideReturnAddressId' is set
      if (overrideReturnAddressId === undefined || overrideReturnAddressId === null) {
        throw new Error("Missing the required parameter 'overrideReturnAddressId' when calling addOverrideReturnAddressFileByURL");
      }


      var pathParams = {
        'overrideReturnAddressId': overrideReturnAddressId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/overrideReturnAddress/{overrideReturnAddressId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addOverrideReturnAddressTag operation.
     * @callback module:api/OverrideReturnAddressApi~addOverrideReturnAddressTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for an overrideReturnAddress.
     * Adds a tag to an existing overrideReturnAddress.
     * @param {Number} overrideReturnAddressId Id of the overrideReturnAddress to add a tag to
     * @param {String} overrideReturnAddressTag The tag to add
     * @param {module:api/OverrideReturnAddressApi~addOverrideReturnAddressTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addOverrideReturnAddressTag = function(overrideReturnAddressId, overrideReturnAddressTag, callback) {
      var postBody = null;

      // verify the required parameter 'overrideReturnAddressId' is set
      if (overrideReturnAddressId === undefined || overrideReturnAddressId === null) {
        throw new Error("Missing the required parameter 'overrideReturnAddressId' when calling addOverrideReturnAddressTag");
      }

      // verify the required parameter 'overrideReturnAddressTag' is set
      if (overrideReturnAddressTag === undefined || overrideReturnAddressTag === null) {
        throw new Error("Missing the required parameter 'overrideReturnAddressTag' when calling addOverrideReturnAddressTag");
      }


      var pathParams = {
        'overrideReturnAddressId': overrideReturnAddressId,
        'overrideReturnAddressTag': overrideReturnAddressTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/overrideReturnAddress/{overrideReturnAddressId}/tag/{overrideReturnAddressTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOverrideReturnAddress operation.
     * @callback module:api/OverrideReturnAddressApi~deleteOverrideReturnAddressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an overrideReturnAddress
     * Deletes the overrideReturnAddress identified by the specified id.
     * @param {Number} overrideReturnAddressId Id of the overrideReturnAddress to be deleted.
     * @param {module:api/OverrideReturnAddressApi~deleteOverrideReturnAddressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOverrideReturnAddress = function(overrideReturnAddressId, callback) {
      var postBody = null;

      // verify the required parameter 'overrideReturnAddressId' is set
      if (overrideReturnAddressId === undefined || overrideReturnAddressId === null) {
        throw new Error("Missing the required parameter 'overrideReturnAddressId' when calling deleteOverrideReturnAddress");
      }


      var pathParams = {
        'overrideReturnAddressId': overrideReturnAddressId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/overrideReturnAddress/{overrideReturnAddressId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOverrideReturnAddressFile operation.
     * @callback module:api/OverrideReturnAddressApi~deleteOverrideReturnAddressFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for an overrideReturnAddress.
     * Deletes an existing overrideReturnAddress file using the specified data.
     * @param {Number} overrideReturnAddressId Id of the overrideReturnAddress to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/OverrideReturnAddressApi~deleteOverrideReturnAddressFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOverrideReturnAddressFile = function(overrideReturnAddressId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'overrideReturnAddressId' is set
      if (overrideReturnAddressId === undefined || overrideReturnAddressId === null) {
        throw new Error("Missing the required parameter 'overrideReturnAddressId' when calling deleteOverrideReturnAddressFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteOverrideReturnAddressFile");
      }


      var pathParams = {
        'overrideReturnAddressId': overrideReturnAddressId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/overrideReturnAddress/{overrideReturnAddressId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOverrideReturnAddressTag operation.
     * @callback module:api/OverrideReturnAddressApi~deleteOverrideReturnAddressTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for an overrideReturnAddress.
     * Deletes an existing overrideReturnAddress tag using the specified data.
     * @param {Number} overrideReturnAddressId Id of the overrideReturnAddress to remove tag from
     * @param {String} overrideReturnAddressTag The tag to delete
     * @param {module:api/OverrideReturnAddressApi~deleteOverrideReturnAddressTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOverrideReturnAddressTag = function(overrideReturnAddressId, overrideReturnAddressTag, callback) {
      var postBody = null;

      // verify the required parameter 'overrideReturnAddressId' is set
      if (overrideReturnAddressId === undefined || overrideReturnAddressId === null) {
        throw new Error("Missing the required parameter 'overrideReturnAddressId' when calling deleteOverrideReturnAddressTag");
      }

      // verify the required parameter 'overrideReturnAddressTag' is set
      if (overrideReturnAddressTag === undefined || overrideReturnAddressTag === null) {
        throw new Error("Missing the required parameter 'overrideReturnAddressTag' when calling deleteOverrideReturnAddressTag");
      }


      var pathParams = {
        'overrideReturnAddressId': overrideReturnAddressId,
        'overrideReturnAddressTag': overrideReturnAddressTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/overrideReturnAddress/{overrideReturnAddressId}/tag/{overrideReturnAddressTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateOverrideReturnAddressById operation.
     * @callback module:api/OverrideReturnAddressApi~getDuplicateOverrideReturnAddressByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OverrideReturnAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated an overrideReturnAddress by id
     * Returns a duplicated overrideReturnAddress identified by the specified id.
     * @param {Number} overrideReturnAddressId Id of the overrideReturnAddress to be duplicated.
     * @param {module:api/OverrideReturnAddressApi~getDuplicateOverrideReturnAddressByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OverrideReturnAddress}
     */
    this.getDuplicateOverrideReturnAddressById = function(overrideReturnAddressId, callback) {
      var postBody = null;

      // verify the required parameter 'overrideReturnAddressId' is set
      if (overrideReturnAddressId === undefined || overrideReturnAddressId === null) {
        throw new Error("Missing the required parameter 'overrideReturnAddressId' when calling getDuplicateOverrideReturnAddressById");
      }


      var pathParams = {
        'overrideReturnAddressId': overrideReturnAddressId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = OverrideReturnAddress;

      return this.apiClient.callApi(
        '/beta/overrideReturnAddress/duplicate/{overrideReturnAddressId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOverrideReturnAddressByFilter operation.
     * @callback module:api/OverrideReturnAddressApi~getOverrideReturnAddressByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OverrideReturnAddress>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search overrideReturnAddresses by filter
     * Returns the list of overrideReturnAddresses that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/OverrideReturnAddressApi~getOverrideReturnAddressByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OverrideReturnAddress>}
     */
    this.getOverrideReturnAddressByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [OverrideReturnAddress];

      return this.apiClient.callApi(
        '/beta/overrideReturnAddress/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOverrideReturnAddressById operation.
     * @callback module:api/OverrideReturnAddressApi~getOverrideReturnAddressByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OverrideReturnAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an overrideReturnAddress by id
     * Returns the overrideReturnAddress identified by the specified id.
     * @param {Number} overrideReturnAddressId Id of the overrideReturnAddress to be returned.
     * @param {module:api/OverrideReturnAddressApi~getOverrideReturnAddressByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OverrideReturnAddress}
     */
    this.getOverrideReturnAddressById = function(overrideReturnAddressId, callback) {
      var postBody = null;

      // verify the required parameter 'overrideReturnAddressId' is set
      if (overrideReturnAddressId === undefined || overrideReturnAddressId === null) {
        throw new Error("Missing the required parameter 'overrideReturnAddressId' when calling getOverrideReturnAddressById");
      }


      var pathParams = {
        'overrideReturnAddressId': overrideReturnAddressId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = OverrideReturnAddress;

      return this.apiClient.callApi(
        '/beta/overrideReturnAddress/{overrideReturnAddressId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOverrideReturnAddressFiles operation.
     * @callback module:api/OverrideReturnAddressApi~getOverrideReturnAddressFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for an overrideReturnAddress.
     * Get all existing overrideReturnAddress files.
     * @param {Number} overrideReturnAddressId Id of the overrideReturnAddress to get files for
     * @param {module:api/OverrideReturnAddressApi~getOverrideReturnAddressFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getOverrideReturnAddressFiles = function(overrideReturnAddressId, callback) {
      var postBody = null;

      // verify the required parameter 'overrideReturnAddressId' is set
      if (overrideReturnAddressId === undefined || overrideReturnAddressId === null) {
        throw new Error("Missing the required parameter 'overrideReturnAddressId' when calling getOverrideReturnAddressFiles");
      }


      var pathParams = {
        'overrideReturnAddressId': overrideReturnAddressId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/overrideReturnAddress/{overrideReturnAddressId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOverrideReturnAddressTags operation.
     * @callback module:api/OverrideReturnAddressApi~getOverrideReturnAddressTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for an overrideReturnAddress.
     * Get all existing overrideReturnAddress tags.
     * @param {Number} overrideReturnAddressId Id of the overrideReturnAddress to get tags for
     * @param {module:api/OverrideReturnAddressApi~getOverrideReturnAddressTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getOverrideReturnAddressTags = function(overrideReturnAddressId, callback) {
      var postBody = null;

      // verify the required parameter 'overrideReturnAddressId' is set
      if (overrideReturnAddressId === undefined || overrideReturnAddressId === null) {
        throw new Error("Missing the required parameter 'overrideReturnAddressId' when calling getOverrideReturnAddressTags");
      }


      var pathParams = {
        'overrideReturnAddressId': overrideReturnAddressId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/overrideReturnAddress/{overrideReturnAddressId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOverrideReturnAddress operation.
     * @callback module:api/OverrideReturnAddressApi~updateOverrideReturnAddressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an overrideReturnAddress
     * Updates an existing overrideReturnAddress using the specified data.
     * @param {module:model/OverrideReturnAddress} body OverrideReturnAddress to be updated.
     * @param {module:api/OverrideReturnAddressApi~updateOverrideReturnAddressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateOverrideReturnAddress = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateOverrideReturnAddress");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/overrideReturnAddress', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOverrideReturnAddressCustomFields operation.
     * @callback module:api/OverrideReturnAddressApi~updateOverrideReturnAddressCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an overrideReturnAddress custom fields
     * Updates an existing overrideReturnAddress custom fields using the specified data.
     * @param {module:model/OverrideReturnAddress} body OverrideReturnAddress to be updated.
     * @param {module:api/OverrideReturnAddressApi~updateOverrideReturnAddressCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateOverrideReturnAddressCustomFields = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateOverrideReturnAddressCustomFields");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/overrideReturnAddress/customFields', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
