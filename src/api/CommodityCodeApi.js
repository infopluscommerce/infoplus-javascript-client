/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CommodityCode', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CommodityCode'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.CommodityCodeApi = factory(root.infoplus.ApiClient, root.infoplus.CommodityCode, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, CommodityCode, RecordFile) {
  'use strict';

  /**
   * CommodityCode service.
   * @module api/CommodityCodeApi
   * @version beta
   */

  /**
   * Constructs a new CommodityCodeApi. 
   * @alias module:api/CommodityCodeApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addCommodityCodeAudit operation.
     * @callback module:api/CommodityCodeApi~addCommodityCodeAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a commodityCode
     * Adds an audit to an existing commodityCode.
     * @param {Number} commodityCodeId Id of the commodityCode to add an audit to
     * @param {String} commodityCodeAudit The audit to add
     * @param {module:api/CommodityCodeApi~addCommodityCodeAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addCommodityCodeAudit = function(commodityCodeId, commodityCodeAudit, callback) {
      var postBody = null;

      // verify the required parameter 'commodityCodeId' is set
      if (commodityCodeId === undefined || commodityCodeId === null) {
        throw new Error("Missing the required parameter 'commodityCodeId' when calling addCommodityCodeAudit");
      }

      // verify the required parameter 'commodityCodeAudit' is set
      if (commodityCodeAudit === undefined || commodityCodeAudit === null) {
        throw new Error("Missing the required parameter 'commodityCodeAudit' when calling addCommodityCodeAudit");
      }


      var pathParams = {
        'commodityCodeId': commodityCodeId,
        'commodityCodeAudit': commodityCodeAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/commodityCode/{commodityCodeId}/audit/{commodityCodeAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addCommodityCodeFile operation.
     * @callback module:api/CommodityCodeApi~addCommodityCodeFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a commodityCode
     * Adds a file to an existing commodityCode.
     * @param {Number} commodityCodeId Id of the commodityCode to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/CommodityCodeApi~addCommodityCodeFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addCommodityCodeFile = function(commodityCodeId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'commodityCodeId' is set
      if (commodityCodeId === undefined || commodityCodeId === null) {
        throw new Error("Missing the required parameter 'commodityCodeId' when calling addCommodityCodeFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addCommodityCodeFile");
      }


      var pathParams = {
        'commodityCodeId': commodityCodeId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/commodityCode/{commodityCodeId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addCommodityCodeFileByURL operation.
     * @callback module:api/CommodityCodeApi~addCommodityCodeFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a commodityCode by URL.
     * Adds a file to an existing commodityCode by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} commodityCodeId Id of the commodityCode to add an file to
     * @param {module:api/CommodityCodeApi~addCommodityCodeFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addCommodityCodeFileByURL = function(body, commodityCodeId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addCommodityCodeFileByURL");
      }

      // verify the required parameter 'commodityCodeId' is set
      if (commodityCodeId === undefined || commodityCodeId === null) {
        throw new Error("Missing the required parameter 'commodityCodeId' when calling addCommodityCodeFileByURL");
      }


      var pathParams = {
        'commodityCodeId': commodityCodeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/commodityCode/{commodityCodeId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addCommodityCodeTag operation.
     * @callback module:api/CommodityCodeApi~addCommodityCodeTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a commodityCode.
     * Adds a tag to an existing commodityCode.
     * @param {Number} commodityCodeId Id of the commodityCode to add a tag to
     * @param {String} commodityCodeTag The tag to add
     * @param {module:api/CommodityCodeApi~addCommodityCodeTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addCommodityCodeTag = function(commodityCodeId, commodityCodeTag, callback) {
      var postBody = null;

      // verify the required parameter 'commodityCodeId' is set
      if (commodityCodeId === undefined || commodityCodeId === null) {
        throw new Error("Missing the required parameter 'commodityCodeId' when calling addCommodityCodeTag");
      }

      // verify the required parameter 'commodityCodeTag' is set
      if (commodityCodeTag === undefined || commodityCodeTag === null) {
        throw new Error("Missing the required parameter 'commodityCodeTag' when calling addCommodityCodeTag");
      }


      var pathParams = {
        'commodityCodeId': commodityCodeId,
        'commodityCodeTag': commodityCodeTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/commodityCode/{commodityCodeId}/tag/{commodityCodeTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCommodityCodeFile operation.
     * @callback module:api/CommodityCodeApi~deleteCommodityCodeFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a commodityCode.
     * Deletes an existing commodityCode file using the specified data.
     * @param {Number} commodityCodeId Id of the commodityCode to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/CommodityCodeApi~deleteCommodityCodeFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCommodityCodeFile = function(commodityCodeId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'commodityCodeId' is set
      if (commodityCodeId === undefined || commodityCodeId === null) {
        throw new Error("Missing the required parameter 'commodityCodeId' when calling deleteCommodityCodeFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteCommodityCodeFile");
      }


      var pathParams = {
        'commodityCodeId': commodityCodeId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/commodityCode/{commodityCodeId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCommodityCodeTag operation.
     * @callback module:api/CommodityCodeApi~deleteCommodityCodeTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a commodityCode.
     * Deletes an existing commodityCode tag using the specified data.
     * @param {Number} commodityCodeId Id of the commodityCode to remove tag from
     * @param {String} commodityCodeTag The tag to delete
     * @param {module:api/CommodityCodeApi~deleteCommodityCodeTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCommodityCodeTag = function(commodityCodeId, commodityCodeTag, callback) {
      var postBody = null;

      // verify the required parameter 'commodityCodeId' is set
      if (commodityCodeId === undefined || commodityCodeId === null) {
        throw new Error("Missing the required parameter 'commodityCodeId' when calling deleteCommodityCodeTag");
      }

      // verify the required parameter 'commodityCodeTag' is set
      if (commodityCodeTag === undefined || commodityCodeTag === null) {
        throw new Error("Missing the required parameter 'commodityCodeTag' when calling deleteCommodityCodeTag");
      }


      var pathParams = {
        'commodityCodeId': commodityCodeId,
        'commodityCodeTag': commodityCodeTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/commodityCode/{commodityCodeId}/tag/{commodityCodeTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommodityCodeByFilter operation.
     * @callback module:api/CommodityCodeApi~getCommodityCodeByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommodityCode>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search commodityCodes by filter
     * Returns the list of commodityCodes that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/CommodityCodeApi~getCommodityCodeByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommodityCode>}
     */
    this.getCommodityCodeByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [CommodityCode];

      return this.apiClient.callApi(
        '/beta/commodityCode/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommodityCodeById operation.
     * @callback module:api/CommodityCodeApi~getCommodityCodeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommodityCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a commodityCode by id
     * Returns the commodityCode identified by the specified id.
     * @param {Number} commodityCodeId Id of the commodityCode to be returned.
     * @param {module:api/CommodityCodeApi~getCommodityCodeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommodityCode}
     */
    this.getCommodityCodeById = function(commodityCodeId, callback) {
      var postBody = null;

      // verify the required parameter 'commodityCodeId' is set
      if (commodityCodeId === undefined || commodityCodeId === null) {
        throw new Error("Missing the required parameter 'commodityCodeId' when calling getCommodityCodeById");
      }


      var pathParams = {
        'commodityCodeId': commodityCodeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CommodityCode;

      return this.apiClient.callApi(
        '/beta/commodityCode/{commodityCodeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommodityCodeFiles operation.
     * @callback module:api/CommodityCodeApi~getCommodityCodeFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a commodityCode.
     * Get all existing commodityCode files.
     * @param {Number} commodityCodeId Id of the commodityCode to get files for
     * @param {module:api/CommodityCodeApi~getCommodityCodeFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getCommodityCodeFiles = function(commodityCodeId, callback) {
      var postBody = null;

      // verify the required parameter 'commodityCodeId' is set
      if (commodityCodeId === undefined || commodityCodeId === null) {
        throw new Error("Missing the required parameter 'commodityCodeId' when calling getCommodityCodeFiles");
      }


      var pathParams = {
        'commodityCodeId': commodityCodeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/commodityCode/{commodityCodeId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommodityCodeTags operation.
     * @callback module:api/CommodityCodeApi~getCommodityCodeTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a commodityCode.
     * Get all existing commodityCode tags.
     * @param {Number} commodityCodeId Id of the commodityCode to get tags for
     * @param {module:api/CommodityCodeApi~getCommodityCodeTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getCommodityCodeTags = function(commodityCodeId, callback) {
      var postBody = null;

      // verify the required parameter 'commodityCodeId' is set
      if (commodityCodeId === undefined || commodityCodeId === null) {
        throw new Error("Missing the required parameter 'commodityCodeId' when calling getCommodityCodeTags");
      }


      var pathParams = {
        'commodityCodeId': commodityCodeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/commodityCode/{commodityCodeId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateCommodityCodeById operation.
     * @callback module:api/CommodityCodeApi~getDuplicateCommodityCodeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommodityCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a commodityCode by id
     * Returns a duplicated commodityCode identified by the specified id.
     * @param {Number} commodityCodeId Id of the commodityCode to be duplicated.
     * @param {module:api/CommodityCodeApi~getDuplicateCommodityCodeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommodityCode}
     */
    this.getDuplicateCommodityCodeById = function(commodityCodeId, callback) {
      var postBody = null;

      // verify the required parameter 'commodityCodeId' is set
      if (commodityCodeId === undefined || commodityCodeId === null) {
        throw new Error("Missing the required parameter 'commodityCodeId' when calling getDuplicateCommodityCodeById");
      }


      var pathParams = {
        'commodityCodeId': commodityCodeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CommodityCode;

      return this.apiClient.callApi(
        '/beta/commodityCode/duplicate/{commodityCodeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
