/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/RecordFile', 'model/ThirdPartyParcelAccount'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/RecordFile'), require('../model/ThirdPartyParcelAccount'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.ThirdPartyParcelAccountApi = factory(root.infoplus.ApiClient, root.infoplus.ApiResponse, root.infoplus.RecordFile, root.infoplus.ThirdPartyParcelAccount);
  }
}(this, function(ApiClient, ApiResponse, RecordFile, ThirdPartyParcelAccount) {
  'use strict';

  /**
   * ThirdPartyParcelAccount service.
   * @module api/ThirdPartyParcelAccountApi
   * @version beta
   */

  /**
   * Constructs a new ThirdPartyParcelAccountApi. 
   * @alias module:api/ThirdPartyParcelAccountApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addThirdPartyParcelAccount operation.
     * @callback module:api/ThirdPartyParcelAccountApi~addThirdPartyParcelAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThirdPartyParcelAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a thirdPartyParcelAccount
     * Inserts a new thirdPartyParcelAccount using the specified data.
     * @param {module:model/ThirdPartyParcelAccount} body ThirdPartyParcelAccount to be inserted.
     * @param {module:api/ThirdPartyParcelAccountApi~addThirdPartyParcelAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThirdPartyParcelAccount}
     */
    this.addThirdPartyParcelAccount = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addThirdPartyParcelAccount");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ThirdPartyParcelAccount;

      return this.apiClient.callApi(
        '/beta/thirdPartyParcelAccount', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addThirdPartyParcelAccountAudit operation.
     * @callback module:api/ThirdPartyParcelAccountApi~addThirdPartyParcelAccountAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a thirdPartyParcelAccount
     * Adds an audit to an existing thirdPartyParcelAccount.
     * @param {Number} thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to add an audit to
     * @param {String} thirdPartyParcelAccountAudit The audit to add
     * @param {module:api/ThirdPartyParcelAccountApi~addThirdPartyParcelAccountAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addThirdPartyParcelAccountAudit = function(thirdPartyParcelAccountId, thirdPartyParcelAccountAudit, callback) {
      var postBody = null;

      // verify the required parameter 'thirdPartyParcelAccountId' is set
      if (thirdPartyParcelAccountId === undefined || thirdPartyParcelAccountId === null) {
        throw new Error("Missing the required parameter 'thirdPartyParcelAccountId' when calling addThirdPartyParcelAccountAudit");
      }

      // verify the required parameter 'thirdPartyParcelAccountAudit' is set
      if (thirdPartyParcelAccountAudit === undefined || thirdPartyParcelAccountAudit === null) {
        throw new Error("Missing the required parameter 'thirdPartyParcelAccountAudit' when calling addThirdPartyParcelAccountAudit");
      }


      var pathParams = {
        'thirdPartyParcelAccountId': thirdPartyParcelAccountId,
        'thirdPartyParcelAccountAudit': thirdPartyParcelAccountAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/audit/{thirdPartyParcelAccountAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addThirdPartyParcelAccountFile operation.
     * @callback module:api/ThirdPartyParcelAccountApi~addThirdPartyParcelAccountFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a thirdPartyParcelAccount
     * Adds a file to an existing thirdPartyParcelAccount.
     * @param {Number} thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/ThirdPartyParcelAccountApi~addThirdPartyParcelAccountFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addThirdPartyParcelAccountFile = function(thirdPartyParcelAccountId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'thirdPartyParcelAccountId' is set
      if (thirdPartyParcelAccountId === undefined || thirdPartyParcelAccountId === null) {
        throw new Error("Missing the required parameter 'thirdPartyParcelAccountId' when calling addThirdPartyParcelAccountFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addThirdPartyParcelAccountFile");
      }


      var pathParams = {
        'thirdPartyParcelAccountId': thirdPartyParcelAccountId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addThirdPartyParcelAccountFileByURL operation.
     * @callback module:api/ThirdPartyParcelAccountApi~addThirdPartyParcelAccountFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a thirdPartyParcelAccount by URL.
     * Adds a file to an existing thirdPartyParcelAccount by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to add an file to
     * @param {module:api/ThirdPartyParcelAccountApi~addThirdPartyParcelAccountFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addThirdPartyParcelAccountFileByURL = function(body, thirdPartyParcelAccountId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addThirdPartyParcelAccountFileByURL");
      }

      // verify the required parameter 'thirdPartyParcelAccountId' is set
      if (thirdPartyParcelAccountId === undefined || thirdPartyParcelAccountId === null) {
        throw new Error("Missing the required parameter 'thirdPartyParcelAccountId' when calling addThirdPartyParcelAccountFileByURL");
      }


      var pathParams = {
        'thirdPartyParcelAccountId': thirdPartyParcelAccountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addThirdPartyParcelAccountTag operation.
     * @callback module:api/ThirdPartyParcelAccountApi~addThirdPartyParcelAccountTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a thirdPartyParcelAccount.
     * Adds a tag to an existing thirdPartyParcelAccount.
     * @param {Number} thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to add a tag to
     * @param {String} thirdPartyParcelAccountTag The tag to add
     * @param {module:api/ThirdPartyParcelAccountApi~addThirdPartyParcelAccountTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addThirdPartyParcelAccountTag = function(thirdPartyParcelAccountId, thirdPartyParcelAccountTag, callback) {
      var postBody = null;

      // verify the required parameter 'thirdPartyParcelAccountId' is set
      if (thirdPartyParcelAccountId === undefined || thirdPartyParcelAccountId === null) {
        throw new Error("Missing the required parameter 'thirdPartyParcelAccountId' when calling addThirdPartyParcelAccountTag");
      }

      // verify the required parameter 'thirdPartyParcelAccountTag' is set
      if (thirdPartyParcelAccountTag === undefined || thirdPartyParcelAccountTag === null) {
        throw new Error("Missing the required parameter 'thirdPartyParcelAccountTag' when calling addThirdPartyParcelAccountTag");
      }


      var pathParams = {
        'thirdPartyParcelAccountId': thirdPartyParcelAccountId,
        'thirdPartyParcelAccountTag': thirdPartyParcelAccountTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/tag/{thirdPartyParcelAccountTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteThirdPartyParcelAccount operation.
     * @callback module:api/ThirdPartyParcelAccountApi~deleteThirdPartyParcelAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a thirdPartyParcelAccount
     * Deletes the thirdPartyParcelAccount identified by the specified id.
     * @param {Number} thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to be deleted.
     * @param {module:api/ThirdPartyParcelAccountApi~deleteThirdPartyParcelAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteThirdPartyParcelAccount = function(thirdPartyParcelAccountId, callback) {
      var postBody = null;

      // verify the required parameter 'thirdPartyParcelAccountId' is set
      if (thirdPartyParcelAccountId === undefined || thirdPartyParcelAccountId === null) {
        throw new Error("Missing the required parameter 'thirdPartyParcelAccountId' when calling deleteThirdPartyParcelAccount");
      }


      var pathParams = {
        'thirdPartyParcelAccountId': thirdPartyParcelAccountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteThirdPartyParcelAccountFile operation.
     * @callback module:api/ThirdPartyParcelAccountApi~deleteThirdPartyParcelAccountFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a thirdPartyParcelAccount.
     * Deletes an existing thirdPartyParcelAccount file using the specified data.
     * @param {Number} thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/ThirdPartyParcelAccountApi~deleteThirdPartyParcelAccountFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteThirdPartyParcelAccountFile = function(thirdPartyParcelAccountId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'thirdPartyParcelAccountId' is set
      if (thirdPartyParcelAccountId === undefined || thirdPartyParcelAccountId === null) {
        throw new Error("Missing the required parameter 'thirdPartyParcelAccountId' when calling deleteThirdPartyParcelAccountFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteThirdPartyParcelAccountFile");
      }


      var pathParams = {
        'thirdPartyParcelAccountId': thirdPartyParcelAccountId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteThirdPartyParcelAccountTag operation.
     * @callback module:api/ThirdPartyParcelAccountApi~deleteThirdPartyParcelAccountTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a thirdPartyParcelAccount.
     * Deletes an existing thirdPartyParcelAccount tag using the specified data.
     * @param {Number} thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to remove tag from
     * @param {String} thirdPartyParcelAccountTag The tag to delete
     * @param {module:api/ThirdPartyParcelAccountApi~deleteThirdPartyParcelAccountTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteThirdPartyParcelAccountTag = function(thirdPartyParcelAccountId, thirdPartyParcelAccountTag, callback) {
      var postBody = null;

      // verify the required parameter 'thirdPartyParcelAccountId' is set
      if (thirdPartyParcelAccountId === undefined || thirdPartyParcelAccountId === null) {
        throw new Error("Missing the required parameter 'thirdPartyParcelAccountId' when calling deleteThirdPartyParcelAccountTag");
      }

      // verify the required parameter 'thirdPartyParcelAccountTag' is set
      if (thirdPartyParcelAccountTag === undefined || thirdPartyParcelAccountTag === null) {
        throw new Error("Missing the required parameter 'thirdPartyParcelAccountTag' when calling deleteThirdPartyParcelAccountTag");
      }


      var pathParams = {
        'thirdPartyParcelAccountId': thirdPartyParcelAccountId,
        'thirdPartyParcelAccountTag': thirdPartyParcelAccountTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/tag/{thirdPartyParcelAccountTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateThirdPartyParcelAccountById operation.
     * @callback module:api/ThirdPartyParcelAccountApi~getDuplicateThirdPartyParcelAccountByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThirdPartyParcelAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a thirdPartyParcelAccount by id
     * Returns a duplicated thirdPartyParcelAccount identified by the specified id.
     * @param {Number} thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to be duplicated.
     * @param {module:api/ThirdPartyParcelAccountApi~getDuplicateThirdPartyParcelAccountByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThirdPartyParcelAccount}
     */
    this.getDuplicateThirdPartyParcelAccountById = function(thirdPartyParcelAccountId, callback) {
      var postBody = null;

      // verify the required parameter 'thirdPartyParcelAccountId' is set
      if (thirdPartyParcelAccountId === undefined || thirdPartyParcelAccountId === null) {
        throw new Error("Missing the required parameter 'thirdPartyParcelAccountId' when calling getDuplicateThirdPartyParcelAccountById");
      }


      var pathParams = {
        'thirdPartyParcelAccountId': thirdPartyParcelAccountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ThirdPartyParcelAccount;

      return this.apiClient.callApi(
        '/beta/thirdPartyParcelAccount/duplicate/{thirdPartyParcelAccountId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getThirdPartyParcelAccountByFilter operation.
     * @callback module:api/ThirdPartyParcelAccountApi~getThirdPartyParcelAccountByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ThirdPartyParcelAccount>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search thirdPartyParcelAccounts by filter
     * Returns the list of thirdPartyParcelAccounts that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/ThirdPartyParcelAccountApi~getThirdPartyParcelAccountByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ThirdPartyParcelAccount>}
     */
    this.getThirdPartyParcelAccountByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ThirdPartyParcelAccount];

      return this.apiClient.callApi(
        '/beta/thirdPartyParcelAccount/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getThirdPartyParcelAccountById operation.
     * @callback module:api/ThirdPartyParcelAccountApi~getThirdPartyParcelAccountByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThirdPartyParcelAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a thirdPartyParcelAccount by id
     * Returns the thirdPartyParcelAccount identified by the specified id.
     * @param {Number} thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to be returned.
     * @param {module:api/ThirdPartyParcelAccountApi~getThirdPartyParcelAccountByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThirdPartyParcelAccount}
     */
    this.getThirdPartyParcelAccountById = function(thirdPartyParcelAccountId, callback) {
      var postBody = null;

      // verify the required parameter 'thirdPartyParcelAccountId' is set
      if (thirdPartyParcelAccountId === undefined || thirdPartyParcelAccountId === null) {
        throw new Error("Missing the required parameter 'thirdPartyParcelAccountId' when calling getThirdPartyParcelAccountById");
      }


      var pathParams = {
        'thirdPartyParcelAccountId': thirdPartyParcelAccountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ThirdPartyParcelAccount;

      return this.apiClient.callApi(
        '/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getThirdPartyParcelAccountFiles operation.
     * @callback module:api/ThirdPartyParcelAccountApi~getThirdPartyParcelAccountFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a thirdPartyParcelAccount.
     * Get all existing thirdPartyParcelAccount files.
     * @param {Number} thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to get files for
     * @param {module:api/ThirdPartyParcelAccountApi~getThirdPartyParcelAccountFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getThirdPartyParcelAccountFiles = function(thirdPartyParcelAccountId, callback) {
      var postBody = null;

      // verify the required parameter 'thirdPartyParcelAccountId' is set
      if (thirdPartyParcelAccountId === undefined || thirdPartyParcelAccountId === null) {
        throw new Error("Missing the required parameter 'thirdPartyParcelAccountId' when calling getThirdPartyParcelAccountFiles");
      }


      var pathParams = {
        'thirdPartyParcelAccountId': thirdPartyParcelAccountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getThirdPartyParcelAccountTags operation.
     * @callback module:api/ThirdPartyParcelAccountApi~getThirdPartyParcelAccountTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a thirdPartyParcelAccount.
     * Get all existing thirdPartyParcelAccount tags.
     * @param {Number} thirdPartyParcelAccountId Id of the thirdPartyParcelAccount to get tags for
     * @param {module:api/ThirdPartyParcelAccountApi~getThirdPartyParcelAccountTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getThirdPartyParcelAccountTags = function(thirdPartyParcelAccountId, callback) {
      var postBody = null;

      // verify the required parameter 'thirdPartyParcelAccountId' is set
      if (thirdPartyParcelAccountId === undefined || thirdPartyParcelAccountId === null) {
        throw new Error("Missing the required parameter 'thirdPartyParcelAccountId' when calling getThirdPartyParcelAccountTags");
      }


      var pathParams = {
        'thirdPartyParcelAccountId': thirdPartyParcelAccountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateThirdPartyParcelAccount operation.
     * @callback module:api/ThirdPartyParcelAccountApi~updateThirdPartyParcelAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a thirdPartyParcelAccount
     * Updates an existing thirdPartyParcelAccount using the specified data.
     * @param {module:model/ThirdPartyParcelAccount} body ThirdPartyParcelAccount to be updated.
     * @param {module:api/ThirdPartyParcelAccountApi~updateThirdPartyParcelAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateThirdPartyParcelAccount = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateThirdPartyParcelAccount");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/thirdPartyParcelAccount', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateThirdPartyParcelAccountCustomFields operation.
     * @callback module:api/ThirdPartyParcelAccountApi~updateThirdPartyParcelAccountCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a thirdPartyParcelAccount custom fields
     * Updates an existing thirdPartyParcelAccount custom fields using the specified data.
     * @param {module:model/ThirdPartyParcelAccount} body ThirdPartyParcelAccount to be updated.
     * @param {module:api/ThirdPartyParcelAccountApi~updateThirdPartyParcelAccountCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateThirdPartyParcelAccountCustomFields = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateThirdPartyParcelAccountCustomFields");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/thirdPartyParcelAccount/customFields', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
