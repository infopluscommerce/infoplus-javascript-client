/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/JobRecipe', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/JobRecipe'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.JobRecipeApi = factory(root.infoplus.ApiClient, root.infoplus.ApiResponse, root.infoplus.JobRecipe, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, ApiResponse, JobRecipe, RecordFile) {
  'use strict';

  /**
   * JobRecipe service.
   * @module api/JobRecipeApi
   * @version beta
   */

  /**
   * Constructs a new JobRecipeApi. 
   * @alias module:api/JobRecipeApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addJobRecipe operation.
     * @callback module:api/JobRecipeApi~addJobRecipeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobRecipe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a jobRecipe
     * Inserts a new jobRecipe using the specified data.
     * @param {module:model/JobRecipe} body JobRecipe to be inserted.
     * @param {module:api/JobRecipeApi~addJobRecipeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobRecipe}
     */
    this.addJobRecipe = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addJobRecipe");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = JobRecipe;

      return this.apiClient.callApi(
        '/beta/jobRecipe', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addJobRecipeAudit operation.
     * @callback module:api/JobRecipeApi~addJobRecipeAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a jobRecipe
     * Adds an audit to an existing jobRecipe.
     * @param {Number} jobRecipeId Id of the jobRecipe to add an audit to
     * @param {String} jobRecipeAudit The audit to add
     * @param {module:api/JobRecipeApi~addJobRecipeAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addJobRecipeAudit = function(jobRecipeId, jobRecipeAudit, callback) {
      var postBody = null;

      // verify the required parameter 'jobRecipeId' is set
      if (jobRecipeId === undefined || jobRecipeId === null) {
        throw new Error("Missing the required parameter 'jobRecipeId' when calling addJobRecipeAudit");
      }

      // verify the required parameter 'jobRecipeAudit' is set
      if (jobRecipeAudit === undefined || jobRecipeAudit === null) {
        throw new Error("Missing the required parameter 'jobRecipeAudit' when calling addJobRecipeAudit");
      }


      var pathParams = {
        'jobRecipeId': jobRecipeId,
        'jobRecipeAudit': jobRecipeAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/jobRecipe/{jobRecipeId}/audit/{jobRecipeAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addJobRecipeFile operation.
     * @callback module:api/JobRecipeApi~addJobRecipeFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a jobRecipe
     * Adds a file to an existing jobRecipe.
     * @param {Number} jobRecipeId Id of the jobRecipe to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/JobRecipeApi~addJobRecipeFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addJobRecipeFile = function(jobRecipeId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'jobRecipeId' is set
      if (jobRecipeId === undefined || jobRecipeId === null) {
        throw new Error("Missing the required parameter 'jobRecipeId' when calling addJobRecipeFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addJobRecipeFile");
      }


      var pathParams = {
        'jobRecipeId': jobRecipeId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/jobRecipe/{jobRecipeId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addJobRecipeFileByURL operation.
     * @callback module:api/JobRecipeApi~addJobRecipeFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a jobRecipe by URL.
     * Adds a file to an existing jobRecipe by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} jobRecipeId Id of the jobRecipe to add an file to
     * @param {module:api/JobRecipeApi~addJobRecipeFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addJobRecipeFileByURL = function(body, jobRecipeId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addJobRecipeFileByURL");
      }

      // verify the required parameter 'jobRecipeId' is set
      if (jobRecipeId === undefined || jobRecipeId === null) {
        throw new Error("Missing the required parameter 'jobRecipeId' when calling addJobRecipeFileByURL");
      }


      var pathParams = {
        'jobRecipeId': jobRecipeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/jobRecipe/{jobRecipeId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addJobRecipeTag operation.
     * @callback module:api/JobRecipeApi~addJobRecipeTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a jobRecipe.
     * Adds a tag to an existing jobRecipe.
     * @param {Number} jobRecipeId Id of the jobRecipe to add a tag to
     * @param {String} jobRecipeTag The tag to add
     * @param {module:api/JobRecipeApi~addJobRecipeTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addJobRecipeTag = function(jobRecipeId, jobRecipeTag, callback) {
      var postBody = null;

      // verify the required parameter 'jobRecipeId' is set
      if (jobRecipeId === undefined || jobRecipeId === null) {
        throw new Error("Missing the required parameter 'jobRecipeId' when calling addJobRecipeTag");
      }

      // verify the required parameter 'jobRecipeTag' is set
      if (jobRecipeTag === undefined || jobRecipeTag === null) {
        throw new Error("Missing the required parameter 'jobRecipeTag' when calling addJobRecipeTag");
      }


      var pathParams = {
        'jobRecipeId': jobRecipeId,
        'jobRecipeTag': jobRecipeTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/jobRecipe/{jobRecipeId}/tag/{jobRecipeTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJobRecipe operation.
     * @callback module:api/JobRecipeApi~deleteJobRecipeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a jobRecipe
     * Deletes the jobRecipe identified by the specified id.
     * @param {Number} jobRecipeId Id of the jobRecipe to be deleted.
     * @param {module:api/JobRecipeApi~deleteJobRecipeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteJobRecipe = function(jobRecipeId, callback) {
      var postBody = null;

      // verify the required parameter 'jobRecipeId' is set
      if (jobRecipeId === undefined || jobRecipeId === null) {
        throw new Error("Missing the required parameter 'jobRecipeId' when calling deleteJobRecipe");
      }


      var pathParams = {
        'jobRecipeId': jobRecipeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/jobRecipe/{jobRecipeId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJobRecipeFile operation.
     * @callback module:api/JobRecipeApi~deleteJobRecipeFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a jobRecipe.
     * Deletes an existing jobRecipe file using the specified data.
     * @param {Number} jobRecipeId Id of the jobRecipe to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/JobRecipeApi~deleteJobRecipeFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteJobRecipeFile = function(jobRecipeId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'jobRecipeId' is set
      if (jobRecipeId === undefined || jobRecipeId === null) {
        throw new Error("Missing the required parameter 'jobRecipeId' when calling deleteJobRecipeFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteJobRecipeFile");
      }


      var pathParams = {
        'jobRecipeId': jobRecipeId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/jobRecipe/{jobRecipeId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJobRecipeTag operation.
     * @callback module:api/JobRecipeApi~deleteJobRecipeTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a jobRecipe.
     * Deletes an existing jobRecipe tag using the specified data.
     * @param {Number} jobRecipeId Id of the jobRecipe to remove tag from
     * @param {String} jobRecipeTag The tag to delete
     * @param {module:api/JobRecipeApi~deleteJobRecipeTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteJobRecipeTag = function(jobRecipeId, jobRecipeTag, callback) {
      var postBody = null;

      // verify the required parameter 'jobRecipeId' is set
      if (jobRecipeId === undefined || jobRecipeId === null) {
        throw new Error("Missing the required parameter 'jobRecipeId' when calling deleteJobRecipeTag");
      }

      // verify the required parameter 'jobRecipeTag' is set
      if (jobRecipeTag === undefined || jobRecipeTag === null) {
        throw new Error("Missing the required parameter 'jobRecipeTag' when calling deleteJobRecipeTag");
      }


      var pathParams = {
        'jobRecipeId': jobRecipeId,
        'jobRecipeTag': jobRecipeTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/jobRecipe/{jobRecipeId}/tag/{jobRecipeTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateJobRecipeById operation.
     * @callback module:api/JobRecipeApi~getDuplicateJobRecipeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobRecipe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a jobRecipe by id
     * Returns a duplicated jobRecipe identified by the specified id.
     * @param {Number} jobRecipeId Id of the jobRecipe to be duplicated.
     * @param {module:api/JobRecipeApi~getDuplicateJobRecipeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobRecipe}
     */
    this.getDuplicateJobRecipeById = function(jobRecipeId, callback) {
      var postBody = null;

      // verify the required parameter 'jobRecipeId' is set
      if (jobRecipeId === undefined || jobRecipeId === null) {
        throw new Error("Missing the required parameter 'jobRecipeId' when calling getDuplicateJobRecipeById");
      }


      var pathParams = {
        'jobRecipeId': jobRecipeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = JobRecipe;

      return this.apiClient.callApi(
        '/beta/jobRecipe/duplicate/{jobRecipeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobRecipeByFilter operation.
     * @callback module:api/JobRecipeApi~getJobRecipeByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/JobRecipe>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search jobRecipes by filter
     * Returns the list of jobRecipes that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/JobRecipeApi~getJobRecipeByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/JobRecipe>}
     */
    this.getJobRecipeByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [JobRecipe];

      return this.apiClient.callApi(
        '/beta/jobRecipe/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobRecipeById operation.
     * @callback module:api/JobRecipeApi~getJobRecipeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobRecipe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a jobRecipe by id
     * Returns the jobRecipe identified by the specified id.
     * @param {Number} jobRecipeId Id of the jobRecipe to be returned.
     * @param {module:api/JobRecipeApi~getJobRecipeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobRecipe}
     */
    this.getJobRecipeById = function(jobRecipeId, callback) {
      var postBody = null;

      // verify the required parameter 'jobRecipeId' is set
      if (jobRecipeId === undefined || jobRecipeId === null) {
        throw new Error("Missing the required parameter 'jobRecipeId' when calling getJobRecipeById");
      }


      var pathParams = {
        'jobRecipeId': jobRecipeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = JobRecipe;

      return this.apiClient.callApi(
        '/beta/jobRecipe/{jobRecipeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobRecipeFiles operation.
     * @callback module:api/JobRecipeApi~getJobRecipeFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a jobRecipe.
     * Get all existing jobRecipe files.
     * @param {Number} jobRecipeId Id of the jobRecipe to get files for
     * @param {module:api/JobRecipeApi~getJobRecipeFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getJobRecipeFiles = function(jobRecipeId, callback) {
      var postBody = null;

      // verify the required parameter 'jobRecipeId' is set
      if (jobRecipeId === undefined || jobRecipeId === null) {
        throw new Error("Missing the required parameter 'jobRecipeId' when calling getJobRecipeFiles");
      }


      var pathParams = {
        'jobRecipeId': jobRecipeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/jobRecipe/{jobRecipeId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobRecipeTags operation.
     * @callback module:api/JobRecipeApi~getJobRecipeTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a jobRecipe.
     * Get all existing jobRecipe tags.
     * @param {Number} jobRecipeId Id of the jobRecipe to get tags for
     * @param {module:api/JobRecipeApi~getJobRecipeTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getJobRecipeTags = function(jobRecipeId, callback) {
      var postBody = null;

      // verify the required parameter 'jobRecipeId' is set
      if (jobRecipeId === undefined || jobRecipeId === null) {
        throw new Error("Missing the required parameter 'jobRecipeId' when calling getJobRecipeTags");
      }


      var pathParams = {
        'jobRecipeId': jobRecipeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/jobRecipe/{jobRecipeId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateJobRecipe operation.
     * @callback module:api/JobRecipeApi~updateJobRecipeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a jobRecipe
     * Updates an existing jobRecipe using the specified data.
     * @param {module:model/JobRecipe} body JobRecipe to be updated.
     * @param {module:api/JobRecipeApi~updateJobRecipeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateJobRecipe = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateJobRecipe");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/jobRecipe', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateJobRecipeCustomFields operation.
     * @callback module:api/JobRecipeApi~updateJobRecipeCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a jobRecipe custom fields
     * Updates an existing jobRecipe custom fields using the specified data.
     * @param {module:model/JobRecipe} body JobRecipe to be updated.
     * @param {module:api/JobRecipeApi~updateJobRecipeCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateJobRecipeCustomFields = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateJobRecipeCustomFields");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/jobRecipe/customFields', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
