/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/ItemCategory', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/ItemCategory'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.ItemCategoryApi = factory(root.infoplus.ApiClient, root.infoplus.ApiResponse, root.infoplus.ItemCategory, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, ApiResponse, ItemCategory, RecordFile) {
  'use strict';

  /**
   * ItemCategory service.
   * @module api/ItemCategoryApi
   * @version beta
   */

  /**
   * Constructs a new ItemCategoryApi. 
   * @alias module:api/ItemCategoryApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addItemCategory operation.
     * @callback module:api/ItemCategoryApi~addItemCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an itemCategory
     * Inserts a new itemCategory using the specified data.
     * @param {module:model/ItemCategory} body ItemCategory to be inserted.
     * @param {module:api/ItemCategoryApi~addItemCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemCategory}
     */
    this.addItemCategory = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addItemCategory");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ItemCategory;

      return this.apiClient.callApi(
        '/beta/itemCategory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addItemCategoryAudit operation.
     * @callback module:api/ItemCategoryApi~addItemCategoryAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for an itemCategory
     * Adds an audit to an existing itemCategory.
     * @param {Number} itemCategoryId Id of the itemCategory to add an audit to
     * @param {String} itemCategoryAudit The audit to add
     * @param {module:api/ItemCategoryApi~addItemCategoryAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addItemCategoryAudit = function(itemCategoryId, itemCategoryAudit, callback) {
      var postBody = null;

      // verify the required parameter 'itemCategoryId' is set
      if (itemCategoryId === undefined || itemCategoryId === null) {
        throw new Error("Missing the required parameter 'itemCategoryId' when calling addItemCategoryAudit");
      }

      // verify the required parameter 'itemCategoryAudit' is set
      if (itemCategoryAudit === undefined || itemCategoryAudit === null) {
        throw new Error("Missing the required parameter 'itemCategoryAudit' when calling addItemCategoryAudit");
      }


      var pathParams = {
        'itemCategoryId': itemCategoryId,
        'itemCategoryAudit': itemCategoryAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemCategory/{itemCategoryId}/audit/{itemCategoryAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addItemCategoryFile operation.
     * @callback module:api/ItemCategoryApi~addItemCategoryFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to an itemCategory
     * Adds a file to an existing itemCategory.
     * @param {Number} itemCategoryId Id of the itemCategory to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/ItemCategoryApi~addItemCategoryFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addItemCategoryFile = function(itemCategoryId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'itemCategoryId' is set
      if (itemCategoryId === undefined || itemCategoryId === null) {
        throw new Error("Missing the required parameter 'itemCategoryId' when calling addItemCategoryFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addItemCategoryFile");
      }


      var pathParams = {
        'itemCategoryId': itemCategoryId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemCategory/{itemCategoryId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addItemCategoryFileByURL operation.
     * @callback module:api/ItemCategoryApi~addItemCategoryFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to an itemCategory by URL.
     * Adds a file to an existing itemCategory by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} itemCategoryId Id of the itemCategory to add an file to
     * @param {module:api/ItemCategoryApi~addItemCategoryFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addItemCategoryFileByURL = function(body, itemCategoryId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addItemCategoryFileByURL");
      }

      // verify the required parameter 'itemCategoryId' is set
      if (itemCategoryId === undefined || itemCategoryId === null) {
        throw new Error("Missing the required parameter 'itemCategoryId' when calling addItemCategoryFileByURL");
      }


      var pathParams = {
        'itemCategoryId': itemCategoryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemCategory/{itemCategoryId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addItemCategoryTag operation.
     * @callback module:api/ItemCategoryApi~addItemCategoryTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for an itemCategory.
     * Adds a tag to an existing itemCategory.
     * @param {Number} itemCategoryId Id of the itemCategory to add a tag to
     * @param {String} itemCategoryTag The tag to add
     * @param {module:api/ItemCategoryApi~addItemCategoryTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addItemCategoryTag = function(itemCategoryId, itemCategoryTag, callback) {
      var postBody = null;

      // verify the required parameter 'itemCategoryId' is set
      if (itemCategoryId === undefined || itemCategoryId === null) {
        throw new Error("Missing the required parameter 'itemCategoryId' when calling addItemCategoryTag");
      }

      // verify the required parameter 'itemCategoryTag' is set
      if (itemCategoryTag === undefined || itemCategoryTag === null) {
        throw new Error("Missing the required parameter 'itemCategoryTag' when calling addItemCategoryTag");
      }


      var pathParams = {
        'itemCategoryId': itemCategoryId,
        'itemCategoryTag': itemCategoryTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemCategory/{itemCategoryId}/tag/{itemCategoryTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteItemCategory operation.
     * @callback module:api/ItemCategoryApi~deleteItemCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an itemCategory
     * Deletes the itemCategory identified by the specified id.
     * @param {Number} itemCategoryId Id of the itemCategory to be deleted.
     * @param {module:api/ItemCategoryApi~deleteItemCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteItemCategory = function(itemCategoryId, callback) {
      var postBody = null;

      // verify the required parameter 'itemCategoryId' is set
      if (itemCategoryId === undefined || itemCategoryId === null) {
        throw new Error("Missing the required parameter 'itemCategoryId' when calling deleteItemCategory");
      }


      var pathParams = {
        'itemCategoryId': itemCategoryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemCategory/{itemCategoryId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteItemCategoryFile operation.
     * @callback module:api/ItemCategoryApi~deleteItemCategoryFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for an itemCategory.
     * Deletes an existing itemCategory file using the specified data.
     * @param {Number} itemCategoryId Id of the itemCategory to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/ItemCategoryApi~deleteItemCategoryFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteItemCategoryFile = function(itemCategoryId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'itemCategoryId' is set
      if (itemCategoryId === undefined || itemCategoryId === null) {
        throw new Error("Missing the required parameter 'itemCategoryId' when calling deleteItemCategoryFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteItemCategoryFile");
      }


      var pathParams = {
        'itemCategoryId': itemCategoryId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemCategory/{itemCategoryId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteItemCategoryTag operation.
     * @callback module:api/ItemCategoryApi~deleteItemCategoryTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for an itemCategory.
     * Deletes an existing itemCategory tag using the specified data.
     * @param {Number} itemCategoryId Id of the itemCategory to remove tag from
     * @param {String} itemCategoryTag The tag to delete
     * @param {module:api/ItemCategoryApi~deleteItemCategoryTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteItemCategoryTag = function(itemCategoryId, itemCategoryTag, callback) {
      var postBody = null;

      // verify the required parameter 'itemCategoryId' is set
      if (itemCategoryId === undefined || itemCategoryId === null) {
        throw new Error("Missing the required parameter 'itemCategoryId' when calling deleteItemCategoryTag");
      }

      // verify the required parameter 'itemCategoryTag' is set
      if (itemCategoryTag === undefined || itemCategoryTag === null) {
        throw new Error("Missing the required parameter 'itemCategoryTag' when calling deleteItemCategoryTag");
      }


      var pathParams = {
        'itemCategoryId': itemCategoryId,
        'itemCategoryTag': itemCategoryTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemCategory/{itemCategoryId}/tag/{itemCategoryTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateItemCategoryById operation.
     * @callback module:api/ItemCategoryApi~getDuplicateItemCategoryByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated an itemCategory by id
     * Returns a duplicated itemCategory identified by the specified id.
     * @param {Number} itemCategoryId Id of the itemCategory to be duplicated.
     * @param {module:api/ItemCategoryApi~getDuplicateItemCategoryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemCategory}
     */
    this.getDuplicateItemCategoryById = function(itemCategoryId, callback) {
      var postBody = null;

      // verify the required parameter 'itemCategoryId' is set
      if (itemCategoryId === undefined || itemCategoryId === null) {
        throw new Error("Missing the required parameter 'itemCategoryId' when calling getDuplicateItemCategoryById");
      }


      var pathParams = {
        'itemCategoryId': itemCategoryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ItemCategory;

      return this.apiClient.callApi(
        '/beta/itemCategory/duplicate/{itemCategoryId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemCategoryByFilter operation.
     * @callback module:api/ItemCategoryApi~getItemCategoryByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ItemCategory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search itemCategorys by filter
     * Returns the list of itemCategorys that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/ItemCategoryApi~getItemCategoryByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ItemCategory>}
     */
    this.getItemCategoryByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ItemCategory];

      return this.apiClient.callApi(
        '/beta/itemCategory/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemCategoryById operation.
     * @callback module:api/ItemCategoryApi~getItemCategoryByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an itemCategory by id
     * Returns the itemCategory identified by the specified id.
     * @param {Number} itemCategoryId Id of the itemCategory to be returned.
     * @param {module:api/ItemCategoryApi~getItemCategoryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemCategory}
     */
    this.getItemCategoryById = function(itemCategoryId, callback) {
      var postBody = null;

      // verify the required parameter 'itemCategoryId' is set
      if (itemCategoryId === undefined || itemCategoryId === null) {
        throw new Error("Missing the required parameter 'itemCategoryId' when calling getItemCategoryById");
      }


      var pathParams = {
        'itemCategoryId': itemCategoryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ItemCategory;

      return this.apiClient.callApi(
        '/beta/itemCategory/{itemCategoryId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemCategoryFiles operation.
     * @callback module:api/ItemCategoryApi~getItemCategoryFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for an itemCategory.
     * Get all existing itemCategory files.
     * @param {Number} itemCategoryId Id of the itemCategory to get files for
     * @param {module:api/ItemCategoryApi~getItemCategoryFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getItemCategoryFiles = function(itemCategoryId, callback) {
      var postBody = null;

      // verify the required parameter 'itemCategoryId' is set
      if (itemCategoryId === undefined || itemCategoryId === null) {
        throw new Error("Missing the required parameter 'itemCategoryId' when calling getItemCategoryFiles");
      }


      var pathParams = {
        'itemCategoryId': itemCategoryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemCategory/{itemCategoryId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemCategoryTags operation.
     * @callback module:api/ItemCategoryApi~getItemCategoryTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for an itemCategory.
     * Get all existing itemCategory tags.
     * @param {Number} itemCategoryId Id of the itemCategory to get tags for
     * @param {module:api/ItemCategoryApi~getItemCategoryTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getItemCategoryTags = function(itemCategoryId, callback) {
      var postBody = null;

      // verify the required parameter 'itemCategoryId' is set
      if (itemCategoryId === undefined || itemCategoryId === null) {
        throw new Error("Missing the required parameter 'itemCategoryId' when calling getItemCategoryTags");
      }


      var pathParams = {
        'itemCategoryId': itemCategoryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemCategory/{itemCategoryId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateItemCategory operation.
     * @callback module:api/ItemCategoryApi~updateItemCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an itemCategory
     * Updates an existing itemCategory using the specified data.
     * @param {module:model/ItemCategory} body ItemCategory to be updated.
     * @param {module:api/ItemCategoryApi~updateItemCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateItemCategory = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateItemCategory");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/itemCategory', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
