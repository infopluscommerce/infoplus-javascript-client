/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FulfillmentLayoutPosition', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FulfillmentLayoutPosition'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.FulfillmentLayoutPositionApi = factory(root.infoplus.ApiClient, root.infoplus.FulfillmentLayoutPosition, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, FulfillmentLayoutPosition, RecordFile) {
  'use strict';

  /**
   * FulfillmentLayoutPosition service.
   * @module api/FulfillmentLayoutPositionApi
   * @version beta
   */

  /**
   * Constructs a new FulfillmentLayoutPositionApi. 
   * @alias module:api/FulfillmentLayoutPositionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addFulfillmentLayoutPositionAudit operation.
     * @callback module:api/FulfillmentLayoutPositionApi~addFulfillmentLayoutPositionAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a fulfillmentLayoutPosition
     * Adds an audit to an existing fulfillmentLayoutPosition.
     * @param {Number} fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to add an audit to
     * @param {String} fulfillmentLayoutPositionAudit The audit to add
     * @param {module:api/FulfillmentLayoutPositionApi~addFulfillmentLayoutPositionAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addFulfillmentLayoutPositionAudit = function(fulfillmentLayoutPositionId, fulfillmentLayoutPositionAudit, callback) {
      var postBody = null;

      // verify the required parameter 'fulfillmentLayoutPositionId' is set
      if (fulfillmentLayoutPositionId === undefined || fulfillmentLayoutPositionId === null) {
        throw new Error("Missing the required parameter 'fulfillmentLayoutPositionId' when calling addFulfillmentLayoutPositionAudit");
      }

      // verify the required parameter 'fulfillmentLayoutPositionAudit' is set
      if (fulfillmentLayoutPositionAudit === undefined || fulfillmentLayoutPositionAudit === null) {
        throw new Error("Missing the required parameter 'fulfillmentLayoutPositionAudit' when calling addFulfillmentLayoutPositionAudit");
      }


      var pathParams = {
        'fulfillmentLayoutPositionId': fulfillmentLayoutPositionId,
        'fulfillmentLayoutPositionAudit': fulfillmentLayoutPositionAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/audit/{fulfillmentLayoutPositionAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addFulfillmentLayoutPositionFile operation.
     * @callback module:api/FulfillmentLayoutPositionApi~addFulfillmentLayoutPositionFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a fulfillmentLayoutPosition
     * Adds a file to an existing fulfillmentLayoutPosition.
     * @param {Number} fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/FulfillmentLayoutPositionApi~addFulfillmentLayoutPositionFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addFulfillmentLayoutPositionFile = function(fulfillmentLayoutPositionId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'fulfillmentLayoutPositionId' is set
      if (fulfillmentLayoutPositionId === undefined || fulfillmentLayoutPositionId === null) {
        throw new Error("Missing the required parameter 'fulfillmentLayoutPositionId' when calling addFulfillmentLayoutPositionFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addFulfillmentLayoutPositionFile");
      }


      var pathParams = {
        'fulfillmentLayoutPositionId': fulfillmentLayoutPositionId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addFulfillmentLayoutPositionFileByURL operation.
     * @callback module:api/FulfillmentLayoutPositionApi~addFulfillmentLayoutPositionFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a fulfillmentLayoutPosition by URL.
     * Adds a file to an existing fulfillmentLayoutPosition by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to add an file to
     * @param {module:api/FulfillmentLayoutPositionApi~addFulfillmentLayoutPositionFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addFulfillmentLayoutPositionFileByURL = function(body, fulfillmentLayoutPositionId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addFulfillmentLayoutPositionFileByURL");
      }

      // verify the required parameter 'fulfillmentLayoutPositionId' is set
      if (fulfillmentLayoutPositionId === undefined || fulfillmentLayoutPositionId === null) {
        throw new Error("Missing the required parameter 'fulfillmentLayoutPositionId' when calling addFulfillmentLayoutPositionFileByURL");
      }


      var pathParams = {
        'fulfillmentLayoutPositionId': fulfillmentLayoutPositionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addFulfillmentLayoutPositionTag operation.
     * @callback module:api/FulfillmentLayoutPositionApi~addFulfillmentLayoutPositionTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a fulfillmentLayoutPosition.
     * Adds a tag to an existing fulfillmentLayoutPosition.
     * @param {Number} fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to add a tag to
     * @param {String} fulfillmentLayoutPositionTag The tag to add
     * @param {module:api/FulfillmentLayoutPositionApi~addFulfillmentLayoutPositionTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addFulfillmentLayoutPositionTag = function(fulfillmentLayoutPositionId, fulfillmentLayoutPositionTag, callback) {
      var postBody = null;

      // verify the required parameter 'fulfillmentLayoutPositionId' is set
      if (fulfillmentLayoutPositionId === undefined || fulfillmentLayoutPositionId === null) {
        throw new Error("Missing the required parameter 'fulfillmentLayoutPositionId' when calling addFulfillmentLayoutPositionTag");
      }

      // verify the required parameter 'fulfillmentLayoutPositionTag' is set
      if (fulfillmentLayoutPositionTag === undefined || fulfillmentLayoutPositionTag === null) {
        throw new Error("Missing the required parameter 'fulfillmentLayoutPositionTag' when calling addFulfillmentLayoutPositionTag");
      }


      var pathParams = {
        'fulfillmentLayoutPositionId': fulfillmentLayoutPositionId,
        'fulfillmentLayoutPositionTag': fulfillmentLayoutPositionTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/tag/{fulfillmentLayoutPositionTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFulfillmentLayoutPositionFile operation.
     * @callback module:api/FulfillmentLayoutPositionApi~deleteFulfillmentLayoutPositionFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a fulfillmentLayoutPosition.
     * Deletes an existing fulfillmentLayoutPosition file using the specified data.
     * @param {Number} fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/FulfillmentLayoutPositionApi~deleteFulfillmentLayoutPositionFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFulfillmentLayoutPositionFile = function(fulfillmentLayoutPositionId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'fulfillmentLayoutPositionId' is set
      if (fulfillmentLayoutPositionId === undefined || fulfillmentLayoutPositionId === null) {
        throw new Error("Missing the required parameter 'fulfillmentLayoutPositionId' when calling deleteFulfillmentLayoutPositionFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteFulfillmentLayoutPositionFile");
      }


      var pathParams = {
        'fulfillmentLayoutPositionId': fulfillmentLayoutPositionId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFulfillmentLayoutPositionTag operation.
     * @callback module:api/FulfillmentLayoutPositionApi~deleteFulfillmentLayoutPositionTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a fulfillmentLayoutPosition.
     * Deletes an existing fulfillmentLayoutPosition tag using the specified data.
     * @param {Number} fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to remove tag from
     * @param {String} fulfillmentLayoutPositionTag The tag to delete
     * @param {module:api/FulfillmentLayoutPositionApi~deleteFulfillmentLayoutPositionTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFulfillmentLayoutPositionTag = function(fulfillmentLayoutPositionId, fulfillmentLayoutPositionTag, callback) {
      var postBody = null;

      // verify the required parameter 'fulfillmentLayoutPositionId' is set
      if (fulfillmentLayoutPositionId === undefined || fulfillmentLayoutPositionId === null) {
        throw new Error("Missing the required parameter 'fulfillmentLayoutPositionId' when calling deleteFulfillmentLayoutPositionTag");
      }

      // verify the required parameter 'fulfillmentLayoutPositionTag' is set
      if (fulfillmentLayoutPositionTag === undefined || fulfillmentLayoutPositionTag === null) {
        throw new Error("Missing the required parameter 'fulfillmentLayoutPositionTag' when calling deleteFulfillmentLayoutPositionTag");
      }


      var pathParams = {
        'fulfillmentLayoutPositionId': fulfillmentLayoutPositionId,
        'fulfillmentLayoutPositionTag': fulfillmentLayoutPositionTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/tag/{fulfillmentLayoutPositionTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateFulfillmentLayoutPositionById operation.
     * @callback module:api/FulfillmentLayoutPositionApi~getDuplicateFulfillmentLayoutPositionByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FulfillmentLayoutPosition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a fulfillmentLayoutPosition by id
     * Returns a duplicated fulfillmentLayoutPosition identified by the specified id.
     * @param {Number} fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to be duplicated.
     * @param {module:api/FulfillmentLayoutPositionApi~getDuplicateFulfillmentLayoutPositionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FulfillmentLayoutPosition}
     */
    this.getDuplicateFulfillmentLayoutPositionById = function(fulfillmentLayoutPositionId, callback) {
      var postBody = null;

      // verify the required parameter 'fulfillmentLayoutPositionId' is set
      if (fulfillmentLayoutPositionId === undefined || fulfillmentLayoutPositionId === null) {
        throw new Error("Missing the required parameter 'fulfillmentLayoutPositionId' when calling getDuplicateFulfillmentLayoutPositionById");
      }


      var pathParams = {
        'fulfillmentLayoutPositionId': fulfillmentLayoutPositionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = FulfillmentLayoutPosition;

      return this.apiClient.callApi(
        '/beta/fulfillmentLayoutPosition/duplicate/{fulfillmentLayoutPositionId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFulfillmentLayoutPositionByFilter operation.
     * @callback module:api/FulfillmentLayoutPositionApi~getFulfillmentLayoutPositionByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FulfillmentLayoutPosition>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search fulfillmentLayoutPositions by filter
     * Returns the list of fulfillmentLayoutPositions that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/FulfillmentLayoutPositionApi~getFulfillmentLayoutPositionByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FulfillmentLayoutPosition>}
     */
    this.getFulfillmentLayoutPositionByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FulfillmentLayoutPosition];

      return this.apiClient.callApi(
        '/beta/fulfillmentLayoutPosition/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFulfillmentLayoutPositionById operation.
     * @callback module:api/FulfillmentLayoutPositionApi~getFulfillmentLayoutPositionByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FulfillmentLayoutPosition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a fulfillmentLayoutPosition by id
     * Returns the fulfillmentLayoutPosition identified by the specified id.
     * @param {Number} fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to be returned.
     * @param {module:api/FulfillmentLayoutPositionApi~getFulfillmentLayoutPositionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FulfillmentLayoutPosition}
     */
    this.getFulfillmentLayoutPositionById = function(fulfillmentLayoutPositionId, callback) {
      var postBody = null;

      // verify the required parameter 'fulfillmentLayoutPositionId' is set
      if (fulfillmentLayoutPositionId === undefined || fulfillmentLayoutPositionId === null) {
        throw new Error("Missing the required parameter 'fulfillmentLayoutPositionId' when calling getFulfillmentLayoutPositionById");
      }


      var pathParams = {
        'fulfillmentLayoutPositionId': fulfillmentLayoutPositionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = FulfillmentLayoutPosition;

      return this.apiClient.callApi(
        '/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFulfillmentLayoutPositionFiles operation.
     * @callback module:api/FulfillmentLayoutPositionApi~getFulfillmentLayoutPositionFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a fulfillmentLayoutPosition.
     * Get all existing fulfillmentLayoutPosition files.
     * @param {Number} fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to get files for
     * @param {module:api/FulfillmentLayoutPositionApi~getFulfillmentLayoutPositionFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getFulfillmentLayoutPositionFiles = function(fulfillmentLayoutPositionId, callback) {
      var postBody = null;

      // verify the required parameter 'fulfillmentLayoutPositionId' is set
      if (fulfillmentLayoutPositionId === undefined || fulfillmentLayoutPositionId === null) {
        throw new Error("Missing the required parameter 'fulfillmentLayoutPositionId' when calling getFulfillmentLayoutPositionFiles");
      }


      var pathParams = {
        'fulfillmentLayoutPositionId': fulfillmentLayoutPositionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFulfillmentLayoutPositionTags operation.
     * @callback module:api/FulfillmentLayoutPositionApi~getFulfillmentLayoutPositionTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a fulfillmentLayoutPosition.
     * Get all existing fulfillmentLayoutPosition tags.
     * @param {Number} fulfillmentLayoutPositionId Id of the fulfillmentLayoutPosition to get tags for
     * @param {module:api/FulfillmentLayoutPositionApi~getFulfillmentLayoutPositionTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getFulfillmentLayoutPositionTags = function(fulfillmentLayoutPositionId, callback) {
      var postBody = null;

      // verify the required parameter 'fulfillmentLayoutPositionId' is set
      if (fulfillmentLayoutPositionId === undefined || fulfillmentLayoutPositionId === null) {
        throw new Error("Missing the required parameter 'fulfillmentLayoutPositionId' when calling getFulfillmentLayoutPositionTags");
      }


      var pathParams = {
        'fulfillmentLayoutPositionId': fulfillmentLayoutPositionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
