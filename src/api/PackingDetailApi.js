/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: v3.0
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PackingDetail', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/PackingDetail'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.PackingDetailApi = factory(root.infoplus.ApiClient, root.infoplus.PackingDetail, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, PackingDetail, RecordFile) {
  'use strict';

  /**
   * PackingDetail service.
   * @module api/PackingDetailApi
   * @version v3.0
   */

  /**
   * Constructs a new PackingDetailApi. 
   * @alias module:api/PackingDetailApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addPackingDetailAudit operation.
     * @callback module:api/PackingDetailApi~addPackingDetailAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a packingDetail
     * Adds an audit to an existing packingDetail.
     * @param {Number} packingDetailId Id of the packingDetail to add an audit to
     * @param {String} packingDetailAudit The audit to add
     * @param {module:api/PackingDetailApi~addPackingDetailAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPackingDetailAudit = function(packingDetailId, packingDetailAudit, callback) {
      var postBody = null;

      // verify the required parameter 'packingDetailId' is set
      if (packingDetailId === undefined || packingDetailId === null) {
        throw new Error("Missing the required parameter 'packingDetailId' when calling addPackingDetailAudit");
      }

      // verify the required parameter 'packingDetailAudit' is set
      if (packingDetailAudit === undefined || packingDetailAudit === null) {
        throw new Error("Missing the required parameter 'packingDetailAudit' when calling addPackingDetailAudit");
      }


      var pathParams = {
        'packingDetailId': packingDetailId,
        'packingDetailAudit': packingDetailAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/packingDetail/{packingDetailId}/audit/{packingDetailAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPackingDetailFile operation.
     * @callback module:api/PackingDetailApi~addPackingDetailFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a packingDetail
     * Adds a file to an existing packingDetail.
     * @param {Number} packingDetailId Id of the packingDetail to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/PackingDetailApi~addPackingDetailFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPackingDetailFile = function(packingDetailId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'packingDetailId' is set
      if (packingDetailId === undefined || packingDetailId === null) {
        throw new Error("Missing the required parameter 'packingDetailId' when calling addPackingDetailFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addPackingDetailFile");
      }


      var pathParams = {
        'packingDetailId': packingDetailId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/packingDetail/{packingDetailId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPackingDetailFileByURL operation.
     * @callback module:api/PackingDetailApi~addPackingDetailFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a packingDetail by URL.
     * Adds a file to an existing packingDetail by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} packingDetailId Id of the packingDetail to add an file to
     * @param {module:api/PackingDetailApi~addPackingDetailFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPackingDetailFileByURL = function(body, packingDetailId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addPackingDetailFileByURL");
      }

      // verify the required parameter 'packingDetailId' is set
      if (packingDetailId === undefined || packingDetailId === null) {
        throw new Error("Missing the required parameter 'packingDetailId' when calling addPackingDetailFileByURL");
      }


      var pathParams = {
        'packingDetailId': packingDetailId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/packingDetail/{packingDetailId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPackingDetailTag operation.
     * @callback module:api/PackingDetailApi~addPackingDetailTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a packingDetail.
     * Adds a tag to an existing packingDetail.
     * @param {Number} packingDetailId Id of the packingDetail to add a tag to
     * @param {String} packingDetailTag The tag to add
     * @param {module:api/PackingDetailApi~addPackingDetailTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPackingDetailTag = function(packingDetailId, packingDetailTag, callback) {
      var postBody = null;

      // verify the required parameter 'packingDetailId' is set
      if (packingDetailId === undefined || packingDetailId === null) {
        throw new Error("Missing the required parameter 'packingDetailId' when calling addPackingDetailTag");
      }

      // verify the required parameter 'packingDetailTag' is set
      if (packingDetailTag === undefined || packingDetailTag === null) {
        throw new Error("Missing the required parameter 'packingDetailTag' when calling addPackingDetailTag");
      }


      var pathParams = {
        'packingDetailId': packingDetailId,
        'packingDetailTag': packingDetailTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/packingDetail/{packingDetailId}/tag/{packingDetailTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePackingDetailFile operation.
     * @callback module:api/PackingDetailApi~deletePackingDetailFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a packingDetail.
     * Deletes an existing packingDetail file using the specified data.
     * @param {Number} packingDetailId Id of the packingDetail to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/PackingDetailApi~deletePackingDetailFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePackingDetailFile = function(packingDetailId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'packingDetailId' is set
      if (packingDetailId === undefined || packingDetailId === null) {
        throw new Error("Missing the required parameter 'packingDetailId' when calling deletePackingDetailFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deletePackingDetailFile");
      }


      var pathParams = {
        'packingDetailId': packingDetailId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/packingDetail/{packingDetailId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePackingDetailTag operation.
     * @callback module:api/PackingDetailApi~deletePackingDetailTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a packingDetail.
     * Deletes an existing packingDetail tag using the specified data.
     * @param {Number} packingDetailId Id of the packingDetail to remove tag from
     * @param {String} packingDetailTag The tag to delete
     * @param {module:api/PackingDetailApi~deletePackingDetailTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePackingDetailTag = function(packingDetailId, packingDetailTag, callback) {
      var postBody = null;

      // verify the required parameter 'packingDetailId' is set
      if (packingDetailId === undefined || packingDetailId === null) {
        throw new Error("Missing the required parameter 'packingDetailId' when calling deletePackingDetailTag");
      }

      // verify the required parameter 'packingDetailTag' is set
      if (packingDetailTag === undefined || packingDetailTag === null) {
        throw new Error("Missing the required parameter 'packingDetailTag' when calling deletePackingDetailTag");
      }


      var pathParams = {
        'packingDetailId': packingDetailId,
        'packingDetailTag': packingDetailTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/packingDetail/{packingDetailId}/tag/{packingDetailTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicatePackingDetailById operation.
     * @callback module:api/PackingDetailApi~getDuplicatePackingDetailByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackingDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a packingDetail by id
     * Returns a duplicated packingDetail identified by the specified id.
     * @param {Number} packingDetailId Id of the packingDetail to be duplicated.
     * @param {module:api/PackingDetailApi~getDuplicatePackingDetailByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackingDetail}
     */
    this.getDuplicatePackingDetailById = function(packingDetailId, callback) {
      var postBody = null;

      // verify the required parameter 'packingDetailId' is set
      if (packingDetailId === undefined || packingDetailId === null) {
        throw new Error("Missing the required parameter 'packingDetailId' when calling getDuplicatePackingDetailById");
      }


      var pathParams = {
        'packingDetailId': packingDetailId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PackingDetail;

      return this.apiClient.callApi(
        '/v3.0/packingDetail/duplicate/{packingDetailId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPackingDetailByFilter operation.
     * @callback module:api/PackingDetailApi~getPackingDetailByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PackingDetail>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search packingDetails by filter
     * Returns the list of packingDetails that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/PackingDetailApi~getPackingDetailByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PackingDetail>}
     */
    this.getPackingDetailByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [PackingDetail];

      return this.apiClient.callApi(
        '/v3.0/packingDetail/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPackingDetailById operation.
     * @callback module:api/PackingDetailApi~getPackingDetailByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackingDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a packingDetail by id
     * Returns the packingDetail identified by the specified id.
     * @param {Number} packingDetailId Id of the packingDetail to be returned.
     * @param {module:api/PackingDetailApi~getPackingDetailByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackingDetail}
     */
    this.getPackingDetailById = function(packingDetailId, callback) {
      var postBody = null;

      // verify the required parameter 'packingDetailId' is set
      if (packingDetailId === undefined || packingDetailId === null) {
        throw new Error("Missing the required parameter 'packingDetailId' when calling getPackingDetailById");
      }


      var pathParams = {
        'packingDetailId': packingDetailId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PackingDetail;

      return this.apiClient.callApi(
        '/v3.0/packingDetail/{packingDetailId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPackingDetailFiles operation.
     * @callback module:api/PackingDetailApi~getPackingDetailFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a packingDetail.
     * Get all existing packingDetail files.
     * @param {Number} packingDetailId Id of the packingDetail to get files for
     * @param {module:api/PackingDetailApi~getPackingDetailFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getPackingDetailFiles = function(packingDetailId, callback) {
      var postBody = null;

      // verify the required parameter 'packingDetailId' is set
      if (packingDetailId === undefined || packingDetailId === null) {
        throw new Error("Missing the required parameter 'packingDetailId' when calling getPackingDetailFiles");
      }


      var pathParams = {
        'packingDetailId': packingDetailId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/packingDetail/{packingDetailId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPackingDetailTags operation.
     * @callback module:api/PackingDetailApi~getPackingDetailTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a packingDetail.
     * Get all existing packingDetail tags.
     * @param {Number} packingDetailId Id of the packingDetail to get tags for
     * @param {module:api/PackingDetailApi~getPackingDetailTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getPackingDetailTags = function(packingDetailId, callback) {
      var postBody = null;

      // verify the required parameter 'packingDetailId' is set
      if (packingDetailId === undefined || packingDetailId === null) {
        throw new Error("Missing the required parameter 'packingDetailId' when calling getPackingDetailTags");
      }


      var pathParams = {
        'packingDetailId': packingDetailId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/packingDetail/{packingDetailId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePackingDetailCustomFields operation.
     * @callback module:api/PackingDetailApi~updatePackingDetailCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a packingDetail custom fields
     * Updates an existing packingDetail custom fields using the specified data.
     * @param {module:model/PackingDetail} body PackingDetail to be updated.
     * @param {module:api/PackingDetailApi~updatePackingDetailCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatePackingDetailCustomFields = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePackingDetailCustomFields");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/packingDetail/customFields', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
