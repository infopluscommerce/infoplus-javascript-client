/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/PickFaceAssignment', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/PickFaceAssignment'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.PickFaceAssignmentApi = factory(root.infoplus.ApiClient, root.infoplus.ApiResponse, root.infoplus.PickFaceAssignment, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, ApiResponse, PickFaceAssignment, RecordFile) {
  'use strict';

  /**
   * PickFaceAssignment service.
   * @module api/PickFaceAssignmentApi
   * @version beta
   */

  /**
   * Constructs a new PickFaceAssignmentApi. 
   * @alias module:api/PickFaceAssignmentApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addPickFaceAssignment operation.
     * @callback module:api/PickFaceAssignmentApi~addPickFaceAssignmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PickFaceAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a pickFaceAssignment
     * Inserts a new pickFaceAssignment using the specified data.
     * @param {module:model/PickFaceAssignment} body PickFaceAssignment to be inserted.
     * @param {module:api/PickFaceAssignmentApi~addPickFaceAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PickFaceAssignment}
     */
    this.addPickFaceAssignment = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addPickFaceAssignment");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PickFaceAssignment;

      return this.apiClient.callApi(
        '/beta/pickFaceAssignment', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPickFaceAssignmentAudit operation.
     * @callback module:api/PickFaceAssignmentApi~addPickFaceAssignmentAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a pickFaceAssignment
     * Adds an audit to an existing pickFaceAssignment.
     * @param {Number} pickFaceAssignmentId Id of the pickFaceAssignment to add an audit to
     * @param {String} pickFaceAssignmentAudit The audit to add
     * @param {module:api/PickFaceAssignmentApi~addPickFaceAssignmentAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPickFaceAssignmentAudit = function(pickFaceAssignmentId, pickFaceAssignmentAudit, callback) {
      var postBody = null;

      // verify the required parameter 'pickFaceAssignmentId' is set
      if (pickFaceAssignmentId === undefined || pickFaceAssignmentId === null) {
        throw new Error("Missing the required parameter 'pickFaceAssignmentId' when calling addPickFaceAssignmentAudit");
      }

      // verify the required parameter 'pickFaceAssignmentAudit' is set
      if (pickFaceAssignmentAudit === undefined || pickFaceAssignmentAudit === null) {
        throw new Error("Missing the required parameter 'pickFaceAssignmentAudit' when calling addPickFaceAssignmentAudit");
      }


      var pathParams = {
        'pickFaceAssignmentId': pickFaceAssignmentId,
        'pickFaceAssignmentAudit': pickFaceAssignmentAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/pickFaceAssignment/{pickFaceAssignmentId}/audit/{pickFaceAssignmentAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPickFaceAssignmentFile operation.
     * @callback module:api/PickFaceAssignmentApi~addPickFaceAssignmentFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a pickFaceAssignment
     * Adds a file to an existing pickFaceAssignment.
     * @param {Number} pickFaceAssignmentId Id of the pickFaceAssignment to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/PickFaceAssignmentApi~addPickFaceAssignmentFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPickFaceAssignmentFile = function(pickFaceAssignmentId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'pickFaceAssignmentId' is set
      if (pickFaceAssignmentId === undefined || pickFaceAssignmentId === null) {
        throw new Error("Missing the required parameter 'pickFaceAssignmentId' when calling addPickFaceAssignmentFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addPickFaceAssignmentFile");
      }


      var pathParams = {
        'pickFaceAssignmentId': pickFaceAssignmentId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/pickFaceAssignment/{pickFaceAssignmentId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPickFaceAssignmentFileByURL operation.
     * @callback module:api/PickFaceAssignmentApi~addPickFaceAssignmentFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a pickFaceAssignment by URL.
     * Adds a file to an existing pickFaceAssignment by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} pickFaceAssignmentId Id of the pickFaceAssignment to add an file to
     * @param {module:api/PickFaceAssignmentApi~addPickFaceAssignmentFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPickFaceAssignmentFileByURL = function(body, pickFaceAssignmentId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addPickFaceAssignmentFileByURL");
      }

      // verify the required parameter 'pickFaceAssignmentId' is set
      if (pickFaceAssignmentId === undefined || pickFaceAssignmentId === null) {
        throw new Error("Missing the required parameter 'pickFaceAssignmentId' when calling addPickFaceAssignmentFileByURL");
      }


      var pathParams = {
        'pickFaceAssignmentId': pickFaceAssignmentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/pickFaceAssignment/{pickFaceAssignmentId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPickFaceAssignmentTag operation.
     * @callback module:api/PickFaceAssignmentApi~addPickFaceAssignmentTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a pickFaceAssignment.
     * Adds a tag to an existing pickFaceAssignment.
     * @param {Number} pickFaceAssignmentId Id of the pickFaceAssignment to add a tag to
     * @param {String} pickFaceAssignmentTag The tag to add
     * @param {module:api/PickFaceAssignmentApi~addPickFaceAssignmentTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPickFaceAssignmentTag = function(pickFaceAssignmentId, pickFaceAssignmentTag, callback) {
      var postBody = null;

      // verify the required parameter 'pickFaceAssignmentId' is set
      if (pickFaceAssignmentId === undefined || pickFaceAssignmentId === null) {
        throw new Error("Missing the required parameter 'pickFaceAssignmentId' when calling addPickFaceAssignmentTag");
      }

      // verify the required parameter 'pickFaceAssignmentTag' is set
      if (pickFaceAssignmentTag === undefined || pickFaceAssignmentTag === null) {
        throw new Error("Missing the required parameter 'pickFaceAssignmentTag' when calling addPickFaceAssignmentTag");
      }


      var pathParams = {
        'pickFaceAssignmentId': pickFaceAssignmentId,
        'pickFaceAssignmentTag': pickFaceAssignmentTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/pickFaceAssignment/{pickFaceAssignmentId}/tag/{pickFaceAssignmentTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePickFaceAssignment operation.
     * @callback module:api/PickFaceAssignmentApi~deletePickFaceAssignmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a pickFaceAssignment
     * Deletes the pickFaceAssignment identified by the specified id.
     * @param {Number} pickFaceAssignmentId Id of the pickFaceAssignment to be deleted.
     * @param {module:api/PickFaceAssignmentApi~deletePickFaceAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePickFaceAssignment = function(pickFaceAssignmentId, callback) {
      var postBody = null;

      // verify the required parameter 'pickFaceAssignmentId' is set
      if (pickFaceAssignmentId === undefined || pickFaceAssignmentId === null) {
        throw new Error("Missing the required parameter 'pickFaceAssignmentId' when calling deletePickFaceAssignment");
      }


      var pathParams = {
        'pickFaceAssignmentId': pickFaceAssignmentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/pickFaceAssignment/{pickFaceAssignmentId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePickFaceAssignmentFile operation.
     * @callback module:api/PickFaceAssignmentApi~deletePickFaceAssignmentFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a pickFaceAssignment.
     * Deletes an existing pickFaceAssignment file using the specified data.
     * @param {Number} pickFaceAssignmentId Id of the pickFaceAssignment to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/PickFaceAssignmentApi~deletePickFaceAssignmentFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePickFaceAssignmentFile = function(pickFaceAssignmentId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'pickFaceAssignmentId' is set
      if (pickFaceAssignmentId === undefined || pickFaceAssignmentId === null) {
        throw new Error("Missing the required parameter 'pickFaceAssignmentId' when calling deletePickFaceAssignmentFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deletePickFaceAssignmentFile");
      }


      var pathParams = {
        'pickFaceAssignmentId': pickFaceAssignmentId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/pickFaceAssignment/{pickFaceAssignmentId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePickFaceAssignmentTag operation.
     * @callback module:api/PickFaceAssignmentApi~deletePickFaceAssignmentTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a pickFaceAssignment.
     * Deletes an existing pickFaceAssignment tag using the specified data.
     * @param {Number} pickFaceAssignmentId Id of the pickFaceAssignment to remove tag from
     * @param {String} pickFaceAssignmentTag The tag to delete
     * @param {module:api/PickFaceAssignmentApi~deletePickFaceAssignmentTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePickFaceAssignmentTag = function(pickFaceAssignmentId, pickFaceAssignmentTag, callback) {
      var postBody = null;

      // verify the required parameter 'pickFaceAssignmentId' is set
      if (pickFaceAssignmentId === undefined || pickFaceAssignmentId === null) {
        throw new Error("Missing the required parameter 'pickFaceAssignmentId' when calling deletePickFaceAssignmentTag");
      }

      // verify the required parameter 'pickFaceAssignmentTag' is set
      if (pickFaceAssignmentTag === undefined || pickFaceAssignmentTag === null) {
        throw new Error("Missing the required parameter 'pickFaceAssignmentTag' when calling deletePickFaceAssignmentTag");
      }


      var pathParams = {
        'pickFaceAssignmentId': pickFaceAssignmentId,
        'pickFaceAssignmentTag': pickFaceAssignmentTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/pickFaceAssignment/{pickFaceAssignmentId}/tag/{pickFaceAssignmentTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicatePickFaceAssignmentById operation.
     * @callback module:api/PickFaceAssignmentApi~getDuplicatePickFaceAssignmentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PickFaceAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a pickFaceAssignment by id
     * Returns a duplicated pickFaceAssignment identified by the specified id.
     * @param {Number} pickFaceAssignmentId Id of the pickFaceAssignment to be duplicated.
     * @param {module:api/PickFaceAssignmentApi~getDuplicatePickFaceAssignmentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PickFaceAssignment}
     */
    this.getDuplicatePickFaceAssignmentById = function(pickFaceAssignmentId, callback) {
      var postBody = null;

      // verify the required parameter 'pickFaceAssignmentId' is set
      if (pickFaceAssignmentId === undefined || pickFaceAssignmentId === null) {
        throw new Error("Missing the required parameter 'pickFaceAssignmentId' when calling getDuplicatePickFaceAssignmentById");
      }


      var pathParams = {
        'pickFaceAssignmentId': pickFaceAssignmentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PickFaceAssignment;

      return this.apiClient.callApi(
        '/beta/pickFaceAssignment/duplicate/{pickFaceAssignmentId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPickFaceAssignmentByFilter operation.
     * @callback module:api/PickFaceAssignmentApi~getPickFaceAssignmentByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PickFaceAssignment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search pickFaceAssignments by filter
     * Returns the list of pickFaceAssignments that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/PickFaceAssignmentApi~getPickFaceAssignmentByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PickFaceAssignment>}
     */
    this.getPickFaceAssignmentByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [PickFaceAssignment];

      return this.apiClient.callApi(
        '/beta/pickFaceAssignment/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPickFaceAssignmentById operation.
     * @callback module:api/PickFaceAssignmentApi~getPickFaceAssignmentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PickFaceAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a pickFaceAssignment by id
     * Returns the pickFaceAssignment identified by the specified id.
     * @param {Number} pickFaceAssignmentId Id of the pickFaceAssignment to be returned.
     * @param {module:api/PickFaceAssignmentApi~getPickFaceAssignmentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PickFaceAssignment}
     */
    this.getPickFaceAssignmentById = function(pickFaceAssignmentId, callback) {
      var postBody = null;

      // verify the required parameter 'pickFaceAssignmentId' is set
      if (pickFaceAssignmentId === undefined || pickFaceAssignmentId === null) {
        throw new Error("Missing the required parameter 'pickFaceAssignmentId' when calling getPickFaceAssignmentById");
      }


      var pathParams = {
        'pickFaceAssignmentId': pickFaceAssignmentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PickFaceAssignment;

      return this.apiClient.callApi(
        '/beta/pickFaceAssignment/{pickFaceAssignmentId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPickFaceAssignmentFiles operation.
     * @callback module:api/PickFaceAssignmentApi~getPickFaceAssignmentFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a pickFaceAssignment.
     * Get all existing pickFaceAssignment files.
     * @param {Number} pickFaceAssignmentId Id of the pickFaceAssignment to get files for
     * @param {module:api/PickFaceAssignmentApi~getPickFaceAssignmentFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getPickFaceAssignmentFiles = function(pickFaceAssignmentId, callback) {
      var postBody = null;

      // verify the required parameter 'pickFaceAssignmentId' is set
      if (pickFaceAssignmentId === undefined || pickFaceAssignmentId === null) {
        throw new Error("Missing the required parameter 'pickFaceAssignmentId' when calling getPickFaceAssignmentFiles");
      }


      var pathParams = {
        'pickFaceAssignmentId': pickFaceAssignmentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/pickFaceAssignment/{pickFaceAssignmentId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPickFaceAssignmentTags operation.
     * @callback module:api/PickFaceAssignmentApi~getPickFaceAssignmentTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a pickFaceAssignment.
     * Get all existing pickFaceAssignment tags.
     * @param {Number} pickFaceAssignmentId Id of the pickFaceAssignment to get tags for
     * @param {module:api/PickFaceAssignmentApi~getPickFaceAssignmentTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getPickFaceAssignmentTags = function(pickFaceAssignmentId, callback) {
      var postBody = null;

      // verify the required parameter 'pickFaceAssignmentId' is set
      if (pickFaceAssignmentId === undefined || pickFaceAssignmentId === null) {
        throw new Error("Missing the required parameter 'pickFaceAssignmentId' when calling getPickFaceAssignmentTags");
      }


      var pathParams = {
        'pickFaceAssignmentId': pickFaceAssignmentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/pickFaceAssignment/{pickFaceAssignmentId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePickFaceAssignment operation.
     * @callback module:api/PickFaceAssignmentApi~updatePickFaceAssignmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a pickFaceAssignment
     * Updates an existing pickFaceAssignment using the specified data.
     * @param {module:model/PickFaceAssignment} body PickFaceAssignment to be updated.
     * @param {module:api/PickFaceAssignmentApi~updatePickFaceAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatePickFaceAssignment = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePickFaceAssignment");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/pickFaceAssignment', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePickFaceAssignmentCustomFields operation.
     * @callback module:api/PickFaceAssignmentApi~updatePickFaceAssignmentCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a pickFaceAssignment custom fields
     * Updates an existing pickFaceAssignment custom fields using the specified data.
     * @param {module:model/PickFaceAssignment} body PickFaceAssignment to be updated.
     * @param {module:api/PickFaceAssignmentApi~updatePickFaceAssignmentCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatePickFaceAssignmentCustomFields = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePickFaceAssignmentCustomFields");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/pickFaceAssignment/customFields', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
