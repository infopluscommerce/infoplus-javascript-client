/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PackingPlanDetail', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/PackingPlanDetail'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.PackingPlanDetailApi = factory(root.infoplus.ApiClient, root.infoplus.PackingPlanDetail, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, PackingPlanDetail, RecordFile) {
  'use strict';

  /**
   * PackingPlanDetail service.
   * @module api/PackingPlanDetailApi
   * @version beta
   */

  /**
   * Constructs a new PackingPlanDetailApi. 
   * @alias module:api/PackingPlanDetailApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addPackingPlanDetailAudit operation.
     * @callback module:api/PackingPlanDetailApi~addPackingPlanDetailAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a packingPlanDetail
     * Adds an audit to an existing packingPlanDetail.
     * @param {Number} packingPlanDetailId Id of the packingPlanDetail to add an audit to
     * @param {String} packingPlanDetailAudit The audit to add
     * @param {module:api/PackingPlanDetailApi~addPackingPlanDetailAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPackingPlanDetailAudit = function(packingPlanDetailId, packingPlanDetailAudit, callback) {
      var postBody = null;

      // verify the required parameter 'packingPlanDetailId' is set
      if (packingPlanDetailId === undefined || packingPlanDetailId === null) {
        throw new Error("Missing the required parameter 'packingPlanDetailId' when calling addPackingPlanDetailAudit");
      }

      // verify the required parameter 'packingPlanDetailAudit' is set
      if (packingPlanDetailAudit === undefined || packingPlanDetailAudit === null) {
        throw new Error("Missing the required parameter 'packingPlanDetailAudit' when calling addPackingPlanDetailAudit");
      }


      var pathParams = {
        'packingPlanDetailId': packingPlanDetailId,
        'packingPlanDetailAudit': packingPlanDetailAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/packingPlanDetail/{packingPlanDetailId}/audit/{packingPlanDetailAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPackingPlanDetailFile operation.
     * @callback module:api/PackingPlanDetailApi~addPackingPlanDetailFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a packingPlanDetail
     * Adds a file to an existing packingPlanDetail.
     * @param {Number} packingPlanDetailId Id of the packingPlanDetail to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/PackingPlanDetailApi~addPackingPlanDetailFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPackingPlanDetailFile = function(packingPlanDetailId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'packingPlanDetailId' is set
      if (packingPlanDetailId === undefined || packingPlanDetailId === null) {
        throw new Error("Missing the required parameter 'packingPlanDetailId' when calling addPackingPlanDetailFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addPackingPlanDetailFile");
      }


      var pathParams = {
        'packingPlanDetailId': packingPlanDetailId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/packingPlanDetail/{packingPlanDetailId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPackingPlanDetailFileByURL operation.
     * @callback module:api/PackingPlanDetailApi~addPackingPlanDetailFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a packingPlanDetail by URL.
     * Adds a file to an existing packingPlanDetail by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} packingPlanDetailId Id of the packingPlanDetail to add an file to
     * @param {module:api/PackingPlanDetailApi~addPackingPlanDetailFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPackingPlanDetailFileByURL = function(body, packingPlanDetailId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addPackingPlanDetailFileByURL");
      }

      // verify the required parameter 'packingPlanDetailId' is set
      if (packingPlanDetailId === undefined || packingPlanDetailId === null) {
        throw new Error("Missing the required parameter 'packingPlanDetailId' when calling addPackingPlanDetailFileByURL");
      }


      var pathParams = {
        'packingPlanDetailId': packingPlanDetailId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/packingPlanDetail/{packingPlanDetailId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPackingPlanDetailTag operation.
     * @callback module:api/PackingPlanDetailApi~addPackingPlanDetailTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a packingPlanDetail.
     * Adds a tag to an existing packingPlanDetail.
     * @param {Number} packingPlanDetailId Id of the packingPlanDetail to add a tag to
     * @param {String} packingPlanDetailTag The tag to add
     * @param {module:api/PackingPlanDetailApi~addPackingPlanDetailTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPackingPlanDetailTag = function(packingPlanDetailId, packingPlanDetailTag, callback) {
      var postBody = null;

      // verify the required parameter 'packingPlanDetailId' is set
      if (packingPlanDetailId === undefined || packingPlanDetailId === null) {
        throw new Error("Missing the required parameter 'packingPlanDetailId' when calling addPackingPlanDetailTag");
      }

      // verify the required parameter 'packingPlanDetailTag' is set
      if (packingPlanDetailTag === undefined || packingPlanDetailTag === null) {
        throw new Error("Missing the required parameter 'packingPlanDetailTag' when calling addPackingPlanDetailTag");
      }


      var pathParams = {
        'packingPlanDetailId': packingPlanDetailId,
        'packingPlanDetailTag': packingPlanDetailTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/packingPlanDetail/{packingPlanDetailId}/tag/{packingPlanDetailTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePackingPlanDetailFile operation.
     * @callback module:api/PackingPlanDetailApi~deletePackingPlanDetailFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a packingPlanDetail.
     * Deletes an existing packingPlanDetail file using the specified data.
     * @param {Number} packingPlanDetailId Id of the packingPlanDetail to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/PackingPlanDetailApi~deletePackingPlanDetailFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePackingPlanDetailFile = function(packingPlanDetailId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'packingPlanDetailId' is set
      if (packingPlanDetailId === undefined || packingPlanDetailId === null) {
        throw new Error("Missing the required parameter 'packingPlanDetailId' when calling deletePackingPlanDetailFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deletePackingPlanDetailFile");
      }


      var pathParams = {
        'packingPlanDetailId': packingPlanDetailId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/packingPlanDetail/{packingPlanDetailId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePackingPlanDetailTag operation.
     * @callback module:api/PackingPlanDetailApi~deletePackingPlanDetailTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a packingPlanDetail.
     * Deletes an existing packingPlanDetail tag using the specified data.
     * @param {Number} packingPlanDetailId Id of the packingPlanDetail to remove tag from
     * @param {String} packingPlanDetailTag The tag to delete
     * @param {module:api/PackingPlanDetailApi~deletePackingPlanDetailTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePackingPlanDetailTag = function(packingPlanDetailId, packingPlanDetailTag, callback) {
      var postBody = null;

      // verify the required parameter 'packingPlanDetailId' is set
      if (packingPlanDetailId === undefined || packingPlanDetailId === null) {
        throw new Error("Missing the required parameter 'packingPlanDetailId' when calling deletePackingPlanDetailTag");
      }

      // verify the required parameter 'packingPlanDetailTag' is set
      if (packingPlanDetailTag === undefined || packingPlanDetailTag === null) {
        throw new Error("Missing the required parameter 'packingPlanDetailTag' when calling deletePackingPlanDetailTag");
      }


      var pathParams = {
        'packingPlanDetailId': packingPlanDetailId,
        'packingPlanDetailTag': packingPlanDetailTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/packingPlanDetail/{packingPlanDetailId}/tag/{packingPlanDetailTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicatePackingPlanDetailById operation.
     * @callback module:api/PackingPlanDetailApi~getDuplicatePackingPlanDetailByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackingPlanDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a packingPlanDetail by id
     * Returns a duplicated packingPlanDetail identified by the specified id.
     * @param {Number} packingPlanDetailId Id of the packingPlanDetail to be duplicated.
     * @param {module:api/PackingPlanDetailApi~getDuplicatePackingPlanDetailByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackingPlanDetail}
     */
    this.getDuplicatePackingPlanDetailById = function(packingPlanDetailId, callback) {
      var postBody = null;

      // verify the required parameter 'packingPlanDetailId' is set
      if (packingPlanDetailId === undefined || packingPlanDetailId === null) {
        throw new Error("Missing the required parameter 'packingPlanDetailId' when calling getDuplicatePackingPlanDetailById");
      }


      var pathParams = {
        'packingPlanDetailId': packingPlanDetailId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PackingPlanDetail;

      return this.apiClient.callApi(
        '/beta/packingPlanDetail/duplicate/{packingPlanDetailId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPackingPlanDetailByFilter operation.
     * @callback module:api/PackingPlanDetailApi~getPackingPlanDetailByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PackingPlanDetail>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search packingPlanDetails by filter
     * Returns the list of packingPlanDetails that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/PackingPlanDetailApi~getPackingPlanDetailByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PackingPlanDetail>}
     */
    this.getPackingPlanDetailByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [PackingPlanDetail];

      return this.apiClient.callApi(
        '/beta/packingPlanDetail/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPackingPlanDetailById operation.
     * @callback module:api/PackingPlanDetailApi~getPackingPlanDetailByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackingPlanDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a packingPlanDetail by id
     * Returns the packingPlanDetail identified by the specified id.
     * @param {Number} packingPlanDetailId Id of the packingPlanDetail to be returned.
     * @param {module:api/PackingPlanDetailApi~getPackingPlanDetailByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackingPlanDetail}
     */
    this.getPackingPlanDetailById = function(packingPlanDetailId, callback) {
      var postBody = null;

      // verify the required parameter 'packingPlanDetailId' is set
      if (packingPlanDetailId === undefined || packingPlanDetailId === null) {
        throw new Error("Missing the required parameter 'packingPlanDetailId' when calling getPackingPlanDetailById");
      }


      var pathParams = {
        'packingPlanDetailId': packingPlanDetailId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PackingPlanDetail;

      return this.apiClient.callApi(
        '/beta/packingPlanDetail/{packingPlanDetailId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPackingPlanDetailFiles operation.
     * @callback module:api/PackingPlanDetailApi~getPackingPlanDetailFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a packingPlanDetail.
     * Get all existing packingPlanDetail files.
     * @param {Number} packingPlanDetailId Id of the packingPlanDetail to get files for
     * @param {module:api/PackingPlanDetailApi~getPackingPlanDetailFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getPackingPlanDetailFiles = function(packingPlanDetailId, callback) {
      var postBody = null;

      // verify the required parameter 'packingPlanDetailId' is set
      if (packingPlanDetailId === undefined || packingPlanDetailId === null) {
        throw new Error("Missing the required parameter 'packingPlanDetailId' when calling getPackingPlanDetailFiles");
      }


      var pathParams = {
        'packingPlanDetailId': packingPlanDetailId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/packingPlanDetail/{packingPlanDetailId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPackingPlanDetailTags operation.
     * @callback module:api/PackingPlanDetailApi~getPackingPlanDetailTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a packingPlanDetail.
     * Get all existing packingPlanDetail tags.
     * @param {Number} packingPlanDetailId Id of the packingPlanDetail to get tags for
     * @param {module:api/PackingPlanDetailApi~getPackingPlanDetailTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getPackingPlanDetailTags = function(packingPlanDetailId, callback) {
      var postBody = null;

      // verify the required parameter 'packingPlanDetailId' is set
      if (packingPlanDetailId === undefined || packingPlanDetailId === null) {
        throw new Error("Missing the required parameter 'packingPlanDetailId' when calling getPackingPlanDetailTags");
      }


      var pathParams = {
        'packingPlanDetailId': packingPlanDetailId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/packingPlanDetail/{packingPlanDetailId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePackingPlanDetailCustomFields operation.
     * @callback module:api/PackingPlanDetailApi~updatePackingPlanDetailCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a packingPlanDetail custom fields
     * Updates an existing packingPlanDetail custom fields using the specified data.
     * @param {module:model/PackingPlanDetail} body PackingPlanDetail to be updated.
     * @param {module:api/PackingPlanDetailApi~updatePackingPlanDetailCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatePackingPlanDetailCustomFields = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePackingPlanDetailCustomFields");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/packingPlanDetail/customFields', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
