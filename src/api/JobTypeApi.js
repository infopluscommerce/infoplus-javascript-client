/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/JobType', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/JobType'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.JobTypeApi = factory(root.infoplus.ApiClient, root.infoplus.ApiResponse, root.infoplus.JobType, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, ApiResponse, JobType, RecordFile) {
  'use strict';

  /**
   * JobType service.
   * @module api/JobTypeApi
   * @version beta
   */

  /**
   * Constructs a new JobTypeApi. 
   * @alias module:api/JobTypeApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addJobType operation.
     * @callback module:api/JobTypeApi~addJobTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a jobType
     * Inserts a new jobType using the specified data.
     * @param {module:model/JobType} body JobType to be inserted.
     * @param {module:api/JobTypeApi~addJobTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobType}
     */
    this.addJobType = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addJobType");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = JobType;

      return this.apiClient.callApi(
        '/beta/jobType', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addJobTypeAudit operation.
     * @callback module:api/JobTypeApi~addJobTypeAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a jobType
     * Adds an audit to an existing jobType.
     * @param {Number} jobTypeId Id of the jobType to add an audit to
     * @param {String} jobTypeAudit The audit to add
     * @param {module:api/JobTypeApi~addJobTypeAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addJobTypeAudit = function(jobTypeId, jobTypeAudit, callback) {
      var postBody = null;

      // verify the required parameter 'jobTypeId' is set
      if (jobTypeId === undefined || jobTypeId === null) {
        throw new Error("Missing the required parameter 'jobTypeId' when calling addJobTypeAudit");
      }

      // verify the required parameter 'jobTypeAudit' is set
      if (jobTypeAudit === undefined || jobTypeAudit === null) {
        throw new Error("Missing the required parameter 'jobTypeAudit' when calling addJobTypeAudit");
      }


      var pathParams = {
        'jobTypeId': jobTypeId,
        'jobTypeAudit': jobTypeAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/jobType/{jobTypeId}/audit/{jobTypeAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addJobTypeFile operation.
     * @callback module:api/JobTypeApi~addJobTypeFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a jobType
     * Adds a file to an existing jobType.
     * @param {Number} jobTypeId Id of the jobType to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/JobTypeApi~addJobTypeFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addJobTypeFile = function(jobTypeId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'jobTypeId' is set
      if (jobTypeId === undefined || jobTypeId === null) {
        throw new Error("Missing the required parameter 'jobTypeId' when calling addJobTypeFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addJobTypeFile");
      }


      var pathParams = {
        'jobTypeId': jobTypeId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/jobType/{jobTypeId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addJobTypeFileByURL operation.
     * @callback module:api/JobTypeApi~addJobTypeFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a jobType by URL.
     * Adds a file to an existing jobType by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} jobTypeId Id of the jobType to add an file to
     * @param {module:api/JobTypeApi~addJobTypeFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addJobTypeFileByURL = function(body, jobTypeId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addJobTypeFileByURL");
      }

      // verify the required parameter 'jobTypeId' is set
      if (jobTypeId === undefined || jobTypeId === null) {
        throw new Error("Missing the required parameter 'jobTypeId' when calling addJobTypeFileByURL");
      }


      var pathParams = {
        'jobTypeId': jobTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/jobType/{jobTypeId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addJobTypeTag operation.
     * @callback module:api/JobTypeApi~addJobTypeTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a jobType.
     * Adds a tag to an existing jobType.
     * @param {Number} jobTypeId Id of the jobType to add a tag to
     * @param {String} jobTypeTag The tag to add
     * @param {module:api/JobTypeApi~addJobTypeTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addJobTypeTag = function(jobTypeId, jobTypeTag, callback) {
      var postBody = null;

      // verify the required parameter 'jobTypeId' is set
      if (jobTypeId === undefined || jobTypeId === null) {
        throw new Error("Missing the required parameter 'jobTypeId' when calling addJobTypeTag");
      }

      // verify the required parameter 'jobTypeTag' is set
      if (jobTypeTag === undefined || jobTypeTag === null) {
        throw new Error("Missing the required parameter 'jobTypeTag' when calling addJobTypeTag");
      }


      var pathParams = {
        'jobTypeId': jobTypeId,
        'jobTypeTag': jobTypeTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/jobType/{jobTypeId}/tag/{jobTypeTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJobType operation.
     * @callback module:api/JobTypeApi~deleteJobTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a jobType
     * Deletes the jobType identified by the specified id.
     * @param {Number} jobTypeId Id of the jobType to be deleted.
     * @param {module:api/JobTypeApi~deleteJobTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteJobType = function(jobTypeId, callback) {
      var postBody = null;

      // verify the required parameter 'jobTypeId' is set
      if (jobTypeId === undefined || jobTypeId === null) {
        throw new Error("Missing the required parameter 'jobTypeId' when calling deleteJobType");
      }


      var pathParams = {
        'jobTypeId': jobTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/jobType/{jobTypeId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJobTypeFile operation.
     * @callback module:api/JobTypeApi~deleteJobTypeFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a jobType.
     * Deletes an existing jobType file using the specified data.
     * @param {Number} jobTypeId Id of the jobType to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/JobTypeApi~deleteJobTypeFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteJobTypeFile = function(jobTypeId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'jobTypeId' is set
      if (jobTypeId === undefined || jobTypeId === null) {
        throw new Error("Missing the required parameter 'jobTypeId' when calling deleteJobTypeFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteJobTypeFile");
      }


      var pathParams = {
        'jobTypeId': jobTypeId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/jobType/{jobTypeId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJobTypeTag operation.
     * @callback module:api/JobTypeApi~deleteJobTypeTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a jobType.
     * Deletes an existing jobType tag using the specified data.
     * @param {Number} jobTypeId Id of the jobType to remove tag from
     * @param {String} jobTypeTag The tag to delete
     * @param {module:api/JobTypeApi~deleteJobTypeTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteJobTypeTag = function(jobTypeId, jobTypeTag, callback) {
      var postBody = null;

      // verify the required parameter 'jobTypeId' is set
      if (jobTypeId === undefined || jobTypeId === null) {
        throw new Error("Missing the required parameter 'jobTypeId' when calling deleteJobTypeTag");
      }

      // verify the required parameter 'jobTypeTag' is set
      if (jobTypeTag === undefined || jobTypeTag === null) {
        throw new Error("Missing the required parameter 'jobTypeTag' when calling deleteJobTypeTag");
      }


      var pathParams = {
        'jobTypeId': jobTypeId,
        'jobTypeTag': jobTypeTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/jobType/{jobTypeId}/tag/{jobTypeTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateJobTypeById operation.
     * @callback module:api/JobTypeApi~getDuplicateJobTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a jobType by id
     * Returns a duplicated jobType identified by the specified id.
     * @param {Number} jobTypeId Id of the jobType to be duplicated.
     * @param {module:api/JobTypeApi~getDuplicateJobTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobType}
     */
    this.getDuplicateJobTypeById = function(jobTypeId, callback) {
      var postBody = null;

      // verify the required parameter 'jobTypeId' is set
      if (jobTypeId === undefined || jobTypeId === null) {
        throw new Error("Missing the required parameter 'jobTypeId' when calling getDuplicateJobTypeById");
      }


      var pathParams = {
        'jobTypeId': jobTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = JobType;

      return this.apiClient.callApi(
        '/beta/jobType/duplicate/{jobTypeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobTypeByFilter operation.
     * @callback module:api/JobTypeApi~getJobTypeByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/JobType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search jobTypes by filter
     * Returns the list of jobTypes that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/JobTypeApi~getJobTypeByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/JobType>}
     */
    this.getJobTypeByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [JobType];

      return this.apiClient.callApi(
        '/beta/jobType/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobTypeById operation.
     * @callback module:api/JobTypeApi~getJobTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a jobType by id
     * Returns the jobType identified by the specified id.
     * @param {Number} jobTypeId Id of the jobType to be returned.
     * @param {module:api/JobTypeApi~getJobTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobType}
     */
    this.getJobTypeById = function(jobTypeId, callback) {
      var postBody = null;

      // verify the required parameter 'jobTypeId' is set
      if (jobTypeId === undefined || jobTypeId === null) {
        throw new Error("Missing the required parameter 'jobTypeId' when calling getJobTypeById");
      }


      var pathParams = {
        'jobTypeId': jobTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = JobType;

      return this.apiClient.callApi(
        '/beta/jobType/{jobTypeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobTypeFiles operation.
     * @callback module:api/JobTypeApi~getJobTypeFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a jobType.
     * Get all existing jobType files.
     * @param {Number} jobTypeId Id of the jobType to get files for
     * @param {module:api/JobTypeApi~getJobTypeFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getJobTypeFiles = function(jobTypeId, callback) {
      var postBody = null;

      // verify the required parameter 'jobTypeId' is set
      if (jobTypeId === undefined || jobTypeId === null) {
        throw new Error("Missing the required parameter 'jobTypeId' when calling getJobTypeFiles");
      }


      var pathParams = {
        'jobTypeId': jobTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/jobType/{jobTypeId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobTypeTags operation.
     * @callback module:api/JobTypeApi~getJobTypeTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a jobType.
     * Get all existing jobType tags.
     * @param {Number} jobTypeId Id of the jobType to get tags for
     * @param {module:api/JobTypeApi~getJobTypeTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getJobTypeTags = function(jobTypeId, callback) {
      var postBody = null;

      // verify the required parameter 'jobTypeId' is set
      if (jobTypeId === undefined || jobTypeId === null) {
        throw new Error("Missing the required parameter 'jobTypeId' when calling getJobTypeTags");
      }


      var pathParams = {
        'jobTypeId': jobTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/jobType/{jobTypeId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateJobType operation.
     * @callback module:api/JobTypeApi~updateJobTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a jobType
     * Updates an existing jobType using the specified data.
     * @param {module:model/JobType} body JobType to be updated.
     * @param {module:api/JobTypeApi~updateJobTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateJobType = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateJobType");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/jobType', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateJobTypeCustomFields operation.
     * @callback module:api/JobTypeApi~updateJobTypeCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a jobType custom fields
     * Updates an existing jobType custom fields using the specified data.
     * @param {module:model/JobType} body JobType to be updated.
     * @param {module:api/JobTypeApi~updateJobTypeCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateJobTypeCustomFields = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateJobTypeCustomFields");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/jobType/customFields', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
