/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RecordFile', 'model/WarehouseInventory'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/RecordFile'), require('../model/WarehouseInventory'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.WarehouseInventoryApi = factory(root.infoplus.ApiClient, root.infoplus.RecordFile, root.infoplus.WarehouseInventory);
  }
}(this, function(ApiClient, RecordFile, WarehouseInventory) {
  'use strict';

  /**
   * WarehouseInventory service.
   * @module api/WarehouseInventoryApi
   * @version beta
   */

  /**
   * Constructs a new WarehouseInventoryApi. 
   * @alias module:api/WarehouseInventoryApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addWarehouseInventoryAudit operation.
     * @callback module:api/WarehouseInventoryApi~addWarehouseInventoryAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a warehouseInventory
     * Adds an audit to an existing warehouseInventory.
     * @param {Number} warehouseInventoryId Id of the warehouseInventory to add an audit to
     * @param {String} warehouseInventoryAudit The audit to add
     * @param {module:api/WarehouseInventoryApi~addWarehouseInventoryAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addWarehouseInventoryAudit = function(warehouseInventoryId, warehouseInventoryAudit, callback) {
      var postBody = null;

      // verify the required parameter 'warehouseInventoryId' is set
      if (warehouseInventoryId === undefined || warehouseInventoryId === null) {
        throw new Error("Missing the required parameter 'warehouseInventoryId' when calling addWarehouseInventoryAudit");
      }

      // verify the required parameter 'warehouseInventoryAudit' is set
      if (warehouseInventoryAudit === undefined || warehouseInventoryAudit === null) {
        throw new Error("Missing the required parameter 'warehouseInventoryAudit' when calling addWarehouseInventoryAudit");
      }


      var pathParams = {
        'warehouseInventoryId': warehouseInventoryId,
        'warehouseInventoryAudit': warehouseInventoryAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/warehouseInventory/{warehouseInventoryId}/audit/{warehouseInventoryAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addWarehouseInventoryFile operation.
     * @callback module:api/WarehouseInventoryApi~addWarehouseInventoryFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a warehouseInventory
     * Adds a file to an existing warehouseInventory.
     * @param {Number} warehouseInventoryId Id of the warehouseInventory to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/WarehouseInventoryApi~addWarehouseInventoryFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addWarehouseInventoryFile = function(warehouseInventoryId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'warehouseInventoryId' is set
      if (warehouseInventoryId === undefined || warehouseInventoryId === null) {
        throw new Error("Missing the required parameter 'warehouseInventoryId' when calling addWarehouseInventoryFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addWarehouseInventoryFile");
      }


      var pathParams = {
        'warehouseInventoryId': warehouseInventoryId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/warehouseInventory/{warehouseInventoryId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addWarehouseInventoryFileByURL operation.
     * @callback module:api/WarehouseInventoryApi~addWarehouseInventoryFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a warehouseInventory by URL.
     * Adds a file to an existing warehouseInventory by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} warehouseInventoryId Id of the warehouseInventory to add an file to
     * @param {module:api/WarehouseInventoryApi~addWarehouseInventoryFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addWarehouseInventoryFileByURL = function(body, warehouseInventoryId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addWarehouseInventoryFileByURL");
      }

      // verify the required parameter 'warehouseInventoryId' is set
      if (warehouseInventoryId === undefined || warehouseInventoryId === null) {
        throw new Error("Missing the required parameter 'warehouseInventoryId' when calling addWarehouseInventoryFileByURL");
      }


      var pathParams = {
        'warehouseInventoryId': warehouseInventoryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/warehouseInventory/{warehouseInventoryId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addWarehouseInventoryTag operation.
     * @callback module:api/WarehouseInventoryApi~addWarehouseInventoryTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a warehouseInventory.
     * Adds a tag to an existing warehouseInventory.
     * @param {Number} warehouseInventoryId Id of the warehouseInventory to add a tag to
     * @param {String} warehouseInventoryTag The tag to add
     * @param {module:api/WarehouseInventoryApi~addWarehouseInventoryTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addWarehouseInventoryTag = function(warehouseInventoryId, warehouseInventoryTag, callback) {
      var postBody = null;

      // verify the required parameter 'warehouseInventoryId' is set
      if (warehouseInventoryId === undefined || warehouseInventoryId === null) {
        throw new Error("Missing the required parameter 'warehouseInventoryId' when calling addWarehouseInventoryTag");
      }

      // verify the required parameter 'warehouseInventoryTag' is set
      if (warehouseInventoryTag === undefined || warehouseInventoryTag === null) {
        throw new Error("Missing the required parameter 'warehouseInventoryTag' when calling addWarehouseInventoryTag");
      }


      var pathParams = {
        'warehouseInventoryId': warehouseInventoryId,
        'warehouseInventoryTag': warehouseInventoryTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/warehouseInventory/{warehouseInventoryId}/tag/{warehouseInventoryTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWarehouseInventoryFile operation.
     * @callback module:api/WarehouseInventoryApi~deleteWarehouseInventoryFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a warehouseInventory.
     * Deletes an existing warehouseInventory file using the specified data.
     * @param {Number} warehouseInventoryId Id of the warehouseInventory to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/WarehouseInventoryApi~deleteWarehouseInventoryFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteWarehouseInventoryFile = function(warehouseInventoryId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'warehouseInventoryId' is set
      if (warehouseInventoryId === undefined || warehouseInventoryId === null) {
        throw new Error("Missing the required parameter 'warehouseInventoryId' when calling deleteWarehouseInventoryFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteWarehouseInventoryFile");
      }


      var pathParams = {
        'warehouseInventoryId': warehouseInventoryId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/warehouseInventory/{warehouseInventoryId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWarehouseInventoryTag operation.
     * @callback module:api/WarehouseInventoryApi~deleteWarehouseInventoryTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a warehouseInventory.
     * Deletes an existing warehouseInventory tag using the specified data.
     * @param {Number} warehouseInventoryId Id of the warehouseInventory to remove tag from
     * @param {String} warehouseInventoryTag The tag to delete
     * @param {module:api/WarehouseInventoryApi~deleteWarehouseInventoryTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteWarehouseInventoryTag = function(warehouseInventoryId, warehouseInventoryTag, callback) {
      var postBody = null;

      // verify the required parameter 'warehouseInventoryId' is set
      if (warehouseInventoryId === undefined || warehouseInventoryId === null) {
        throw new Error("Missing the required parameter 'warehouseInventoryId' when calling deleteWarehouseInventoryTag");
      }

      // verify the required parameter 'warehouseInventoryTag' is set
      if (warehouseInventoryTag === undefined || warehouseInventoryTag === null) {
        throw new Error("Missing the required parameter 'warehouseInventoryTag' when calling deleteWarehouseInventoryTag");
      }


      var pathParams = {
        'warehouseInventoryId': warehouseInventoryId,
        'warehouseInventoryTag': warehouseInventoryTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/warehouseInventory/{warehouseInventoryId}/tag/{warehouseInventoryTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateWarehouseInventoryById operation.
     * @callback module:api/WarehouseInventoryApi~getDuplicateWarehouseInventoryByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WarehouseInventory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a warehouseInventory by id
     * Returns a duplicated warehouseInventory identified by the specified id.
     * @param {Number} warehouseInventoryId Id of the warehouseInventory to be duplicated.
     * @param {module:api/WarehouseInventoryApi~getDuplicateWarehouseInventoryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WarehouseInventory}
     */
    this.getDuplicateWarehouseInventoryById = function(warehouseInventoryId, callback) {
      var postBody = null;

      // verify the required parameter 'warehouseInventoryId' is set
      if (warehouseInventoryId === undefined || warehouseInventoryId === null) {
        throw new Error("Missing the required parameter 'warehouseInventoryId' when calling getDuplicateWarehouseInventoryById");
      }


      var pathParams = {
        'warehouseInventoryId': warehouseInventoryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WarehouseInventory;

      return this.apiClient.callApi(
        '/beta/warehouseInventory/duplicate/{warehouseInventoryId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWarehouseInventoryByFilter operation.
     * @callback module:api/WarehouseInventoryApi~getWarehouseInventoryByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WarehouseInventory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search warehouseInventorys by filter
     * Returns the list of warehouseInventorys that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/WarehouseInventoryApi~getWarehouseInventoryByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WarehouseInventory>}
     */
    this.getWarehouseInventoryByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [WarehouseInventory];

      return this.apiClient.callApi(
        '/beta/warehouseInventory/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWarehouseInventoryById operation.
     * @callback module:api/WarehouseInventoryApi~getWarehouseInventoryByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WarehouseInventory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a warehouseInventory by id
     * Returns the warehouseInventory identified by the specified id.
     * @param {Number} warehouseInventoryId Id of the warehouseInventory to be returned.
     * @param {module:api/WarehouseInventoryApi~getWarehouseInventoryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WarehouseInventory}
     */
    this.getWarehouseInventoryById = function(warehouseInventoryId, callback) {
      var postBody = null;

      // verify the required parameter 'warehouseInventoryId' is set
      if (warehouseInventoryId === undefined || warehouseInventoryId === null) {
        throw new Error("Missing the required parameter 'warehouseInventoryId' when calling getWarehouseInventoryById");
      }


      var pathParams = {
        'warehouseInventoryId': warehouseInventoryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WarehouseInventory;

      return this.apiClient.callApi(
        '/beta/warehouseInventory/{warehouseInventoryId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWarehouseInventoryFiles operation.
     * @callback module:api/WarehouseInventoryApi~getWarehouseInventoryFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a warehouseInventory.
     * Get all existing warehouseInventory files.
     * @param {Number} warehouseInventoryId Id of the warehouseInventory to get files for
     * @param {module:api/WarehouseInventoryApi~getWarehouseInventoryFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getWarehouseInventoryFiles = function(warehouseInventoryId, callback) {
      var postBody = null;

      // verify the required parameter 'warehouseInventoryId' is set
      if (warehouseInventoryId === undefined || warehouseInventoryId === null) {
        throw new Error("Missing the required parameter 'warehouseInventoryId' when calling getWarehouseInventoryFiles");
      }


      var pathParams = {
        'warehouseInventoryId': warehouseInventoryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/warehouseInventory/{warehouseInventoryId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWarehouseInventoryTags operation.
     * @callback module:api/WarehouseInventoryApi~getWarehouseInventoryTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a warehouseInventory.
     * Get all existing warehouseInventory tags.
     * @param {Number} warehouseInventoryId Id of the warehouseInventory to get tags for
     * @param {module:api/WarehouseInventoryApi~getWarehouseInventoryTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getWarehouseInventoryTags = function(warehouseInventoryId, callback) {
      var postBody = null;

      // verify the required parameter 'warehouseInventoryId' is set
      if (warehouseInventoryId === undefined || warehouseInventoryId === null) {
        throw new Error("Missing the required parameter 'warehouseInventoryId' when calling getWarehouseInventoryTags");
      }


      var pathParams = {
        'warehouseInventoryId': warehouseInventoryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/warehouseInventory/{warehouseInventoryId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
