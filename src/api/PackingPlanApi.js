/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: v3.0
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/PackingPlan', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/PackingPlan'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.PackingPlanApi = factory(root.infoplus.ApiClient, root.infoplus.ApiResponse, root.infoplus.PackingPlan, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, ApiResponse, PackingPlan, RecordFile) {
  'use strict';

  /**
   * PackingPlan service.
   * @module api/PackingPlanApi
   * @version v3.0
   */

  /**
   * Constructs a new PackingPlanApi. 
   * @alias module:api/PackingPlanApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addPackingPlan operation.
     * @callback module:api/PackingPlanApi~addPackingPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackingPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a packingPlan
     * Inserts a new packingPlan using the specified data.
     * @param {module:model/PackingPlan} body PackingPlan to be inserted.
     * @param {module:api/PackingPlanApi~addPackingPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackingPlan}
     */
    this.addPackingPlan = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addPackingPlan");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PackingPlan;

      return this.apiClient.callApi(
        '/v3.0/packingPlan', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPackingPlanAudit operation.
     * @callback module:api/PackingPlanApi~addPackingPlanAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a packingPlan
     * Adds an audit to an existing packingPlan.
     * @param {Number} packingPlanId Id of the packingPlan to add an audit to
     * @param {String} packingPlanAudit The audit to add
     * @param {module:api/PackingPlanApi~addPackingPlanAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPackingPlanAudit = function(packingPlanId, packingPlanAudit, callback) {
      var postBody = null;

      // verify the required parameter 'packingPlanId' is set
      if (packingPlanId === undefined || packingPlanId === null) {
        throw new Error("Missing the required parameter 'packingPlanId' when calling addPackingPlanAudit");
      }

      // verify the required parameter 'packingPlanAudit' is set
      if (packingPlanAudit === undefined || packingPlanAudit === null) {
        throw new Error("Missing the required parameter 'packingPlanAudit' when calling addPackingPlanAudit");
      }


      var pathParams = {
        'packingPlanId': packingPlanId,
        'packingPlanAudit': packingPlanAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/packingPlan/{packingPlanId}/audit/{packingPlanAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPackingPlanFile operation.
     * @callback module:api/PackingPlanApi~addPackingPlanFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a packingPlan
     * Adds a file to an existing packingPlan.
     * @param {Number} packingPlanId Id of the packingPlan to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/PackingPlanApi~addPackingPlanFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPackingPlanFile = function(packingPlanId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'packingPlanId' is set
      if (packingPlanId === undefined || packingPlanId === null) {
        throw new Error("Missing the required parameter 'packingPlanId' when calling addPackingPlanFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addPackingPlanFile");
      }


      var pathParams = {
        'packingPlanId': packingPlanId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/packingPlan/{packingPlanId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPackingPlanFileByURL operation.
     * @callback module:api/PackingPlanApi~addPackingPlanFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a packingPlan by URL.
     * Adds a file to an existing packingPlan by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} packingPlanId Id of the packingPlan to add an file to
     * @param {module:api/PackingPlanApi~addPackingPlanFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPackingPlanFileByURL = function(body, packingPlanId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addPackingPlanFileByURL");
      }

      // verify the required parameter 'packingPlanId' is set
      if (packingPlanId === undefined || packingPlanId === null) {
        throw new Error("Missing the required parameter 'packingPlanId' when calling addPackingPlanFileByURL");
      }


      var pathParams = {
        'packingPlanId': packingPlanId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/packingPlan/{packingPlanId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPackingPlanTag operation.
     * @callback module:api/PackingPlanApi~addPackingPlanTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a packingPlan.
     * Adds a tag to an existing packingPlan.
     * @param {Number} packingPlanId Id of the packingPlan to add a tag to
     * @param {String} packingPlanTag The tag to add
     * @param {module:api/PackingPlanApi~addPackingPlanTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPackingPlanTag = function(packingPlanId, packingPlanTag, callback) {
      var postBody = null;

      // verify the required parameter 'packingPlanId' is set
      if (packingPlanId === undefined || packingPlanId === null) {
        throw new Error("Missing the required parameter 'packingPlanId' when calling addPackingPlanTag");
      }

      // verify the required parameter 'packingPlanTag' is set
      if (packingPlanTag === undefined || packingPlanTag === null) {
        throw new Error("Missing the required parameter 'packingPlanTag' when calling addPackingPlanTag");
      }


      var pathParams = {
        'packingPlanId': packingPlanId,
        'packingPlanTag': packingPlanTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/packingPlan/{packingPlanId}/tag/{packingPlanTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePackingPlan operation.
     * @callback module:api/PackingPlanApi~deletePackingPlanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a packingPlan
     * Deletes the packingPlan identified by the specified id.
     * @param {Number} packingPlanId Id of the packingPlan to be deleted.
     * @param {module:api/PackingPlanApi~deletePackingPlanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePackingPlan = function(packingPlanId, callback) {
      var postBody = null;

      // verify the required parameter 'packingPlanId' is set
      if (packingPlanId === undefined || packingPlanId === null) {
        throw new Error("Missing the required parameter 'packingPlanId' when calling deletePackingPlan");
      }


      var pathParams = {
        'packingPlanId': packingPlanId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/packingPlan/{packingPlanId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePackingPlanFile operation.
     * @callback module:api/PackingPlanApi~deletePackingPlanFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a packingPlan.
     * Deletes an existing packingPlan file using the specified data.
     * @param {Number} packingPlanId Id of the packingPlan to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/PackingPlanApi~deletePackingPlanFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePackingPlanFile = function(packingPlanId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'packingPlanId' is set
      if (packingPlanId === undefined || packingPlanId === null) {
        throw new Error("Missing the required parameter 'packingPlanId' when calling deletePackingPlanFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deletePackingPlanFile");
      }


      var pathParams = {
        'packingPlanId': packingPlanId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/packingPlan/{packingPlanId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePackingPlanTag operation.
     * @callback module:api/PackingPlanApi~deletePackingPlanTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a packingPlan.
     * Deletes an existing packingPlan tag using the specified data.
     * @param {Number} packingPlanId Id of the packingPlan to remove tag from
     * @param {String} packingPlanTag The tag to delete
     * @param {module:api/PackingPlanApi~deletePackingPlanTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePackingPlanTag = function(packingPlanId, packingPlanTag, callback) {
      var postBody = null;

      // verify the required parameter 'packingPlanId' is set
      if (packingPlanId === undefined || packingPlanId === null) {
        throw new Error("Missing the required parameter 'packingPlanId' when calling deletePackingPlanTag");
      }

      // verify the required parameter 'packingPlanTag' is set
      if (packingPlanTag === undefined || packingPlanTag === null) {
        throw new Error("Missing the required parameter 'packingPlanTag' when calling deletePackingPlanTag");
      }


      var pathParams = {
        'packingPlanId': packingPlanId,
        'packingPlanTag': packingPlanTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/packingPlan/{packingPlanId}/tag/{packingPlanTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicatePackingPlanById operation.
     * @callback module:api/PackingPlanApi~getDuplicatePackingPlanByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackingPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a packingPlan by id
     * Returns a duplicated packingPlan identified by the specified id.
     * @param {Number} packingPlanId Id of the packingPlan to be duplicated.
     * @param {module:api/PackingPlanApi~getDuplicatePackingPlanByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackingPlan}
     */
    this.getDuplicatePackingPlanById = function(packingPlanId, callback) {
      var postBody = null;

      // verify the required parameter 'packingPlanId' is set
      if (packingPlanId === undefined || packingPlanId === null) {
        throw new Error("Missing the required parameter 'packingPlanId' when calling getDuplicatePackingPlanById");
      }


      var pathParams = {
        'packingPlanId': packingPlanId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PackingPlan;

      return this.apiClient.callApi(
        '/v3.0/packingPlan/duplicate/{packingPlanId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPackingPlanByFilter operation.
     * @callback module:api/PackingPlanApi~getPackingPlanByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PackingPlan>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search packingPlans by filter
     * Returns the list of packingPlans that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/PackingPlanApi~getPackingPlanByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PackingPlan>}
     */
    this.getPackingPlanByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [PackingPlan];

      return this.apiClient.callApi(
        '/v3.0/packingPlan/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPackingPlanById operation.
     * @callback module:api/PackingPlanApi~getPackingPlanByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackingPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a packingPlan by id
     * Returns the packingPlan identified by the specified id.
     * @param {Number} packingPlanId Id of the packingPlan to be returned.
     * @param {module:api/PackingPlanApi~getPackingPlanByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackingPlan}
     */
    this.getPackingPlanById = function(packingPlanId, callback) {
      var postBody = null;

      // verify the required parameter 'packingPlanId' is set
      if (packingPlanId === undefined || packingPlanId === null) {
        throw new Error("Missing the required parameter 'packingPlanId' when calling getPackingPlanById");
      }


      var pathParams = {
        'packingPlanId': packingPlanId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PackingPlan;

      return this.apiClient.callApi(
        '/v3.0/packingPlan/{packingPlanId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPackingPlanFiles operation.
     * @callback module:api/PackingPlanApi~getPackingPlanFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a packingPlan.
     * Get all existing packingPlan files.
     * @param {Number} packingPlanId Id of the packingPlan to get files for
     * @param {module:api/PackingPlanApi~getPackingPlanFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getPackingPlanFiles = function(packingPlanId, callback) {
      var postBody = null;

      // verify the required parameter 'packingPlanId' is set
      if (packingPlanId === undefined || packingPlanId === null) {
        throw new Error("Missing the required parameter 'packingPlanId' when calling getPackingPlanFiles");
      }


      var pathParams = {
        'packingPlanId': packingPlanId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/packingPlan/{packingPlanId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPackingPlanTags operation.
     * @callback module:api/PackingPlanApi~getPackingPlanTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a packingPlan.
     * Get all existing packingPlan tags.
     * @param {Number} packingPlanId Id of the packingPlan to get tags for
     * @param {module:api/PackingPlanApi~getPackingPlanTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getPackingPlanTags = function(packingPlanId, callback) {
      var postBody = null;

      // verify the required parameter 'packingPlanId' is set
      if (packingPlanId === undefined || packingPlanId === null) {
        throw new Error("Missing the required parameter 'packingPlanId' when calling getPackingPlanTags");
      }


      var pathParams = {
        'packingPlanId': packingPlanId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/packingPlan/{packingPlanId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePackingPlan operation.
     * @callback module:api/PackingPlanApi~updatePackingPlanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a packingPlan
     * Updates an existing packingPlan using the specified data.
     * @param {module:model/PackingPlan} body PackingPlan to be updated.
     * @param {module:api/PackingPlanApi~updatePackingPlanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatePackingPlan = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePackingPlan");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/packingPlan', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePackingPlanCustomFields operation.
     * @callback module:api/PackingPlanApi~updatePackingPlanCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a packingPlan custom fields
     * Updates an existing packingPlan custom fields using the specified data.
     * @param {module:model/PackingPlan} body PackingPlan to be updated.
     * @param {module:api/PackingPlanApi~updatePackingPlanCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatePackingPlanCustomFields = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePackingPlanCustomFields");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v3.0/packingPlan/customFields', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
