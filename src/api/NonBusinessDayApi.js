/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/NonBusinessDay', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/NonBusinessDay'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.NonBusinessDayApi = factory(root.infoplus.ApiClient, root.infoplus.ApiResponse, root.infoplus.NonBusinessDay, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, ApiResponse, NonBusinessDay, RecordFile) {
  'use strict';

  /**
   * NonBusinessDay service.
   * @module api/NonBusinessDayApi
   * @version beta
   */

  /**
   * Constructs a new NonBusinessDayApi. 
   * @alias module:api/NonBusinessDayApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addNonBusinessDay operation.
     * @callback module:api/NonBusinessDayApi~addNonBusinessDayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NonBusinessDay} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a nonBusinessDay
     * Inserts a new nonBusinessDay using the specified data.
     * @param {module:model/NonBusinessDay} body NonBusinessDay to be inserted.
     * @param {module:api/NonBusinessDayApi~addNonBusinessDayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NonBusinessDay}
     */
    this.addNonBusinessDay = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addNonBusinessDay");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NonBusinessDay;

      return this.apiClient.callApi(
        '/beta/nonBusinessDay', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addNonBusinessDayAudit operation.
     * @callback module:api/NonBusinessDayApi~addNonBusinessDayAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a nonBusinessDay
     * Adds an audit to an existing nonBusinessDay.
     * @param {Number} nonBusinessDayId Id of the nonBusinessDay to add an audit to
     * @param {String} nonBusinessDayAudit The audit to add
     * @param {module:api/NonBusinessDayApi~addNonBusinessDayAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addNonBusinessDayAudit = function(nonBusinessDayId, nonBusinessDayAudit, callback) {
      var postBody = null;

      // verify the required parameter 'nonBusinessDayId' is set
      if (nonBusinessDayId === undefined || nonBusinessDayId === null) {
        throw new Error("Missing the required parameter 'nonBusinessDayId' when calling addNonBusinessDayAudit");
      }

      // verify the required parameter 'nonBusinessDayAudit' is set
      if (nonBusinessDayAudit === undefined || nonBusinessDayAudit === null) {
        throw new Error("Missing the required parameter 'nonBusinessDayAudit' when calling addNonBusinessDayAudit");
      }


      var pathParams = {
        'nonBusinessDayId': nonBusinessDayId,
        'nonBusinessDayAudit': nonBusinessDayAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/nonBusinessDay/{nonBusinessDayId}/audit/{nonBusinessDayAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addNonBusinessDayFile operation.
     * @callback module:api/NonBusinessDayApi~addNonBusinessDayFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a nonBusinessDay
     * Adds a file to an existing nonBusinessDay.
     * @param {Number} nonBusinessDayId Id of the nonBusinessDay to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/NonBusinessDayApi~addNonBusinessDayFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addNonBusinessDayFile = function(nonBusinessDayId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'nonBusinessDayId' is set
      if (nonBusinessDayId === undefined || nonBusinessDayId === null) {
        throw new Error("Missing the required parameter 'nonBusinessDayId' when calling addNonBusinessDayFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addNonBusinessDayFile");
      }


      var pathParams = {
        'nonBusinessDayId': nonBusinessDayId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/nonBusinessDay/{nonBusinessDayId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addNonBusinessDayFileByURL operation.
     * @callback module:api/NonBusinessDayApi~addNonBusinessDayFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a nonBusinessDay by URL.
     * Adds a file to an existing nonBusinessDay by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} nonBusinessDayId Id of the nonBusinessDay to add an file to
     * @param {module:api/NonBusinessDayApi~addNonBusinessDayFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addNonBusinessDayFileByURL = function(body, nonBusinessDayId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addNonBusinessDayFileByURL");
      }

      // verify the required parameter 'nonBusinessDayId' is set
      if (nonBusinessDayId === undefined || nonBusinessDayId === null) {
        throw new Error("Missing the required parameter 'nonBusinessDayId' when calling addNonBusinessDayFileByURL");
      }


      var pathParams = {
        'nonBusinessDayId': nonBusinessDayId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/nonBusinessDay/{nonBusinessDayId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addNonBusinessDayTag operation.
     * @callback module:api/NonBusinessDayApi~addNonBusinessDayTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a nonBusinessDay.
     * Adds a tag to an existing nonBusinessDay.
     * @param {Number} nonBusinessDayId Id of the nonBusinessDay to add a tag to
     * @param {String} nonBusinessDayTag The tag to add
     * @param {module:api/NonBusinessDayApi~addNonBusinessDayTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addNonBusinessDayTag = function(nonBusinessDayId, nonBusinessDayTag, callback) {
      var postBody = null;

      // verify the required parameter 'nonBusinessDayId' is set
      if (nonBusinessDayId === undefined || nonBusinessDayId === null) {
        throw new Error("Missing the required parameter 'nonBusinessDayId' when calling addNonBusinessDayTag");
      }

      // verify the required parameter 'nonBusinessDayTag' is set
      if (nonBusinessDayTag === undefined || nonBusinessDayTag === null) {
        throw new Error("Missing the required parameter 'nonBusinessDayTag' when calling addNonBusinessDayTag");
      }


      var pathParams = {
        'nonBusinessDayId': nonBusinessDayId,
        'nonBusinessDayTag': nonBusinessDayTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/nonBusinessDay/{nonBusinessDayId}/tag/{nonBusinessDayTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNonBusinessDay operation.
     * @callback module:api/NonBusinessDayApi~deleteNonBusinessDayCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a nonBusinessDay
     * Deletes the nonBusinessDay identified by the specified id.
     * @param {Number} nonBusinessDayId Id of the nonBusinessDay to be deleted.
     * @param {module:api/NonBusinessDayApi~deleteNonBusinessDayCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNonBusinessDay = function(nonBusinessDayId, callback) {
      var postBody = null;

      // verify the required parameter 'nonBusinessDayId' is set
      if (nonBusinessDayId === undefined || nonBusinessDayId === null) {
        throw new Error("Missing the required parameter 'nonBusinessDayId' when calling deleteNonBusinessDay");
      }


      var pathParams = {
        'nonBusinessDayId': nonBusinessDayId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/nonBusinessDay/{nonBusinessDayId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNonBusinessDayFile operation.
     * @callback module:api/NonBusinessDayApi~deleteNonBusinessDayFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a nonBusinessDay.
     * Deletes an existing nonBusinessDay file using the specified data.
     * @param {Number} nonBusinessDayId Id of the nonBusinessDay to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/NonBusinessDayApi~deleteNonBusinessDayFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNonBusinessDayFile = function(nonBusinessDayId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'nonBusinessDayId' is set
      if (nonBusinessDayId === undefined || nonBusinessDayId === null) {
        throw new Error("Missing the required parameter 'nonBusinessDayId' when calling deleteNonBusinessDayFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteNonBusinessDayFile");
      }


      var pathParams = {
        'nonBusinessDayId': nonBusinessDayId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/nonBusinessDay/{nonBusinessDayId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNonBusinessDayTag operation.
     * @callback module:api/NonBusinessDayApi~deleteNonBusinessDayTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a nonBusinessDay.
     * Deletes an existing nonBusinessDay tag using the specified data.
     * @param {Number} nonBusinessDayId Id of the nonBusinessDay to remove tag from
     * @param {String} nonBusinessDayTag The tag to delete
     * @param {module:api/NonBusinessDayApi~deleteNonBusinessDayTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNonBusinessDayTag = function(nonBusinessDayId, nonBusinessDayTag, callback) {
      var postBody = null;

      // verify the required parameter 'nonBusinessDayId' is set
      if (nonBusinessDayId === undefined || nonBusinessDayId === null) {
        throw new Error("Missing the required parameter 'nonBusinessDayId' when calling deleteNonBusinessDayTag");
      }

      // verify the required parameter 'nonBusinessDayTag' is set
      if (nonBusinessDayTag === undefined || nonBusinessDayTag === null) {
        throw new Error("Missing the required parameter 'nonBusinessDayTag' when calling deleteNonBusinessDayTag");
      }


      var pathParams = {
        'nonBusinessDayId': nonBusinessDayId,
        'nonBusinessDayTag': nonBusinessDayTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/nonBusinessDay/{nonBusinessDayId}/tag/{nonBusinessDayTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateNonBusinessDayById operation.
     * @callback module:api/NonBusinessDayApi~getDuplicateNonBusinessDayByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NonBusinessDay} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a nonBusinessDay by id
     * Returns a duplicated nonBusinessDay identified by the specified id.
     * @param {Number} nonBusinessDayId Id of the nonBusinessDay to be duplicated.
     * @param {module:api/NonBusinessDayApi~getDuplicateNonBusinessDayByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NonBusinessDay}
     */
    this.getDuplicateNonBusinessDayById = function(nonBusinessDayId, callback) {
      var postBody = null;

      // verify the required parameter 'nonBusinessDayId' is set
      if (nonBusinessDayId === undefined || nonBusinessDayId === null) {
        throw new Error("Missing the required parameter 'nonBusinessDayId' when calling getDuplicateNonBusinessDayById");
      }


      var pathParams = {
        'nonBusinessDayId': nonBusinessDayId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = NonBusinessDay;

      return this.apiClient.callApi(
        '/beta/nonBusinessDay/duplicate/{nonBusinessDayId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNonBusinessDayByFilter operation.
     * @callback module:api/NonBusinessDayApi~getNonBusinessDayByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NonBusinessDay>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search nonBusinessDays by filter
     * Returns the list of nonBusinessDays that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/NonBusinessDayApi~getNonBusinessDayByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NonBusinessDay>}
     */
    this.getNonBusinessDayByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [NonBusinessDay];

      return this.apiClient.callApi(
        '/beta/nonBusinessDay/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNonBusinessDayById operation.
     * @callback module:api/NonBusinessDayApi~getNonBusinessDayByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NonBusinessDay} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a nonBusinessDay by id
     * Returns the nonBusinessDay identified by the specified id.
     * @param {Number} nonBusinessDayId Id of the nonBusinessDay to be returned.
     * @param {module:api/NonBusinessDayApi~getNonBusinessDayByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NonBusinessDay}
     */
    this.getNonBusinessDayById = function(nonBusinessDayId, callback) {
      var postBody = null;

      // verify the required parameter 'nonBusinessDayId' is set
      if (nonBusinessDayId === undefined || nonBusinessDayId === null) {
        throw new Error("Missing the required parameter 'nonBusinessDayId' when calling getNonBusinessDayById");
      }


      var pathParams = {
        'nonBusinessDayId': nonBusinessDayId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = NonBusinessDay;

      return this.apiClient.callApi(
        '/beta/nonBusinessDay/{nonBusinessDayId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNonBusinessDayFiles operation.
     * @callback module:api/NonBusinessDayApi~getNonBusinessDayFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a nonBusinessDay.
     * Get all existing nonBusinessDay files.
     * @param {Number} nonBusinessDayId Id of the nonBusinessDay to get files for
     * @param {module:api/NonBusinessDayApi~getNonBusinessDayFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getNonBusinessDayFiles = function(nonBusinessDayId, callback) {
      var postBody = null;

      // verify the required parameter 'nonBusinessDayId' is set
      if (nonBusinessDayId === undefined || nonBusinessDayId === null) {
        throw new Error("Missing the required parameter 'nonBusinessDayId' when calling getNonBusinessDayFiles");
      }


      var pathParams = {
        'nonBusinessDayId': nonBusinessDayId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/nonBusinessDay/{nonBusinessDayId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNonBusinessDayTags operation.
     * @callback module:api/NonBusinessDayApi~getNonBusinessDayTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a nonBusinessDay.
     * Get all existing nonBusinessDay tags.
     * @param {Number} nonBusinessDayId Id of the nonBusinessDay to get tags for
     * @param {module:api/NonBusinessDayApi~getNonBusinessDayTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getNonBusinessDayTags = function(nonBusinessDayId, callback) {
      var postBody = null;

      // verify the required parameter 'nonBusinessDayId' is set
      if (nonBusinessDayId === undefined || nonBusinessDayId === null) {
        throw new Error("Missing the required parameter 'nonBusinessDayId' when calling getNonBusinessDayTags");
      }


      var pathParams = {
        'nonBusinessDayId': nonBusinessDayId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/nonBusinessDay/{nonBusinessDayId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNonBusinessDay operation.
     * @callback module:api/NonBusinessDayApi~updateNonBusinessDayCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a nonBusinessDay
     * Updates an existing nonBusinessDay using the specified data.
     * @param {module:model/NonBusinessDay} body NonBusinessDay to be updated.
     * @param {module:api/NonBusinessDayApi~updateNonBusinessDayCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateNonBusinessDay = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateNonBusinessDay");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/nonBusinessDay', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
