/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/PalletType', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/PalletType'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.PalletTypeApi = factory(root.infoplus.ApiClient, root.infoplus.ApiResponse, root.infoplus.PalletType, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, ApiResponse, PalletType, RecordFile) {
  'use strict';

  /**
   * PalletType service.
   * @module api/PalletTypeApi
   * @version beta
   */

  /**
   * Constructs a new PalletTypeApi. 
   * @alias module:api/PalletTypeApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addPalletType operation.
     * @callback module:api/PalletTypeApi~addPalletTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PalletType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a palletType
     * Inserts a new palletType using the specified data.
     * @param {module:model/PalletType} body PalletType to be inserted.
     * @param {module:api/PalletTypeApi~addPalletTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PalletType}
     */
    this.addPalletType = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addPalletType");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PalletType;

      return this.apiClient.callApi(
        '/beta/palletType', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPalletTypeAudit operation.
     * @callback module:api/PalletTypeApi~addPalletTypeAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a palletType
     * Adds an audit to an existing palletType.
     * @param {Number} palletTypeId Id of the palletType to add an audit to
     * @param {String} palletTypeAudit The audit to add
     * @param {module:api/PalletTypeApi~addPalletTypeAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPalletTypeAudit = function(palletTypeId, palletTypeAudit, callback) {
      var postBody = null;

      // verify the required parameter 'palletTypeId' is set
      if (palletTypeId === undefined || palletTypeId === null) {
        throw new Error("Missing the required parameter 'palletTypeId' when calling addPalletTypeAudit");
      }

      // verify the required parameter 'palletTypeAudit' is set
      if (palletTypeAudit === undefined || palletTypeAudit === null) {
        throw new Error("Missing the required parameter 'palletTypeAudit' when calling addPalletTypeAudit");
      }


      var pathParams = {
        'palletTypeId': palletTypeId,
        'palletTypeAudit': palletTypeAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/palletType/{palletTypeId}/audit/{palletTypeAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPalletTypeFile operation.
     * @callback module:api/PalletTypeApi~addPalletTypeFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a palletType
     * Adds a file to an existing palletType.
     * @param {Number} palletTypeId Id of the palletType to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/PalletTypeApi~addPalletTypeFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPalletTypeFile = function(palletTypeId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'palletTypeId' is set
      if (palletTypeId === undefined || palletTypeId === null) {
        throw new Error("Missing the required parameter 'palletTypeId' when calling addPalletTypeFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addPalletTypeFile");
      }


      var pathParams = {
        'palletTypeId': palletTypeId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/palletType/{palletTypeId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPalletTypeFileByURL operation.
     * @callback module:api/PalletTypeApi~addPalletTypeFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a palletType by URL.
     * Adds a file to an existing palletType by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} palletTypeId Id of the palletType to add an file to
     * @param {module:api/PalletTypeApi~addPalletTypeFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPalletTypeFileByURL = function(body, palletTypeId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addPalletTypeFileByURL");
      }

      // verify the required parameter 'palletTypeId' is set
      if (palletTypeId === undefined || palletTypeId === null) {
        throw new Error("Missing the required parameter 'palletTypeId' when calling addPalletTypeFileByURL");
      }


      var pathParams = {
        'palletTypeId': palletTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/palletType/{palletTypeId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPalletTypeTag operation.
     * @callback module:api/PalletTypeApi~addPalletTypeTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a palletType.
     * Adds a tag to an existing palletType.
     * @param {Number} palletTypeId Id of the palletType to add a tag to
     * @param {String} palletTypeTag The tag to add
     * @param {module:api/PalletTypeApi~addPalletTypeTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPalletTypeTag = function(palletTypeId, palletTypeTag, callback) {
      var postBody = null;

      // verify the required parameter 'palletTypeId' is set
      if (palletTypeId === undefined || palletTypeId === null) {
        throw new Error("Missing the required parameter 'palletTypeId' when calling addPalletTypeTag");
      }

      // verify the required parameter 'palletTypeTag' is set
      if (palletTypeTag === undefined || palletTypeTag === null) {
        throw new Error("Missing the required parameter 'palletTypeTag' when calling addPalletTypeTag");
      }


      var pathParams = {
        'palletTypeId': palletTypeId,
        'palletTypeTag': palletTypeTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/palletType/{palletTypeId}/tag/{palletTypeTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePalletType operation.
     * @callback module:api/PalletTypeApi~deletePalletTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a palletType
     * Deletes the palletType identified by the specified id.
     * @param {Number} palletTypeId Id of the palletType to be deleted.
     * @param {module:api/PalletTypeApi~deletePalletTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePalletType = function(palletTypeId, callback) {
      var postBody = null;

      // verify the required parameter 'palletTypeId' is set
      if (palletTypeId === undefined || palletTypeId === null) {
        throw new Error("Missing the required parameter 'palletTypeId' when calling deletePalletType");
      }


      var pathParams = {
        'palletTypeId': palletTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/palletType/{palletTypeId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePalletTypeFile operation.
     * @callback module:api/PalletTypeApi~deletePalletTypeFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a palletType.
     * Deletes an existing palletType file using the specified data.
     * @param {Number} palletTypeId Id of the palletType to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/PalletTypeApi~deletePalletTypeFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePalletTypeFile = function(palletTypeId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'palletTypeId' is set
      if (palletTypeId === undefined || palletTypeId === null) {
        throw new Error("Missing the required parameter 'palletTypeId' when calling deletePalletTypeFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deletePalletTypeFile");
      }


      var pathParams = {
        'palletTypeId': palletTypeId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/palletType/{palletTypeId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePalletTypeTag operation.
     * @callback module:api/PalletTypeApi~deletePalletTypeTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a palletType.
     * Deletes an existing palletType tag using the specified data.
     * @param {Number} palletTypeId Id of the palletType to remove tag from
     * @param {String} palletTypeTag The tag to delete
     * @param {module:api/PalletTypeApi~deletePalletTypeTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePalletTypeTag = function(palletTypeId, palletTypeTag, callback) {
      var postBody = null;

      // verify the required parameter 'palletTypeId' is set
      if (palletTypeId === undefined || palletTypeId === null) {
        throw new Error("Missing the required parameter 'palletTypeId' when calling deletePalletTypeTag");
      }

      // verify the required parameter 'palletTypeTag' is set
      if (palletTypeTag === undefined || palletTypeTag === null) {
        throw new Error("Missing the required parameter 'palletTypeTag' when calling deletePalletTypeTag");
      }


      var pathParams = {
        'palletTypeId': palletTypeId,
        'palletTypeTag': palletTypeTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/palletType/{palletTypeId}/tag/{palletTypeTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicatePalletTypeById operation.
     * @callback module:api/PalletTypeApi~getDuplicatePalletTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PalletType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a palletType by id
     * Returns a duplicated palletType identified by the specified id.
     * @param {Number} palletTypeId Id of the palletType to be duplicated.
     * @param {module:api/PalletTypeApi~getDuplicatePalletTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PalletType}
     */
    this.getDuplicatePalletTypeById = function(palletTypeId, callback) {
      var postBody = null;

      // verify the required parameter 'palletTypeId' is set
      if (palletTypeId === undefined || palletTypeId === null) {
        throw new Error("Missing the required parameter 'palletTypeId' when calling getDuplicatePalletTypeById");
      }


      var pathParams = {
        'palletTypeId': palletTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PalletType;

      return this.apiClient.callApi(
        '/beta/palletType/duplicate/{palletTypeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPalletTypeByFilter operation.
     * @callback module:api/PalletTypeApi~getPalletTypeByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PalletType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search palletTypes by filter
     * Returns the list of palletTypes that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/PalletTypeApi~getPalletTypeByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PalletType>}
     */
    this.getPalletTypeByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [PalletType];

      return this.apiClient.callApi(
        '/beta/palletType/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPalletTypeById operation.
     * @callback module:api/PalletTypeApi~getPalletTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PalletType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a palletType by id
     * Returns the palletType identified by the specified id.
     * @param {Number} palletTypeId Id of the palletType to be returned.
     * @param {module:api/PalletTypeApi~getPalletTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PalletType}
     */
    this.getPalletTypeById = function(palletTypeId, callback) {
      var postBody = null;

      // verify the required parameter 'palletTypeId' is set
      if (palletTypeId === undefined || palletTypeId === null) {
        throw new Error("Missing the required parameter 'palletTypeId' when calling getPalletTypeById");
      }


      var pathParams = {
        'palletTypeId': palletTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PalletType;

      return this.apiClient.callApi(
        '/beta/palletType/{palletTypeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPalletTypeFiles operation.
     * @callback module:api/PalletTypeApi~getPalletTypeFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a palletType.
     * Get all existing palletType files.
     * @param {Number} palletTypeId Id of the palletType to get files for
     * @param {module:api/PalletTypeApi~getPalletTypeFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getPalletTypeFiles = function(palletTypeId, callback) {
      var postBody = null;

      // verify the required parameter 'palletTypeId' is set
      if (palletTypeId === undefined || palletTypeId === null) {
        throw new Error("Missing the required parameter 'palletTypeId' when calling getPalletTypeFiles");
      }


      var pathParams = {
        'palletTypeId': palletTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/palletType/{palletTypeId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPalletTypeTags operation.
     * @callback module:api/PalletTypeApi~getPalletTypeTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a palletType.
     * Get all existing palletType tags.
     * @param {Number} palletTypeId Id of the palletType to get tags for
     * @param {module:api/PalletTypeApi~getPalletTypeTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getPalletTypeTags = function(palletTypeId, callback) {
      var postBody = null;

      // verify the required parameter 'palletTypeId' is set
      if (palletTypeId === undefined || palletTypeId === null) {
        throw new Error("Missing the required parameter 'palletTypeId' when calling getPalletTypeTags");
      }


      var pathParams = {
        'palletTypeId': palletTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/palletType/{palletTypeId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePalletType operation.
     * @callback module:api/PalletTypeApi~updatePalletTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a palletType
     * Updates an existing palletType using the specified data.
     * @param {module:model/PalletType} body PalletType to be updated.
     * @param {module:api/PalletTypeApi~updatePalletTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatePalletType = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePalletType");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/palletType', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePalletTypeCustomFields operation.
     * @callback module:api/PalletTypeApi~updatePalletTypeCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a palletType custom fields
     * Updates an existing palletType custom fields using the specified data.
     * @param {module:model/PalletType} body PalletType to be updated.
     * @param {module:api/PalletTypeApi~updatePalletTypeCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatePalletTypeCustomFields = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePalletTypeCustomFields");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/palletType/customFields', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
