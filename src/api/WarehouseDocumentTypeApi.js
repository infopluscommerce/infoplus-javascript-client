/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RecordFile', 'model/WarehouseDocumentType'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/RecordFile'), require('../model/WarehouseDocumentType'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.WarehouseDocumentTypeApi = factory(root.infoplus.ApiClient, root.infoplus.RecordFile, root.infoplus.WarehouseDocumentType);
  }
}(this, function(ApiClient, RecordFile, WarehouseDocumentType) {
  'use strict';

  /**
   * WarehouseDocumentType service.
   * @module api/WarehouseDocumentTypeApi
   * @version beta
   */

  /**
   * Constructs a new WarehouseDocumentTypeApi. 
   * @alias module:api/WarehouseDocumentTypeApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addWarehouseDocumentTypeAudit operation.
     * @callback module:api/WarehouseDocumentTypeApi~addWarehouseDocumentTypeAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a warehouseDocumentType
     * Adds an audit to an existing warehouseDocumentType.
     * @param {Number} warehouseDocumentTypeId Id of the warehouseDocumentType to add an audit to
     * @param {String} warehouseDocumentTypeAudit The audit to add
     * @param {module:api/WarehouseDocumentTypeApi~addWarehouseDocumentTypeAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addWarehouseDocumentTypeAudit = function(warehouseDocumentTypeId, warehouseDocumentTypeAudit, callback) {
      var postBody = null;

      // verify the required parameter 'warehouseDocumentTypeId' is set
      if (warehouseDocumentTypeId === undefined || warehouseDocumentTypeId === null) {
        throw new Error("Missing the required parameter 'warehouseDocumentTypeId' when calling addWarehouseDocumentTypeAudit");
      }

      // verify the required parameter 'warehouseDocumentTypeAudit' is set
      if (warehouseDocumentTypeAudit === undefined || warehouseDocumentTypeAudit === null) {
        throw new Error("Missing the required parameter 'warehouseDocumentTypeAudit' when calling addWarehouseDocumentTypeAudit");
      }


      var pathParams = {
        'warehouseDocumentTypeId': warehouseDocumentTypeId,
        'warehouseDocumentTypeAudit': warehouseDocumentTypeAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/warehouseDocumentType/{warehouseDocumentTypeId}/audit/{warehouseDocumentTypeAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addWarehouseDocumentTypeFile operation.
     * @callback module:api/WarehouseDocumentTypeApi~addWarehouseDocumentTypeFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a warehouseDocumentType
     * Adds a file to an existing warehouseDocumentType.
     * @param {Number} warehouseDocumentTypeId Id of the warehouseDocumentType to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/WarehouseDocumentTypeApi~addWarehouseDocumentTypeFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addWarehouseDocumentTypeFile = function(warehouseDocumentTypeId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'warehouseDocumentTypeId' is set
      if (warehouseDocumentTypeId === undefined || warehouseDocumentTypeId === null) {
        throw new Error("Missing the required parameter 'warehouseDocumentTypeId' when calling addWarehouseDocumentTypeFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addWarehouseDocumentTypeFile");
      }


      var pathParams = {
        'warehouseDocumentTypeId': warehouseDocumentTypeId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/warehouseDocumentType/{warehouseDocumentTypeId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addWarehouseDocumentTypeFileByURL operation.
     * @callback module:api/WarehouseDocumentTypeApi~addWarehouseDocumentTypeFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a warehouseDocumentType by URL.
     * Adds a file to an existing warehouseDocumentType by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} warehouseDocumentTypeId Id of the warehouseDocumentType to add an file to
     * @param {module:api/WarehouseDocumentTypeApi~addWarehouseDocumentTypeFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addWarehouseDocumentTypeFileByURL = function(body, warehouseDocumentTypeId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addWarehouseDocumentTypeFileByURL");
      }

      // verify the required parameter 'warehouseDocumentTypeId' is set
      if (warehouseDocumentTypeId === undefined || warehouseDocumentTypeId === null) {
        throw new Error("Missing the required parameter 'warehouseDocumentTypeId' when calling addWarehouseDocumentTypeFileByURL");
      }


      var pathParams = {
        'warehouseDocumentTypeId': warehouseDocumentTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/warehouseDocumentType/{warehouseDocumentTypeId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addWarehouseDocumentTypeTag operation.
     * @callback module:api/WarehouseDocumentTypeApi~addWarehouseDocumentTypeTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a warehouseDocumentType.
     * Adds a tag to an existing warehouseDocumentType.
     * @param {Number} warehouseDocumentTypeId Id of the warehouseDocumentType to add a tag to
     * @param {String} warehouseDocumentTypeTag The tag to add
     * @param {module:api/WarehouseDocumentTypeApi~addWarehouseDocumentTypeTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addWarehouseDocumentTypeTag = function(warehouseDocumentTypeId, warehouseDocumentTypeTag, callback) {
      var postBody = null;

      // verify the required parameter 'warehouseDocumentTypeId' is set
      if (warehouseDocumentTypeId === undefined || warehouseDocumentTypeId === null) {
        throw new Error("Missing the required parameter 'warehouseDocumentTypeId' when calling addWarehouseDocumentTypeTag");
      }

      // verify the required parameter 'warehouseDocumentTypeTag' is set
      if (warehouseDocumentTypeTag === undefined || warehouseDocumentTypeTag === null) {
        throw new Error("Missing the required parameter 'warehouseDocumentTypeTag' when calling addWarehouseDocumentTypeTag");
      }


      var pathParams = {
        'warehouseDocumentTypeId': warehouseDocumentTypeId,
        'warehouseDocumentTypeTag': warehouseDocumentTypeTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/warehouseDocumentType/{warehouseDocumentTypeId}/tag/{warehouseDocumentTypeTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWarehouseDocumentTypeFile operation.
     * @callback module:api/WarehouseDocumentTypeApi~deleteWarehouseDocumentTypeFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a warehouseDocumentType.
     * Deletes an existing warehouseDocumentType file using the specified data.
     * @param {Number} warehouseDocumentTypeId Id of the warehouseDocumentType to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/WarehouseDocumentTypeApi~deleteWarehouseDocumentTypeFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteWarehouseDocumentTypeFile = function(warehouseDocumentTypeId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'warehouseDocumentTypeId' is set
      if (warehouseDocumentTypeId === undefined || warehouseDocumentTypeId === null) {
        throw new Error("Missing the required parameter 'warehouseDocumentTypeId' when calling deleteWarehouseDocumentTypeFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteWarehouseDocumentTypeFile");
      }


      var pathParams = {
        'warehouseDocumentTypeId': warehouseDocumentTypeId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/warehouseDocumentType/{warehouseDocumentTypeId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWarehouseDocumentTypeTag operation.
     * @callback module:api/WarehouseDocumentTypeApi~deleteWarehouseDocumentTypeTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a warehouseDocumentType.
     * Deletes an existing warehouseDocumentType tag using the specified data.
     * @param {Number} warehouseDocumentTypeId Id of the warehouseDocumentType to remove tag from
     * @param {String} warehouseDocumentTypeTag The tag to delete
     * @param {module:api/WarehouseDocumentTypeApi~deleteWarehouseDocumentTypeTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteWarehouseDocumentTypeTag = function(warehouseDocumentTypeId, warehouseDocumentTypeTag, callback) {
      var postBody = null;

      // verify the required parameter 'warehouseDocumentTypeId' is set
      if (warehouseDocumentTypeId === undefined || warehouseDocumentTypeId === null) {
        throw new Error("Missing the required parameter 'warehouseDocumentTypeId' when calling deleteWarehouseDocumentTypeTag");
      }

      // verify the required parameter 'warehouseDocumentTypeTag' is set
      if (warehouseDocumentTypeTag === undefined || warehouseDocumentTypeTag === null) {
        throw new Error("Missing the required parameter 'warehouseDocumentTypeTag' when calling deleteWarehouseDocumentTypeTag");
      }


      var pathParams = {
        'warehouseDocumentTypeId': warehouseDocumentTypeId,
        'warehouseDocumentTypeTag': warehouseDocumentTypeTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/warehouseDocumentType/{warehouseDocumentTypeId}/tag/{warehouseDocumentTypeTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateWarehouseDocumentTypeById operation.
     * @callback module:api/WarehouseDocumentTypeApi~getDuplicateWarehouseDocumentTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WarehouseDocumentType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a warehouseDocumentType by id
     * Returns a duplicated warehouseDocumentType identified by the specified id.
     * @param {Number} warehouseDocumentTypeId Id of the warehouseDocumentType to be duplicated.
     * @param {module:api/WarehouseDocumentTypeApi~getDuplicateWarehouseDocumentTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WarehouseDocumentType}
     */
    this.getDuplicateWarehouseDocumentTypeById = function(warehouseDocumentTypeId, callback) {
      var postBody = null;

      // verify the required parameter 'warehouseDocumentTypeId' is set
      if (warehouseDocumentTypeId === undefined || warehouseDocumentTypeId === null) {
        throw new Error("Missing the required parameter 'warehouseDocumentTypeId' when calling getDuplicateWarehouseDocumentTypeById");
      }


      var pathParams = {
        'warehouseDocumentTypeId': warehouseDocumentTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WarehouseDocumentType;

      return this.apiClient.callApi(
        '/beta/warehouseDocumentType/duplicate/{warehouseDocumentTypeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWarehouseDocumentTypeByFilter operation.
     * @callback module:api/WarehouseDocumentTypeApi~getWarehouseDocumentTypeByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WarehouseDocumentType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search warehouseDocumentTypes by filter
     * Returns the list of warehouseDocumentTypes that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/WarehouseDocumentTypeApi~getWarehouseDocumentTypeByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WarehouseDocumentType>}
     */
    this.getWarehouseDocumentTypeByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [WarehouseDocumentType];

      return this.apiClient.callApi(
        '/beta/warehouseDocumentType/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWarehouseDocumentTypeById operation.
     * @callback module:api/WarehouseDocumentTypeApi~getWarehouseDocumentTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WarehouseDocumentType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a warehouseDocumentType by id
     * Returns the warehouseDocumentType identified by the specified id.
     * @param {Number} warehouseDocumentTypeId Id of the warehouseDocumentType to be returned.
     * @param {module:api/WarehouseDocumentTypeApi~getWarehouseDocumentTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WarehouseDocumentType}
     */
    this.getWarehouseDocumentTypeById = function(warehouseDocumentTypeId, callback) {
      var postBody = null;

      // verify the required parameter 'warehouseDocumentTypeId' is set
      if (warehouseDocumentTypeId === undefined || warehouseDocumentTypeId === null) {
        throw new Error("Missing the required parameter 'warehouseDocumentTypeId' when calling getWarehouseDocumentTypeById");
      }


      var pathParams = {
        'warehouseDocumentTypeId': warehouseDocumentTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WarehouseDocumentType;

      return this.apiClient.callApi(
        '/beta/warehouseDocumentType/{warehouseDocumentTypeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWarehouseDocumentTypeFiles operation.
     * @callback module:api/WarehouseDocumentTypeApi~getWarehouseDocumentTypeFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a warehouseDocumentType.
     * Get all existing warehouseDocumentType files.
     * @param {Number} warehouseDocumentTypeId Id of the warehouseDocumentType to get files for
     * @param {module:api/WarehouseDocumentTypeApi~getWarehouseDocumentTypeFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getWarehouseDocumentTypeFiles = function(warehouseDocumentTypeId, callback) {
      var postBody = null;

      // verify the required parameter 'warehouseDocumentTypeId' is set
      if (warehouseDocumentTypeId === undefined || warehouseDocumentTypeId === null) {
        throw new Error("Missing the required parameter 'warehouseDocumentTypeId' when calling getWarehouseDocumentTypeFiles");
      }


      var pathParams = {
        'warehouseDocumentTypeId': warehouseDocumentTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/warehouseDocumentType/{warehouseDocumentTypeId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWarehouseDocumentTypeTags operation.
     * @callback module:api/WarehouseDocumentTypeApi~getWarehouseDocumentTypeTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a warehouseDocumentType.
     * Get all existing warehouseDocumentType tags.
     * @param {Number} warehouseDocumentTypeId Id of the warehouseDocumentType to get tags for
     * @param {module:api/WarehouseDocumentTypeApi~getWarehouseDocumentTypeTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getWarehouseDocumentTypeTags = function(warehouseDocumentTypeId, callback) {
      var postBody = null;

      // verify the required parameter 'warehouseDocumentTypeId' is set
      if (warehouseDocumentTypeId === undefined || warehouseDocumentTypeId === null) {
        throw new Error("Missing the required parameter 'warehouseDocumentTypeId' when calling getWarehouseDocumentTypeTags");
      }


      var pathParams = {
        'warehouseDocumentTypeId': warehouseDocumentTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/warehouseDocumentType/{warehouseDocumentTypeId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
