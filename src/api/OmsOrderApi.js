/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/OmsOrder', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/OmsOrder'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.OmsOrderApi = factory(root.infoplus.ApiClient, root.infoplus.ApiResponse, root.infoplus.OmsOrder, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, ApiResponse, OmsOrder, RecordFile) {
  'use strict';

  /**
   * OmsOrder service.
   * @module api/OmsOrderApi
   * @version beta
   */

  /**
   * Constructs a new OmsOrderApi. 
   * @alias module:api/OmsOrderApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addOmsOrder operation.
     * @callback module:api/OmsOrderApi~addOmsOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OmsOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an omsOrder
     * Inserts a new omsOrder using the specified data.
     * @param {module:model/OmsOrder} body OmsOrder to be inserted.
     * @param {module:api/OmsOrderApi~addOmsOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OmsOrder}
     */
    this.addOmsOrder = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addOmsOrder");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OmsOrder;

      return this.apiClient.callApi(
        '/beta/omsOrder', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addOmsOrderAudit operation.
     * @callback module:api/OmsOrderApi~addOmsOrderAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for an omsOrder
     * Adds an audit to an existing omsOrder.
     * @param {Number} omsOrderId Id of the omsOrder to add an audit to
     * @param {String} omsOrderAudit The audit to add
     * @param {module:api/OmsOrderApi~addOmsOrderAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addOmsOrderAudit = function(omsOrderId, omsOrderAudit, callback) {
      var postBody = null;

      // verify the required parameter 'omsOrderId' is set
      if (omsOrderId === undefined || omsOrderId === null) {
        throw new Error("Missing the required parameter 'omsOrderId' when calling addOmsOrderAudit");
      }

      // verify the required parameter 'omsOrderAudit' is set
      if (omsOrderAudit === undefined || omsOrderAudit === null) {
        throw new Error("Missing the required parameter 'omsOrderAudit' when calling addOmsOrderAudit");
      }


      var pathParams = {
        'omsOrderId': omsOrderId,
        'omsOrderAudit': omsOrderAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/omsOrder/{omsOrderId}/audit/{omsOrderAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addOmsOrderFile operation.
     * @callback module:api/OmsOrderApi~addOmsOrderFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to an omsOrder
     * Adds a file to an existing omsOrder.
     * @param {Number} omsOrderId Id of the omsOrder to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/OmsOrderApi~addOmsOrderFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addOmsOrderFile = function(omsOrderId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'omsOrderId' is set
      if (omsOrderId === undefined || omsOrderId === null) {
        throw new Error("Missing the required parameter 'omsOrderId' when calling addOmsOrderFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addOmsOrderFile");
      }


      var pathParams = {
        'omsOrderId': omsOrderId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/omsOrder/{omsOrderId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addOmsOrderFileByURL operation.
     * @callback module:api/OmsOrderApi~addOmsOrderFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to an omsOrder by URL.
     * Adds a file to an existing omsOrder by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} omsOrderId Id of the omsOrder to add an file to
     * @param {module:api/OmsOrderApi~addOmsOrderFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addOmsOrderFileByURL = function(body, omsOrderId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addOmsOrderFileByURL");
      }

      // verify the required parameter 'omsOrderId' is set
      if (omsOrderId === undefined || omsOrderId === null) {
        throw new Error("Missing the required parameter 'omsOrderId' when calling addOmsOrderFileByURL");
      }


      var pathParams = {
        'omsOrderId': omsOrderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/omsOrder/{omsOrderId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addOmsOrderTag operation.
     * @callback module:api/OmsOrderApi~addOmsOrderTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for an omsOrder.
     * Adds a tag to an existing omsOrder.
     * @param {Number} omsOrderId Id of the omsOrder to add a tag to
     * @param {String} omsOrderTag The tag to add
     * @param {module:api/OmsOrderApi~addOmsOrderTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addOmsOrderTag = function(omsOrderId, omsOrderTag, callback) {
      var postBody = null;

      // verify the required parameter 'omsOrderId' is set
      if (omsOrderId === undefined || omsOrderId === null) {
        throw new Error("Missing the required parameter 'omsOrderId' when calling addOmsOrderTag");
      }

      // verify the required parameter 'omsOrderTag' is set
      if (omsOrderTag === undefined || omsOrderTag === null) {
        throw new Error("Missing the required parameter 'omsOrderTag' when calling addOmsOrderTag");
      }


      var pathParams = {
        'omsOrderId': omsOrderId,
        'omsOrderTag': omsOrderTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/omsOrder/{omsOrderId}/tag/{omsOrderTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOmsOrderFile operation.
     * @callback module:api/OmsOrderApi~deleteOmsOrderFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for an omsOrder.
     * Deletes an existing omsOrder file using the specified data.
     * @param {Number} omsOrderId Id of the omsOrder to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/OmsOrderApi~deleteOmsOrderFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOmsOrderFile = function(omsOrderId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'omsOrderId' is set
      if (omsOrderId === undefined || omsOrderId === null) {
        throw new Error("Missing the required parameter 'omsOrderId' when calling deleteOmsOrderFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteOmsOrderFile");
      }


      var pathParams = {
        'omsOrderId': omsOrderId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/omsOrder/{omsOrderId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOmsOrderTag operation.
     * @callback module:api/OmsOrderApi~deleteOmsOrderTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for an omsOrder.
     * Deletes an existing omsOrder tag using the specified data.
     * @param {Number} omsOrderId Id of the omsOrder to remove tag from
     * @param {String} omsOrderTag The tag to delete
     * @param {module:api/OmsOrderApi~deleteOmsOrderTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOmsOrderTag = function(omsOrderId, omsOrderTag, callback) {
      var postBody = null;

      // verify the required parameter 'omsOrderId' is set
      if (omsOrderId === undefined || omsOrderId === null) {
        throw new Error("Missing the required parameter 'omsOrderId' when calling deleteOmsOrderTag");
      }

      // verify the required parameter 'omsOrderTag' is set
      if (omsOrderTag === undefined || omsOrderTag === null) {
        throw new Error("Missing the required parameter 'omsOrderTag' when calling deleteOmsOrderTag");
      }


      var pathParams = {
        'omsOrderId': omsOrderId,
        'omsOrderTag': omsOrderTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/omsOrder/{omsOrderId}/tag/{omsOrderTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateOmsOrderById operation.
     * @callback module:api/OmsOrderApi~getDuplicateOmsOrderByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OmsOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated an omsOrder by id
     * Returns a duplicated omsOrder identified by the specified id.
     * @param {Number} omsOrderId Id of the omsOrder to be duplicated.
     * @param {module:api/OmsOrderApi~getDuplicateOmsOrderByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OmsOrder}
     */
    this.getDuplicateOmsOrderById = function(omsOrderId, callback) {
      var postBody = null;

      // verify the required parameter 'omsOrderId' is set
      if (omsOrderId === undefined || omsOrderId === null) {
        throw new Error("Missing the required parameter 'omsOrderId' when calling getDuplicateOmsOrderById");
      }


      var pathParams = {
        'omsOrderId': omsOrderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = OmsOrder;

      return this.apiClient.callApi(
        '/beta/omsOrder/duplicate/{omsOrderId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOmsOrderByFilter operation.
     * @callback module:api/OmsOrderApi~getOmsOrderByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OmsOrder>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search omsOrders by filter
     * Returns the list of omsOrders that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/OmsOrderApi~getOmsOrderByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OmsOrder>}
     */
    this.getOmsOrderByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [OmsOrder];

      return this.apiClient.callApi(
        '/beta/omsOrder/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOmsOrderById operation.
     * @callback module:api/OmsOrderApi~getOmsOrderByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OmsOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an omsOrder by id
     * Returns the omsOrder identified by the specified id.
     * @param {Number} omsOrderId Id of the omsOrder to be returned.
     * @param {module:api/OmsOrderApi~getOmsOrderByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OmsOrder}
     */
    this.getOmsOrderById = function(omsOrderId, callback) {
      var postBody = null;

      // verify the required parameter 'omsOrderId' is set
      if (omsOrderId === undefined || omsOrderId === null) {
        throw new Error("Missing the required parameter 'omsOrderId' when calling getOmsOrderById");
      }


      var pathParams = {
        'omsOrderId': omsOrderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = OmsOrder;

      return this.apiClient.callApi(
        '/beta/omsOrder/{omsOrderId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOmsOrderFiles operation.
     * @callback module:api/OmsOrderApi~getOmsOrderFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for an omsOrder.
     * Get all existing omsOrder files.
     * @param {Number} omsOrderId Id of the omsOrder to get files for
     * @param {module:api/OmsOrderApi~getOmsOrderFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getOmsOrderFiles = function(omsOrderId, callback) {
      var postBody = null;

      // verify the required parameter 'omsOrderId' is set
      if (omsOrderId === undefined || omsOrderId === null) {
        throw new Error("Missing the required parameter 'omsOrderId' when calling getOmsOrderFiles");
      }


      var pathParams = {
        'omsOrderId': omsOrderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/omsOrder/{omsOrderId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOmsOrderTags operation.
     * @callback module:api/OmsOrderApi~getOmsOrderTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for an omsOrder.
     * Get all existing omsOrder tags.
     * @param {Number} omsOrderId Id of the omsOrder to get tags for
     * @param {module:api/OmsOrderApi~getOmsOrderTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getOmsOrderTags = function(omsOrderId, callback) {
      var postBody = null;

      // verify the required parameter 'omsOrderId' is set
      if (omsOrderId === undefined || omsOrderId === null) {
        throw new Error("Missing the required parameter 'omsOrderId' when calling getOmsOrderTags");
      }


      var pathParams = {
        'omsOrderId': omsOrderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/omsOrder/{omsOrderId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOmsOrder operation.
     * @callback module:api/OmsOrderApi~updateOmsOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an omsOrder
     * Updates an existing omsOrder using the specified data.
     * @param {module:model/OmsOrder} body OmsOrder to be updated.
     * @param {module:api/OmsOrderApi~updateOmsOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateOmsOrder = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateOmsOrder");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/omsOrder', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOmsOrderCustomFields operation.
     * @callback module:api/OmsOrderApi~updateOmsOrderCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an omsOrder custom fields
     * Updates an existing omsOrder custom fields using the specified data.
     * @param {module:model/OmsOrder} body OmsOrder to be updated.
     * @param {module:api/OmsOrderApi~updateOmsOrderCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateOmsOrderCustomFields = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateOmsOrderCustomFields");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/omsOrder/customFields', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
