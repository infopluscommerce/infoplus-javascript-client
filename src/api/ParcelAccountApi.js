/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/ParcelAccount', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/ParcelAccount'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.ParcelAccountApi = factory(root.infoplus.ApiClient, root.infoplus.ApiResponse, root.infoplus.ParcelAccount, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, ApiResponse, ParcelAccount, RecordFile) {
  'use strict';

  /**
   * ParcelAccount service.
   * @module api/ParcelAccountApi
   * @version beta
   */

  /**
   * Constructs a new ParcelAccountApi. 
   * @alias module:api/ParcelAccountApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addParcelAccount operation.
     * @callback module:api/ParcelAccountApi~addParcelAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ParcelAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a parcelAccount
     * Inserts a new parcelAccount using the specified data.
     * @param {module:model/ParcelAccount} body ParcelAccount to be inserted.
     * @param {module:api/ParcelAccountApi~addParcelAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ParcelAccount}
     */
    this.addParcelAccount = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addParcelAccount");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ParcelAccount;

      return this.apiClient.callApi(
        '/beta/parcelAccount', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addParcelAccountAudit operation.
     * @callback module:api/ParcelAccountApi~addParcelAccountAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a parcelAccount
     * Adds an audit to an existing parcelAccount.
     * @param {Number} parcelAccountId Id of the parcelAccount to add an audit to
     * @param {String} parcelAccountAudit The audit to add
     * @param {module:api/ParcelAccountApi~addParcelAccountAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addParcelAccountAudit = function(parcelAccountId, parcelAccountAudit, callback) {
      var postBody = null;

      // verify the required parameter 'parcelAccountId' is set
      if (parcelAccountId === undefined || parcelAccountId === null) {
        throw new Error("Missing the required parameter 'parcelAccountId' when calling addParcelAccountAudit");
      }

      // verify the required parameter 'parcelAccountAudit' is set
      if (parcelAccountAudit === undefined || parcelAccountAudit === null) {
        throw new Error("Missing the required parameter 'parcelAccountAudit' when calling addParcelAccountAudit");
      }


      var pathParams = {
        'parcelAccountId': parcelAccountId,
        'parcelAccountAudit': parcelAccountAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/parcelAccount/{parcelAccountId}/audit/{parcelAccountAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addParcelAccountFile operation.
     * @callback module:api/ParcelAccountApi~addParcelAccountFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a parcelAccount
     * Adds a file to an existing parcelAccount.
     * @param {Number} parcelAccountId Id of the parcelAccount to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/ParcelAccountApi~addParcelAccountFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addParcelAccountFile = function(parcelAccountId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'parcelAccountId' is set
      if (parcelAccountId === undefined || parcelAccountId === null) {
        throw new Error("Missing the required parameter 'parcelAccountId' when calling addParcelAccountFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addParcelAccountFile");
      }


      var pathParams = {
        'parcelAccountId': parcelAccountId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/parcelAccount/{parcelAccountId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addParcelAccountFileByURL operation.
     * @callback module:api/ParcelAccountApi~addParcelAccountFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a parcelAccount by URL.
     * Adds a file to an existing parcelAccount by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} parcelAccountId Id of the parcelAccount to add an file to
     * @param {module:api/ParcelAccountApi~addParcelAccountFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addParcelAccountFileByURL = function(body, parcelAccountId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addParcelAccountFileByURL");
      }

      // verify the required parameter 'parcelAccountId' is set
      if (parcelAccountId === undefined || parcelAccountId === null) {
        throw new Error("Missing the required parameter 'parcelAccountId' when calling addParcelAccountFileByURL");
      }


      var pathParams = {
        'parcelAccountId': parcelAccountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/parcelAccount/{parcelAccountId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addParcelAccountTag operation.
     * @callback module:api/ParcelAccountApi~addParcelAccountTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a parcelAccount.
     * Adds a tag to an existing parcelAccount.
     * @param {Number} parcelAccountId Id of the parcelAccount to add a tag to
     * @param {String} parcelAccountTag The tag to add
     * @param {module:api/ParcelAccountApi~addParcelAccountTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addParcelAccountTag = function(parcelAccountId, parcelAccountTag, callback) {
      var postBody = null;

      // verify the required parameter 'parcelAccountId' is set
      if (parcelAccountId === undefined || parcelAccountId === null) {
        throw new Error("Missing the required parameter 'parcelAccountId' when calling addParcelAccountTag");
      }

      // verify the required parameter 'parcelAccountTag' is set
      if (parcelAccountTag === undefined || parcelAccountTag === null) {
        throw new Error("Missing the required parameter 'parcelAccountTag' when calling addParcelAccountTag");
      }


      var pathParams = {
        'parcelAccountId': parcelAccountId,
        'parcelAccountTag': parcelAccountTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/parcelAccount/{parcelAccountId}/tag/{parcelAccountTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteParcelAccountFile operation.
     * @callback module:api/ParcelAccountApi~deleteParcelAccountFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a parcelAccount.
     * Deletes an existing parcelAccount file using the specified data.
     * @param {Number} parcelAccountId Id of the parcelAccount to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/ParcelAccountApi~deleteParcelAccountFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteParcelAccountFile = function(parcelAccountId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'parcelAccountId' is set
      if (parcelAccountId === undefined || parcelAccountId === null) {
        throw new Error("Missing the required parameter 'parcelAccountId' when calling deleteParcelAccountFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteParcelAccountFile");
      }


      var pathParams = {
        'parcelAccountId': parcelAccountId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/parcelAccount/{parcelAccountId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteParcelAccountTag operation.
     * @callback module:api/ParcelAccountApi~deleteParcelAccountTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a parcelAccount.
     * Deletes an existing parcelAccount tag using the specified data.
     * @param {Number} parcelAccountId Id of the parcelAccount to remove tag from
     * @param {String} parcelAccountTag The tag to delete
     * @param {module:api/ParcelAccountApi~deleteParcelAccountTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteParcelAccountTag = function(parcelAccountId, parcelAccountTag, callback) {
      var postBody = null;

      // verify the required parameter 'parcelAccountId' is set
      if (parcelAccountId === undefined || parcelAccountId === null) {
        throw new Error("Missing the required parameter 'parcelAccountId' when calling deleteParcelAccountTag");
      }

      // verify the required parameter 'parcelAccountTag' is set
      if (parcelAccountTag === undefined || parcelAccountTag === null) {
        throw new Error("Missing the required parameter 'parcelAccountTag' when calling deleteParcelAccountTag");
      }


      var pathParams = {
        'parcelAccountId': parcelAccountId,
        'parcelAccountTag': parcelAccountTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/parcelAccount/{parcelAccountId}/tag/{parcelAccountTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateParcelAccountById operation.
     * @callback module:api/ParcelAccountApi~getDuplicateParcelAccountByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ParcelAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a parcelAccount by id
     * Returns a duplicated parcelAccount identified by the specified id.
     * @param {Number} parcelAccountId Id of the parcelAccount to be duplicated.
     * @param {module:api/ParcelAccountApi~getDuplicateParcelAccountByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ParcelAccount}
     */
    this.getDuplicateParcelAccountById = function(parcelAccountId, callback) {
      var postBody = null;

      // verify the required parameter 'parcelAccountId' is set
      if (parcelAccountId === undefined || parcelAccountId === null) {
        throw new Error("Missing the required parameter 'parcelAccountId' when calling getDuplicateParcelAccountById");
      }


      var pathParams = {
        'parcelAccountId': parcelAccountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ParcelAccount;

      return this.apiClient.callApi(
        '/beta/parcelAccount/duplicate/{parcelAccountId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getParcelAccountByFilter operation.
     * @callback module:api/ParcelAccountApi~getParcelAccountByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ParcelAccount>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search parcelAccounts by filter
     * Returns the list of parcelAccounts that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/ParcelAccountApi~getParcelAccountByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ParcelAccount>}
     */
    this.getParcelAccountByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ParcelAccount];

      return this.apiClient.callApi(
        '/beta/parcelAccount/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getParcelAccountById operation.
     * @callback module:api/ParcelAccountApi~getParcelAccountByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ParcelAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a parcelAccount by id
     * Returns the parcelAccount identified by the specified id.
     * @param {Number} parcelAccountId Id of the parcelAccount to be returned.
     * @param {module:api/ParcelAccountApi~getParcelAccountByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ParcelAccount}
     */
    this.getParcelAccountById = function(parcelAccountId, callback) {
      var postBody = null;

      // verify the required parameter 'parcelAccountId' is set
      if (parcelAccountId === undefined || parcelAccountId === null) {
        throw new Error("Missing the required parameter 'parcelAccountId' when calling getParcelAccountById");
      }


      var pathParams = {
        'parcelAccountId': parcelAccountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ParcelAccount;

      return this.apiClient.callApi(
        '/beta/parcelAccount/{parcelAccountId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getParcelAccountFiles operation.
     * @callback module:api/ParcelAccountApi~getParcelAccountFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a parcelAccount.
     * Get all existing parcelAccount files.
     * @param {Number} parcelAccountId Id of the parcelAccount to get files for
     * @param {module:api/ParcelAccountApi~getParcelAccountFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getParcelAccountFiles = function(parcelAccountId, callback) {
      var postBody = null;

      // verify the required parameter 'parcelAccountId' is set
      if (parcelAccountId === undefined || parcelAccountId === null) {
        throw new Error("Missing the required parameter 'parcelAccountId' when calling getParcelAccountFiles");
      }


      var pathParams = {
        'parcelAccountId': parcelAccountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/parcelAccount/{parcelAccountId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getParcelAccountTags operation.
     * @callback module:api/ParcelAccountApi~getParcelAccountTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a parcelAccount.
     * Get all existing parcelAccount tags.
     * @param {Number} parcelAccountId Id of the parcelAccount to get tags for
     * @param {module:api/ParcelAccountApi~getParcelAccountTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getParcelAccountTags = function(parcelAccountId, callback) {
      var postBody = null;

      // verify the required parameter 'parcelAccountId' is set
      if (parcelAccountId === undefined || parcelAccountId === null) {
        throw new Error("Missing the required parameter 'parcelAccountId' when calling getParcelAccountTags");
      }


      var pathParams = {
        'parcelAccountId': parcelAccountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/parcelAccount/{parcelAccountId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateParcelAccount operation.
     * @callback module:api/ParcelAccountApi~updateParcelAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a parcelAccount
     * Updates an existing parcelAccount using the specified data.
     * @param {module:model/ParcelAccount} body ParcelAccount to be updated.
     * @param {module:api/ParcelAccountApi~updateParcelAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateParcelAccount = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateParcelAccount");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/parcelAccount', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateParcelAccountCustomFields operation.
     * @callback module:api/ParcelAccountApi~updateParcelAccountCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a parcelAccount custom fields
     * Updates an existing parcelAccount custom fields using the specified data.
     * @param {module:model/ParcelAccount} body ParcelAccount to be updated.
     * @param {module:api/ParcelAccountApi~updateParcelAccountCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateParcelAccountCustomFields = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateParcelAccountCustomFields");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/parcelAccount/customFields', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
