/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/Cart', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/Cart'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.CartApi = factory(root.infoplus.ApiClient, root.infoplus.ApiResponse, root.infoplus.Cart, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, ApiResponse, Cart, RecordFile) {
  'use strict';

  /**
   * Cart service.
   * @module api/CartApi
   * @version beta
   */

  /**
   * Constructs a new CartApi. 
   * @alias module:api/CartApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addCart operation.
     * @callback module:api/CartApi~addCartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cart} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a cart
     * Inserts a new cart using the specified data.
     * @param {module:model/Cart} body Cart to be inserted.
     * @param {module:api/CartApi~addCartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cart}
     */
    this.addCart = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addCart");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Cart;

      return this.apiClient.callApi(
        '/beta/cart', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addCartAudit operation.
     * @callback module:api/CartApi~addCartAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a cart
     * Adds an audit to an existing cart.
     * @param {Number} cartId Id of the cart to add an audit to
     * @param {String} cartAudit The audit to add
     * @param {module:api/CartApi~addCartAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addCartAudit = function(cartId, cartAudit, callback) {
      var postBody = null;

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling addCartAudit");
      }

      // verify the required parameter 'cartAudit' is set
      if (cartAudit === undefined || cartAudit === null) {
        throw new Error("Missing the required parameter 'cartAudit' when calling addCartAudit");
      }


      var pathParams = {
        'cartId': cartId,
        'cartAudit': cartAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/cart/{cartId}/audit/{cartAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addCartFile operation.
     * @callback module:api/CartApi~addCartFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a cart
     * Adds a file to an existing cart.
     * @param {Number} cartId Id of the cart to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/CartApi~addCartFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addCartFile = function(cartId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling addCartFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addCartFile");
      }


      var pathParams = {
        'cartId': cartId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/cart/{cartId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addCartFileByURL operation.
     * @callback module:api/CartApi~addCartFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a cart by URL.
     * Adds a file to an existing cart by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} cartId Id of the cart to add an file to
     * @param {module:api/CartApi~addCartFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addCartFileByURL = function(body, cartId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addCartFileByURL");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling addCartFileByURL");
      }


      var pathParams = {
        'cartId': cartId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/cart/{cartId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addCartTag operation.
     * @callback module:api/CartApi~addCartTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a cart.
     * Adds a tag to an existing cart.
     * @param {Number} cartId Id of the cart to add a tag to
     * @param {String} cartTag The tag to add
     * @param {module:api/CartApi~addCartTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addCartTag = function(cartId, cartTag, callback) {
      var postBody = null;

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling addCartTag");
      }

      // verify the required parameter 'cartTag' is set
      if (cartTag === undefined || cartTag === null) {
        throw new Error("Missing the required parameter 'cartTag' when calling addCartTag");
      }


      var pathParams = {
        'cartId': cartId,
        'cartTag': cartTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/cart/{cartId}/tag/{cartTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCart operation.
     * @callback module:api/CartApi~deleteCartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a cart
     * Deletes the cart identified by the specified id.
     * @param {Number} cartId Id of the cart to be deleted.
     * @param {module:api/CartApi~deleteCartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCart = function(cartId, callback) {
      var postBody = null;

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling deleteCart");
      }


      var pathParams = {
        'cartId': cartId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/cart/{cartId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCartFile operation.
     * @callback module:api/CartApi~deleteCartFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a cart.
     * Deletes an existing cart file using the specified data.
     * @param {Number} cartId Id of the cart to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/CartApi~deleteCartFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCartFile = function(cartId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling deleteCartFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteCartFile");
      }


      var pathParams = {
        'cartId': cartId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/cart/{cartId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCartTag operation.
     * @callback module:api/CartApi~deleteCartTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a cart.
     * Deletes an existing cart tag using the specified data.
     * @param {Number} cartId Id of the cart to remove tag from
     * @param {String} cartTag The tag to delete
     * @param {module:api/CartApi~deleteCartTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCartTag = function(cartId, cartTag, callback) {
      var postBody = null;

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling deleteCartTag");
      }

      // verify the required parameter 'cartTag' is set
      if (cartTag === undefined || cartTag === null) {
        throw new Error("Missing the required parameter 'cartTag' when calling deleteCartTag");
      }


      var pathParams = {
        'cartId': cartId,
        'cartTag': cartTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/cart/{cartId}/tag/{cartTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCartByFilter operation.
     * @callback module:api/CartApi~getCartByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Cart>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search carts by filter
     * Returns the list of carts that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/CartApi~getCartByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Cart>}
     */
    this.getCartByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Cart];

      return this.apiClient.callApi(
        '/beta/cart/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCartById operation.
     * @callback module:api/CartApi~getCartByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cart} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a cart by id
     * Returns the cart identified by the specified id.
     * @param {Number} cartId Id of the cart to be returned.
     * @param {module:api/CartApi~getCartByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cart}
     */
    this.getCartById = function(cartId, callback) {
      var postBody = null;

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling getCartById");
      }


      var pathParams = {
        'cartId': cartId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Cart;

      return this.apiClient.callApi(
        '/beta/cart/{cartId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCartFiles operation.
     * @callback module:api/CartApi~getCartFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a cart.
     * Get all existing cart files.
     * @param {Number} cartId Id of the cart to get files for
     * @param {module:api/CartApi~getCartFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getCartFiles = function(cartId, callback) {
      var postBody = null;

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling getCartFiles");
      }


      var pathParams = {
        'cartId': cartId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/cart/{cartId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCartTags operation.
     * @callback module:api/CartApi~getCartTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a cart.
     * Get all existing cart tags.
     * @param {Number} cartId Id of the cart to get tags for
     * @param {module:api/CartApi~getCartTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getCartTags = function(cartId, callback) {
      var postBody = null;

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling getCartTags");
      }


      var pathParams = {
        'cartId': cartId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/cart/{cartId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateCartById operation.
     * @callback module:api/CartApi~getDuplicateCartByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cart} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a cart by id
     * Returns a duplicated cart identified by the specified id.
     * @param {Number} cartId Id of the cart to be duplicated.
     * @param {module:api/CartApi~getDuplicateCartByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cart}
     */
    this.getDuplicateCartById = function(cartId, callback) {
      var postBody = null;

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling getDuplicateCartById");
      }


      var pathParams = {
        'cartId': cartId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Cart;

      return this.apiClient.callApi(
        '/beta/cart/duplicate/{cartId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCart operation.
     * @callback module:api/CartApi~updateCartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a cart
     * Updates an existing cart using the specified data.
     * @param {module:model/Cart} body Cart to be updated.
     * @param {module:api/CartApi~updateCartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateCart = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCart");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/cart', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
