/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/LegacyLowstockContact', 'model/RecordFile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/LegacyLowstockContact'), require('../model/RecordFile'));
  } else {
    // Browser globals (root is window)
    if (!root.infoplus) {
      root.infoplus = {};
    }
    root.infoplus.LegacyLowstockContactApi = factory(root.infoplus.ApiClient, root.infoplus.ApiResponse, root.infoplus.LegacyLowstockContact, root.infoplus.RecordFile);
  }
}(this, function(ApiClient, ApiResponse, LegacyLowstockContact, RecordFile) {
  'use strict';

  /**
   * LegacyLowstockContact service.
   * @module api/LegacyLowstockContactApi
   * @version beta
   */

  /**
   * Constructs a new LegacyLowstockContactApi. 
   * @alias module:api/LegacyLowstockContactApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addLegacyLowstockContact operation.
     * @callback module:api/LegacyLowstockContactApi~addLegacyLowstockContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LegacyLowstockContact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a legacyLowstockContact
     * Inserts a new legacyLowstockContact using the specified data.
     * @param {module:model/LegacyLowstockContact} body LegacyLowstockContact to be inserted.
     * @param {module:api/LegacyLowstockContactApi~addLegacyLowstockContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LegacyLowstockContact}
     */
    this.addLegacyLowstockContact = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addLegacyLowstockContact");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LegacyLowstockContact;

      return this.apiClient.callApi(
        '/beta/legacyLowstockContact', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addLegacyLowstockContactAudit operation.
     * @callback module:api/LegacyLowstockContactApi~addLegacyLowstockContactAuditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audit for a legacyLowstockContact
     * Adds an audit to an existing legacyLowstockContact.
     * @param {Number} legacyLowstockContactId Id of the legacyLowstockContact to add an audit to
     * @param {String} legacyLowstockContactAudit The audit to add
     * @param {module:api/LegacyLowstockContactApi~addLegacyLowstockContactAuditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addLegacyLowstockContactAudit = function(legacyLowstockContactId, legacyLowstockContactAudit, callback) {
      var postBody = null;

      // verify the required parameter 'legacyLowstockContactId' is set
      if (legacyLowstockContactId === undefined || legacyLowstockContactId === null) {
        throw new Error("Missing the required parameter 'legacyLowstockContactId' when calling addLegacyLowstockContactAudit");
      }

      // verify the required parameter 'legacyLowstockContactAudit' is set
      if (legacyLowstockContactAudit === undefined || legacyLowstockContactAudit === null) {
        throw new Error("Missing the required parameter 'legacyLowstockContactAudit' when calling addLegacyLowstockContactAudit");
      }


      var pathParams = {
        'legacyLowstockContactId': legacyLowstockContactId,
        'legacyLowstockContactAudit': legacyLowstockContactAudit
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/legacyLowstockContact/{legacyLowstockContactId}/audit/{legacyLowstockContactAudit}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addLegacyLowstockContactFile operation.
     * @callback module:api/LegacyLowstockContactApi~addLegacyLowstockContactFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a legacyLowstockContact
     * Adds a file to an existing legacyLowstockContact.
     * @param {Number} legacyLowstockContactId Id of the legacyLowstockContact to add a file to
     * @param {String} fileName Name of file
     * @param {module:api/LegacyLowstockContactApi~addLegacyLowstockContactFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addLegacyLowstockContactFile = function(legacyLowstockContactId, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'legacyLowstockContactId' is set
      if (legacyLowstockContactId === undefined || legacyLowstockContactId === null) {
        throw new Error("Missing the required parameter 'legacyLowstockContactId' when calling addLegacyLowstockContactFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling addLegacyLowstockContactFile");
      }


      var pathParams = {
        'legacyLowstockContactId': legacyLowstockContactId,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/legacyLowstockContact/{legacyLowstockContactId}/file/{fileName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addLegacyLowstockContactFileByURL operation.
     * @callback module:api/LegacyLowstockContactApi~addLegacyLowstockContactFileByURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file to a legacyLowstockContact by URL.
     * Adds a file to an existing legacyLowstockContact by URL.
     * @param {module:model/RecordFile} body The url and optionly fileName to be used.
     * @param {Number} legacyLowstockContactId Id of the legacyLowstockContact to add an file to
     * @param {module:api/LegacyLowstockContactApi~addLegacyLowstockContactFileByURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addLegacyLowstockContactFileByURL = function(body, legacyLowstockContactId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addLegacyLowstockContactFileByURL");
      }

      // verify the required parameter 'legacyLowstockContactId' is set
      if (legacyLowstockContactId === undefined || legacyLowstockContactId === null) {
        throw new Error("Missing the required parameter 'legacyLowstockContactId' when calling addLegacyLowstockContactFileByURL");
      }


      var pathParams = {
        'legacyLowstockContactId': legacyLowstockContactId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/legacyLowstockContact/{legacyLowstockContactId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addLegacyLowstockContactTag operation.
     * @callback module:api/LegacyLowstockContactApi~addLegacyLowstockContactTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new tags for a legacyLowstockContact.
     * Adds a tag to an existing legacyLowstockContact.
     * @param {Number} legacyLowstockContactId Id of the legacyLowstockContact to add a tag to
     * @param {String} legacyLowstockContactTag The tag to add
     * @param {module:api/LegacyLowstockContactApi~addLegacyLowstockContactTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addLegacyLowstockContactTag = function(legacyLowstockContactId, legacyLowstockContactTag, callback) {
      var postBody = null;

      // verify the required parameter 'legacyLowstockContactId' is set
      if (legacyLowstockContactId === undefined || legacyLowstockContactId === null) {
        throw new Error("Missing the required parameter 'legacyLowstockContactId' when calling addLegacyLowstockContactTag");
      }

      // verify the required parameter 'legacyLowstockContactTag' is set
      if (legacyLowstockContactTag === undefined || legacyLowstockContactTag === null) {
        throw new Error("Missing the required parameter 'legacyLowstockContactTag' when calling addLegacyLowstockContactTag");
      }


      var pathParams = {
        'legacyLowstockContactId': legacyLowstockContactId,
        'legacyLowstockContactTag': legacyLowstockContactTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/legacyLowstockContact/{legacyLowstockContactId}/tag/{legacyLowstockContactTag}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLegacyLowstockContact operation.
     * @callback module:api/LegacyLowstockContactApi~deleteLegacyLowstockContactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a legacyLowstockContact
     * Deletes the legacyLowstockContact identified by the specified id.
     * @param {Number} legacyLowstockContactId Id of the legacyLowstockContact to be deleted.
     * @param {module:api/LegacyLowstockContactApi~deleteLegacyLowstockContactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLegacyLowstockContact = function(legacyLowstockContactId, callback) {
      var postBody = null;

      // verify the required parameter 'legacyLowstockContactId' is set
      if (legacyLowstockContactId === undefined || legacyLowstockContactId === null) {
        throw new Error("Missing the required parameter 'legacyLowstockContactId' when calling deleteLegacyLowstockContact");
      }


      var pathParams = {
        'legacyLowstockContactId': legacyLowstockContactId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/legacyLowstockContact/{legacyLowstockContactId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLegacyLowstockContactFile operation.
     * @callback module:api/LegacyLowstockContactApi~deleteLegacyLowstockContactFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file for a legacyLowstockContact.
     * Deletes an existing legacyLowstockContact file using the specified data.
     * @param {Number} legacyLowstockContactId Id of the legacyLowstockContact to remove file from
     * @param {Number} fileId Id of the file to delete
     * @param {module:api/LegacyLowstockContactApi~deleteLegacyLowstockContactFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLegacyLowstockContactFile = function(legacyLowstockContactId, fileId, callback) {
      var postBody = null;

      // verify the required parameter 'legacyLowstockContactId' is set
      if (legacyLowstockContactId === undefined || legacyLowstockContactId === null) {
        throw new Error("Missing the required parameter 'legacyLowstockContactId' when calling deleteLegacyLowstockContactFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteLegacyLowstockContactFile");
      }


      var pathParams = {
        'legacyLowstockContactId': legacyLowstockContactId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/legacyLowstockContact/{legacyLowstockContactId}/file/{fileId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLegacyLowstockContactTag operation.
     * @callback module:api/LegacyLowstockContactApi~deleteLegacyLowstockContactTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag for a legacyLowstockContact.
     * Deletes an existing legacyLowstockContact tag using the specified data.
     * @param {Number} legacyLowstockContactId Id of the legacyLowstockContact to remove tag from
     * @param {String} legacyLowstockContactTag The tag to delete
     * @param {module:api/LegacyLowstockContactApi~deleteLegacyLowstockContactTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLegacyLowstockContactTag = function(legacyLowstockContactId, legacyLowstockContactTag, callback) {
      var postBody = null;

      // verify the required parameter 'legacyLowstockContactId' is set
      if (legacyLowstockContactId === undefined || legacyLowstockContactId === null) {
        throw new Error("Missing the required parameter 'legacyLowstockContactId' when calling deleteLegacyLowstockContactTag");
      }

      // verify the required parameter 'legacyLowstockContactTag' is set
      if (legacyLowstockContactTag === undefined || legacyLowstockContactTag === null) {
        throw new Error("Missing the required parameter 'legacyLowstockContactTag' when calling deleteLegacyLowstockContactTag");
      }


      var pathParams = {
        'legacyLowstockContactId': legacyLowstockContactId,
        'legacyLowstockContactTag': legacyLowstockContactTag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/legacyLowstockContact/{legacyLowstockContactId}/tag/{legacyLowstockContactTag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDuplicateLegacyLowstockContactById operation.
     * @callback module:api/LegacyLowstockContactApi~getDuplicateLegacyLowstockContactByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LegacyLowstockContact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a duplicated a legacyLowstockContact by id
     * Returns a duplicated legacyLowstockContact identified by the specified id.
     * @param {Number} legacyLowstockContactId Id of the legacyLowstockContact to be duplicated.
     * @param {module:api/LegacyLowstockContactApi~getDuplicateLegacyLowstockContactByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LegacyLowstockContact}
     */
    this.getDuplicateLegacyLowstockContactById = function(legacyLowstockContactId, callback) {
      var postBody = null;

      // verify the required parameter 'legacyLowstockContactId' is set
      if (legacyLowstockContactId === undefined || legacyLowstockContactId === null) {
        throw new Error("Missing the required parameter 'legacyLowstockContactId' when calling getDuplicateLegacyLowstockContactById");
      }


      var pathParams = {
        'legacyLowstockContactId': legacyLowstockContactId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LegacyLowstockContact;

      return this.apiClient.callApi(
        '/beta/legacyLowstockContact/duplicate/{legacyLowstockContactId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLegacyLowstockContactByFilter operation.
     * @callback module:api/LegacyLowstockContactApi~getLegacyLowstockContactByFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LegacyLowstockContact>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search legacyLowstockContacts by filter
     * Returns the list of legacyLowstockContacts that match the given filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Query string, used to filter results.
     * @param {Number} opts.page Result page number.  Defaults to 1.
     * @param {Number} opts.limit Maximum results per page.  Defaults to 20.  Max allowed value is 250.
     * @param {String} opts.sort Sort results by specified field.
     * @param {module:api/LegacyLowstockContactApi~getLegacyLowstockContactByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LegacyLowstockContact>}
     */
    this.getLegacyLowstockContactByFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [LegacyLowstockContact];

      return this.apiClient.callApi(
        '/beta/legacyLowstockContact/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLegacyLowstockContactById operation.
     * @callback module:api/LegacyLowstockContactApi~getLegacyLowstockContactByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LegacyLowstockContact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a legacyLowstockContact by id
     * Returns the legacyLowstockContact identified by the specified id.
     * @param {Number} legacyLowstockContactId Id of the legacyLowstockContact to be returned.
     * @param {module:api/LegacyLowstockContactApi~getLegacyLowstockContactByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LegacyLowstockContact}
     */
    this.getLegacyLowstockContactById = function(legacyLowstockContactId, callback) {
      var postBody = null;

      // verify the required parameter 'legacyLowstockContactId' is set
      if (legacyLowstockContactId === undefined || legacyLowstockContactId === null) {
        throw new Error("Missing the required parameter 'legacyLowstockContactId' when calling getLegacyLowstockContactById");
      }


      var pathParams = {
        'legacyLowstockContactId': legacyLowstockContactId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LegacyLowstockContact;

      return this.apiClient.callApi(
        '/beta/legacyLowstockContact/{legacyLowstockContactId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLegacyLowstockContactFiles operation.
     * @callback module:api/LegacyLowstockContactApi~getLegacyLowstockContactFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the files for a legacyLowstockContact.
     * Get all existing legacyLowstockContact files.
     * @param {Number} legacyLowstockContactId Id of the legacyLowstockContact to get files for
     * @param {module:api/LegacyLowstockContactApi~getLegacyLowstockContactFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getLegacyLowstockContactFiles = function(legacyLowstockContactId, callback) {
      var postBody = null;

      // verify the required parameter 'legacyLowstockContactId' is set
      if (legacyLowstockContactId === undefined || legacyLowstockContactId === null) {
        throw new Error("Missing the required parameter 'legacyLowstockContactId' when calling getLegacyLowstockContactFiles");
      }


      var pathParams = {
        'legacyLowstockContactId': legacyLowstockContactId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/legacyLowstockContact/{legacyLowstockContactId}/file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLegacyLowstockContactTags operation.
     * @callback module:api/LegacyLowstockContactApi~getLegacyLowstockContactTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tags for a legacyLowstockContact.
     * Get all existing legacyLowstockContact tags.
     * @param {Number} legacyLowstockContactId Id of the legacyLowstockContact to get tags for
     * @param {module:api/LegacyLowstockContactApi~getLegacyLowstockContactTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getLegacyLowstockContactTags = function(legacyLowstockContactId, callback) {
      var postBody = null;

      // verify the required parameter 'legacyLowstockContactId' is set
      if (legacyLowstockContactId === undefined || legacyLowstockContactId === null) {
        throw new Error("Missing the required parameter 'legacyLowstockContactId' when calling getLegacyLowstockContactTags");
      }


      var pathParams = {
        'legacyLowstockContactId': legacyLowstockContactId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/legacyLowstockContact/{legacyLowstockContactId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLegacyLowstockContact operation.
     * @callback module:api/LegacyLowstockContactApi~updateLegacyLowstockContactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a legacyLowstockContact
     * Updates an existing legacyLowstockContact using the specified data.
     * @param {module:model/LegacyLowstockContact} body LegacyLowstockContact to be updated.
     * @param {module:api/LegacyLowstockContactApi~updateLegacyLowstockContactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateLegacyLowstockContact = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateLegacyLowstockContact");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/beta/legacyLowstockContact', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
