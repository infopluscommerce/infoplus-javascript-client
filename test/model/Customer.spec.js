/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.infoplus);
  }
}(this, function(expect, infoplus) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new infoplus.Customer();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Customer', function() {
    it('should create an instance of Customer', function() {
      // uncomment below and update the code to test Customer
      //var instane = new infoplus.Customer();
      //expect(instance).to.be.a(infoplus.Customer);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property lobId (base name: "lobId")', function() {
      // uncomment below and update the code to test the property lobId
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property customerNo (base name: "customerNo")', function() {
      // uncomment below and update the code to test the property customerNo
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property attention (base name: "attention")', function() {
      // uncomment below and update the code to test the property attention
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property street (base name: "street")', function() {
      // uncomment below and update the code to test the property street
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property street2 (base name: "street2")', function() {
      // uncomment below and update the code to test the property street2
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property street3Province (base name: "street3Province")', function() {
      // uncomment below and update the code to test the property street3Province
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property city (base name: "city")', function() {
      // uncomment below and update the code to test the property city
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property zipCode (base name: "zipCode")', function() {
      // uncomment below and update the code to test the property zipCode
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property country (base name: "country")', function() {
      // uncomment below and update the code to test the property country
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property phone (base name: "phone")', function() {
      // uncomment below and update the code to test the property phone
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property fax (base name: "fax")', function() {
      // uncomment below and update the code to test the property fax
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property bossBranch (base name: "bossBranch")', function() {
      // uncomment below and update the code to test the property bossBranch
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property packageCarrierId (base name: "packageCarrierId")', function() {
      // uncomment below and update the code to test the property packageCarrierId
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property truckCarrierId (base name: "truckCarrierId")', function() {
      // uncomment below and update the code to test the property truckCarrierId
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property weightBreak (base name: "weightBreak")', function() {
      // uncomment below and update the code to test the property weightBreak
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property sector (base name: "sector")', function() {
      // uncomment below and update the code to test the property sector
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property division (base name: "division")', function() {
      // uncomment below and update the code to test the property division
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property costCenter (base name: "costCenter")', function() {
      // uncomment below and update the code to test the property costCenter
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property county (base name: "county")', function() {
      // uncomment below and update the code to test the property county
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property area (base name: "area")', function() {
      // uncomment below and update the code to test the property area
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property customerType (base name: "customerType")', function() {
      // uncomment below and update the code to test the property customerType
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property massLevel (base name: "massLevel")', function() {
      // uncomment below and update the code to test the property massLevel
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property massFactor (base name: "massFactor")', function() {
      // uncomment below and update the code to test the property massFactor
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property priceLevel (base name: "priceLevel")', function() {
      // uncomment below and update the code to test the property priceLevel
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property openDate (base name: "openDate")', function() {
      // uncomment below and update the code to test the property openDate
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property closeDate (base name: "closeDate")', function() {
      // uncomment below and update the code to test the property closeDate
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property restrictionPercent (base name: "restrictionPercent")', function() {
      // uncomment below and update the code to test the property restrictionPercent
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property cycleDate (base name: "cycleDate")', function() {
      // uncomment below and update the code to test the property cycleDate
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property manager (base name: "manager")', function() {
      // uncomment below and update the code to test the property manager
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property alternateInventory (base name: "alternateInventory")', function() {
      // uncomment below and update the code to test the property alternateInventory
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property pin (base name: "pin")', function() {
      // uncomment below and update the code to test the property pin
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property faxGone (base name: "faxGone")', function() {
      // uncomment below and update the code to test the property faxGone
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property residential (base name: "residential")', function() {
      // uncomment below and update the code to test the property residential
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property csrBranch (base name: "csrBranch")', function() {
      // uncomment below and update the code to test the property csrBranch
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property extrinsicText1 (base name: "extrinsicText1")', function() {
      // uncomment below and update the code to test the property extrinsicText1
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property extrinsicText2 (base name: "extrinsicText2")', function() {
      // uncomment below and update the code to test the property extrinsicText2
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property extrinsicText3 (base name: "extrinsicText3")', function() {
      // uncomment below and update the code to test the property extrinsicText3
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property extrinsicNumber1 (base name: "extrinsicNumber1")', function() {
      // uncomment below and update the code to test the property extrinsicNumber1
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property extrinsicNumber2 (base name: "extrinsicNumber2")', function() {
      // uncomment below and update the code to test the property extrinsicNumber2
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property extrinsicDecimal1 (base name: "extrinsicDecimal1")', function() {
      // uncomment below and update the code to test the property extrinsicDecimal1
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property extrinsicDecimal2 (base name: "extrinsicDecimal2")', function() {
      // uncomment below and update the code to test the property extrinsicDecimal2
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property modifyDate (base name: "modifyDate")', function() {
      // uncomment below and update the code to test the property modifyDate
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property omsCustomerId (base name: "omsCustomerId")', function() {
      // uncomment below and update the code to test the property omsCustomerId
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

    it('should have the property customFields (base name: "customFields")', function() {
      // uncomment below and update the code to test the property customFields
      //var instane = new infoplus.Customer();
      //expect(instance).to.be();
    });

  });

}));
