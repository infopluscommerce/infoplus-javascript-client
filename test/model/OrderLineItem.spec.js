/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.infoplus);
  }
}(this, function(expect, infoplus) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new infoplus.OrderLineItem();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OrderLineItem', function() {
    it('should create an instance of OrderLineItem', function() {
      // uncomment below and update the code to test OrderLineItem
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be.a(infoplus.OrderLineItem);
    });

    it('should have the property quantity (base name: "quantity")', function() {
      // uncomment below and update the code to test the property quantity
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property price (base name: "price")', function() {
      // uncomment below and update the code to test the property price
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property discount (base name: "discount")', function() {
      // uncomment below and update the code to test the property discount
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property subTotal (base name: "subTotal")', function() {
      // uncomment below and update the code to test the property subTotal
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property originalPrice (base name: "originalPrice")', function() {
      // uncomment below and update the code to test the property originalPrice
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property sku (base name: "sku")', function() {
      // uncomment below and update the code to test the property sku
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property majorGroup (base name: "majorGroup")', function() {
      // uncomment below and update the code to test the property majorGroup
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property subGroup (base name: "subGroup")', function() {
      // uncomment below and update the code to test the property subGroup
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property available (base name: "available")', function() {
      // uncomment below and update the code to test the property available
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property onHand (base name: "onHand")', function() {
      // uncomment below and update the code to test the property onHand
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property onOrder (base name: "onOrder")', function() {
      // uncomment below and update the code to test the property onOrder
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property discountType (base name: "discountType")', function() {
      // uncomment below and update the code to test the property discountType
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property discountPercent (base name: "discountPercent")', function() {
      // uncomment below and update the code to test the property discountPercent
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property customPrice (base name: "customPrice")', function() {
      // uncomment below and update the code to test the property customPrice
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property discountedPrice (base name: "discountedPrice")', function() {
      // uncomment below and update the code to test the property discountedPrice
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property alternateSKU (base name: "alternateSKU")', function() {
      // uncomment below and update the code to test the property alternateSKU
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property isGiftCard (base name: "isGiftCard")', function() {
      // uncomment below and update the code to test the property isGiftCard
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property giftCardAmount (base name: "giftCardAmount")', function() {
      // uncomment below and update the code to test the property giftCardAmount
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property giftCardTo (base name: "giftCardTo")', function() {
      // uncomment below and update the code to test the property giftCardTo
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property giftCardEmail (base name: "giftCardEmail")', function() {
      // uncomment below and update the code to test the property giftCardEmail
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property giftCardMessage (base name: "giftCardMessage")', function() {
      // uncomment below and update the code to test the property giftCardMessage
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property account (base name: "account")', function() {
      // uncomment below and update the code to test the property account
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

    it('should have the property customFields (base name: "customFields")', function() {
      // uncomment below and update the code to test the property customFields
      //var instane = new infoplus.OrderLineItem();
      //expect(instance).to.be();
    });

  });

}));
