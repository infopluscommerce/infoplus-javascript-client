/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: v3.0
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.infoplus);
  }
}(this, function(expect, infoplus) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new infoplus.WorkActivity();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('WorkActivity', function() {
    it('should create an instance of WorkActivity', function() {
      // uncomment below and update the code to test WorkActivity
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be.a(infoplus.WorkActivity);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property importedRecordId (base name: "importedRecordId")', function() {
      // uncomment below and update the code to test the property importedRecordId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property lobId (base name: "lobId")', function() {
      // uncomment below and update the code to test the property lobId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property createDate (base name: "createDate")', function() {
      // uncomment below and update the code to test the property createDate
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property modifyDate (base name: "modifyDate")', function() {
      // uncomment below and update the code to test the property modifyDate
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "userId")', function() {
      // uncomment below and update the code to test the property userId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property typeName (base name: "typeName")', function() {
      // uncomment below and update the code to test the property typeName
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property statusName (base name: "statusName")', function() {
      // uncomment below and update the code to test the property statusName
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property workBatchId (base name: "workBatchId")', function() {
      // uncomment below and update the code to test the property workBatchId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property workParentId (base name: "workParentId")', function() {
      // uncomment below and update the code to test the property workParentId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property priorityCode (base name: "priorityCode")', function() {
      // uncomment below and update the code to test the property priorityCode
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property foreignId (base name: "foreignId")', function() {
      // uncomment below and update the code to test the property foreignId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceWarehouseId (base name: "sourceWarehouseId")', function() {
      // uncomment below and update the code to test the property sourceWarehouseId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceWarehouseName (base name: "sourceWarehouseName")', function() {
      // uncomment below and update the code to test the property sourceWarehouseName
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceLocation (base name: "sourceLocation")', function() {
      // uncomment below and update the code to test the property sourceLocation
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceBuildingId (base name: "sourceBuildingId")', function() {
      // uncomment below and update the code to test the property sourceBuildingId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceBuildingName (base name: "sourceBuildingName")', function() {
      // uncomment below and update the code to test the property sourceBuildingName
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceZoneId (base name: "sourceZoneId")', function() {
      // uncomment below and update the code to test the property sourceZoneId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceZoneName (base name: "sourceZoneName")', function() {
      // uncomment below and update the code to test the property sourceZoneName
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceAisleId (base name: "sourceAisleId")', function() {
      // uncomment below and update the code to test the property sourceAisleId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceAisleAddress (base name: "sourceAisleAddress")', function() {
      // uncomment below and update the code to test the property sourceAisleAddress
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceOrigin (base name: "sourceOrigin")', function() {
      // uncomment below and update the code to test the property sourceOrigin
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceOriginName (base name: "sourceOriginName")', function() {
      // uncomment below and update the code to test the property sourceOriginName
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceBillingTypeId (base name: "sourceBillingTypeId")', function() {
      // uncomment below and update the code to test the property sourceBillingTypeId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceBillingTypeName (base name: "sourceBillingTypeName")', function() {
      // uncomment below and update the code to test the property sourceBillingTypeName
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceBehaviorType (base name: "sourceBehaviorType")', function() {
      // uncomment below and update the code to test the property sourceBehaviorType
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceBehaviorTypeName (base name: "sourceBehaviorTypeName")', function() {
      // uncomment below and update the code to test the property sourceBehaviorTypeName
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceFootprintId (base name: "sourceFootprintId")', function() {
      // uncomment below and update the code to test the property sourceFootprintId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceFootprintName (base name: "sourceFootprintName")', function() {
      // uncomment below and update the code to test the property sourceFootprintName
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceFootprintHeight (base name: "sourceFootprintHeight")', function() {
      // uncomment below and update the code to test the property sourceFootprintHeight
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceFootprintWidth (base name: "sourceFootprintWidth")', function() {
      // uncomment below and update the code to test the property sourceFootprintWidth
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceFootprintDepth (base name: "sourceFootprintDepth")', function() {
      // uncomment below and update the code to test the property sourceFootprintDepth
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceAddressSchemeId (base name: "sourceAddressSchemeId")', function() {
      // uncomment below and update the code to test the property sourceAddressSchemeId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceAddressSchemeName (base name: "sourceAddressSchemeName")', function() {
      // uncomment below and update the code to test the property sourceAddressSchemeName
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceLevel (base name: "sourceLevel")', function() {
      // uncomment below and update the code to test the property sourceLevel
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceBay (base name: "sourceBay")', function() {
      // uncomment below and update the code to test the property sourceBay
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceNumber (base name: "sourceNumber")', function() {
      // uncomment below and update the code to test the property sourceNumber
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceOnline (base name: "sourceOnline")', function() {
      // uncomment below and update the code to test the property sourceOnline
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourcePriorityCode (base name: "sourcePriorityCode")', function() {
      // uncomment below and update the code to test the property sourcePriorityCode
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceCost (base name: "sourceCost")', function() {
      // uncomment below and update the code to test the property sourceCost
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sourceAllowItemMixing (base name: "sourceAllowItemMixing")', function() {
      // uncomment below and update the code to test the property sourceAllowItemMixing
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationWarehouseId (base name: "destinationWarehouseId")', function() {
      // uncomment below and update the code to test the property destinationWarehouseId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationWarehouseName (base name: "destinationWarehouseName")', function() {
      // uncomment below and update the code to test the property destinationWarehouseName
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationLocation (base name: "destinationLocation")', function() {
      // uncomment below and update the code to test the property destinationLocation
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationBuildingId (base name: "destinationBuildingId")', function() {
      // uncomment below and update the code to test the property destinationBuildingId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationBuildingName (base name: "destinationBuildingName")', function() {
      // uncomment below and update the code to test the property destinationBuildingName
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationZoneId (base name: "destinationZoneId")', function() {
      // uncomment below and update the code to test the property destinationZoneId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationZoneName (base name: "destinationZoneName")', function() {
      // uncomment below and update the code to test the property destinationZoneName
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationAisleId (base name: "destinationAisleId")', function() {
      // uncomment below and update the code to test the property destinationAisleId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationAisleAddress (base name: "destinationAisleAddress")', function() {
      // uncomment below and update the code to test the property destinationAisleAddress
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationOrigin (base name: "destinationOrigin")', function() {
      // uncomment below and update the code to test the property destinationOrigin
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationOriginName (base name: "destinationOriginName")', function() {
      // uncomment below and update the code to test the property destinationOriginName
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationBillingTypeId (base name: "destinationBillingTypeId")', function() {
      // uncomment below and update the code to test the property destinationBillingTypeId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationBillingTypeName (base name: "destinationBillingTypeName")', function() {
      // uncomment below and update the code to test the property destinationBillingTypeName
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationBehaviorType (base name: "destinationBehaviorType")', function() {
      // uncomment below and update the code to test the property destinationBehaviorType
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationBehaviorTypeName (base name: "destinationBehaviorTypeName")', function() {
      // uncomment below and update the code to test the property destinationBehaviorTypeName
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationFootprintId (base name: "destinationFootprintId")', function() {
      // uncomment below and update the code to test the property destinationFootprintId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationFootprintName (base name: "destinationFootprintName")', function() {
      // uncomment below and update the code to test the property destinationFootprintName
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationFootprintHeight (base name: "destinationFootprintHeight")', function() {
      // uncomment below and update the code to test the property destinationFootprintHeight
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationFootprintWidth (base name: "destinationFootprintWidth")', function() {
      // uncomment below and update the code to test the property destinationFootprintWidth
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationFootprintDepth (base name: "destinationFootprintDepth")', function() {
      // uncomment below and update the code to test the property destinationFootprintDepth
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationAddressSchemeId (base name: "destinationAddressSchemeId")', function() {
      // uncomment below and update the code to test the property destinationAddressSchemeId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationAddressSchemeName (base name: "destinationAddressSchemeName")', function() {
      // uncomment below and update the code to test the property destinationAddressSchemeName
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationLevel (base name: "destinationLevel")', function() {
      // uncomment below and update the code to test the property destinationLevel
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationBay (base name: "destinationBay")', function() {
      // uncomment below and update the code to test the property destinationBay
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationNumber (base name: "destinationNumber")', function() {
      // uncomment below and update the code to test the property destinationNumber
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationOnline (base name: "destinationOnline")', function() {
      // uncomment below and update the code to test the property destinationOnline
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationPriorityCode (base name: "destinationPriorityCode")', function() {
      // uncomment below and update the code to test the property destinationPriorityCode
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationCost (base name: "destinationCost")', function() {
      // uncomment below and update the code to test the property destinationCost
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property destinationAllowItemMixing (base name: "destinationAllowItemMixing")', function() {
      // uncomment below and update the code to test the property destinationAllowItemMixing
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property workCreateDate (base name: "workCreateDate")', function() {
      // uncomment below and update the code to test the property workCreateDate
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property workModifyDate (base name: "workModifyDate")', function() {
      // uncomment below and update the code to test the property workModifyDate
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property masterRef (base name: "masterRef")', function() {
      // uncomment below and update the code to test the property masterRef
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property weightPerWrap (base name: "weightPerWrap")', function() {
      // uncomment below and update the code to test the property weightPerWrap
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sku (base name: "sku")', function() {
      // uncomment below and update the code to test the property sku
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property numericSortOrder (base name: "numericSortOrder")', function() {
      // uncomment below and update the code to test the property numericSortOrder
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property itemDescription (base name: "itemDescription")', function() {
      // uncomment below and update the code to test the property itemDescription
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property additionalDescription (base name: "additionalDescription")', function() {
      // uncomment below and update the code to test the property additionalDescription
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property unitCode (base name: "unitCode")', function() {
      // uncomment below and update the code to test the property unitCode
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property wrapCode (base name: "wrapCode")', function() {
      // uncomment below and update the code to test the property wrapCode
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property unitsPerWrap (base name: "unitsPerWrap")', function() {
      // uncomment below and update the code to test the property unitsPerWrap
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property quantity (base name: "quantity")', function() {
      // uncomment below and update the code to test the property quantity
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property numberOfWraps (base name: "numberOfWraps")', function() {
      // uncomment below and update the code to test the property numberOfWraps
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property numberOfCases (base name: "numberOfCases")', function() {
      // uncomment below and update the code to test the property numberOfCases
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property pickTouches (base name: "pickTouches")', function() {
      // uncomment below and update the code to test the property pickTouches
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property classRestriction (base name: "classRestriction")', function() {
      // uncomment below and update the code to test the property classRestriction
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property maxCycle (base name: "maxCycle")', function() {
      // uncomment below and update the code to test the property maxCycle
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property maxInterim (base name: "maxInterim")', function() {
      // uncomment below and update the code to test the property maxInterim
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property seasonalItem (base name: "seasonalItem")', function() {
      // uncomment below and update the code to test the property seasonalItem
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property secure (base name: "secure")', function() {
      // uncomment below and update the code to test the property secure
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property productType (base name: "productType")', function() {
      // uncomment below and update the code to test the property productType
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property itemStatus (base name: "itemStatus")', function() {
      // uncomment below and update the code to test the property itemStatus
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property overallLeadTime (base name: "overallLeadTime")', function() {
      // uncomment below and update the code to test the property overallLeadTime
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property overallFixedReorderPoint (base name: "overallFixedReorderPoint")', function() {
      // uncomment below and update the code to test the property overallFixedReorderPoint
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property qualityControlIndicator (base name: "qualityControlIndicator")', function() {
      // uncomment below and update the code to test the property qualityControlIndicator
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property lotControlFlag (base name: "lotControlFlag")', function() {
      // uncomment below and update the code to test the property lotControlFlag
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property productCodeFlag (base name: "productCodeFlag")', function() {
      // uncomment below and update the code to test the property productCodeFlag
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property chargeCode (base name: "chargeCode")', function() {
      // uncomment below and update the code to test the property chargeCode
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property podRevDate (base name: "podRevDate")', function() {
      // uncomment below and update the code to test the property podRevDate
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property podOrderSuffix (base name: "podOrderSuffix")', function() {
      // uncomment below and update the code to test the property podOrderSuffix
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property serialCode (base name: "serialCode")', function() {
      // uncomment below and update the code to test the property serialCode
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property assetCode (base name: "assetCode")', function() {
      // uncomment below and update the code to test the property assetCode
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property backorder (base name: "backorder")', function() {
      // uncomment below and update the code to test the property backorder
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property absoluteMax (base name: "absoluteMax")', function() {
      // uncomment below and update the code to test the property absoluteMax
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property accountCodeId (base name: "accountCodeId")', function() {
      // uncomment below and update the code to test the property accountCodeId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property summaryCodeId (base name: "summaryCodeId")', function() {
      // uncomment below and update the code to test the property summaryCodeId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property lowStockContactId (base name: "lowStockContactId")', function() {
      // uncomment below and update the code to test the property lowStockContactId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property legacyLowLevelContactId (base name: "legacyLowLevelContactId")', function() {
      // uncomment below and update the code to test the property legacyLowLevelContactId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property lowStockCodeId (base name: "lowStockCodeId")', function() {
      // uncomment below and update the code to test the property lowStockCodeId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property majorGroupId (base name: "majorGroupId")', function() {
      // uncomment below and update the code to test the property majorGroupId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property subGroupId (base name: "subGroupId")', function() {
      // uncomment below and update the code to test the property subGroupId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property productCodeId (base name: "productCodeId")', function() {
      // uncomment below and update the code to test the property productCodeId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property buyerId (base name: "buyerId")', function() {
      // uncomment below and update the code to test the property buyerId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property vendorSKU (base name: "vendorSKU")', function() {
      // uncomment below and update the code to test the property vendorSKU
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property upc (base name: "upc")', function() {
      // uncomment below and update the code to test the property upc
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property packingSlipDescription (base name: "packingSlipDescription")', function() {
      // uncomment below and update the code to test the property packingSlipDescription
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property commodityCodeId (base name: "commodityCodeId")', function() {
      // uncomment below and update the code to test the property commodityCodeId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property compCode (base name: "compCode")', function() {
      // uncomment below and update the code to test the property compCode
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property criticalAmount (base name: "criticalAmount")', function() {
      // uncomment below and update the code to test the property criticalAmount
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property listPrice (base name: "listPrice")', function() {
      // uncomment below and update the code to test the property listPrice
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property outsideVendor (base name: "outsideVendor")', function() {
      // uncomment below and update the code to test the property outsideVendor
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property pickNo (base name: "pickNo")', function() {
      // uncomment below and update the code to test the property pickNo
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property requiresProductionLot (base name: "requiresProductionLot")', function() {
      // uncomment below and update the code to test the property requiresProductionLot
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property sector (base name: "sector")', function() {
      // uncomment below and update the code to test the property sector
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property voidDate (base name: "voidDate")', function() {
      // uncomment below and update the code to test the property voidDate
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property extrinsicText1 (base name: "extrinsicText1")', function() {
      // uncomment below and update the code to test the property extrinsicText1
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property extrinsicText2 (base name: "extrinsicText2")', function() {
      // uncomment below and update the code to test the property extrinsicText2
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property extrinsicText3 (base name: "extrinsicText3")', function() {
      // uncomment below and update the code to test the property extrinsicText3
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property extrinsicNumber1 (base name: "extrinsicNumber1")', function() {
      // uncomment below and update the code to test the property extrinsicNumber1
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property extrinsicNumber2 (base name: "extrinsicNumber2")', function() {
      // uncomment below and update the code to test the property extrinsicNumber2
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property extrinsicDecimal1 (base name: "extrinsicDecimal1")', function() {
      // uncomment below and update the code to test the property extrinsicDecimal1
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property extrinsicDecimal2 (base name: "extrinsicDecimal2")', function() {
      // uncomment below and update the code to test the property extrinsicDecimal2
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property casebreakEnabled (base name: "casebreakEnabled")', function() {
      // uncomment below and update the code to test the property casebreakEnabled
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property alcoholTypeId (base name: "alcoholTypeId")', function() {
      // uncomment below and update the code to test the property alcoholTypeId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property alcoholTypeName (base name: "alcoholTypeName")', function() {
      // uncomment below and update the code to test the property alcoholTypeName
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property alcoholContent (base name: "alcoholContent")', function() {
      // uncomment below and update the code to test the property alcoholContent
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property alcoholContainerId (base name: "alcoholContainerId")', function() {
      // uncomment below and update the code to test the property alcoholContainerId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property alcoholContainerName (base name: "alcoholContainerName")', function() {
      // uncomment below and update the code to test the property alcoholContainerName
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property alcoholContainerVolume (base name: "alcoholContainerVolume")', function() {
      // uncomment below and update the code to test the property alcoholContainerVolume
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property alcoholVintageYear (base name: "alcoholVintageYear")', function() {
      // uncomment below and update the code to test the property alcoholVintageYear
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property alcoholCountryId (base name: "alcoholCountryId")', function() {
      // uncomment below and update the code to test the property alcoholCountryId
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property alcoholCountryName (base name: "alcoholCountryName")', function() {
      // uncomment below and update the code to test the property alcoholCountryName
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property alcoholState (base name: "alcoholState")', function() {
      // uncomment below and update the code to test the property alcoholState
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property alcoholRegion (base name: "alcoholRegion")', function() {
      // uncomment below and update the code to test the property alcoholRegion
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property alcoholBrand (base name: "alcoholBrand")', function() {
      // uncomment below and update the code to test the property alcoholBrand
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property alcoholUPCCode (base name: "alcoholUPCCode")', function() {
      // uncomment below and update the code to test the property alcoholUPCCode
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property alcoholNABCACode (base name: "alcoholNABCACode")', function() {
      // uncomment below and update the code to test the property alcoholNABCACode
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property alcoholUNIMERCCode (base name: "alcoholUNIMERCCode")', function() {
      // uncomment below and update the code to test the property alcoholUNIMERCCode
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property alcoholSCCCode (base name: "alcoholSCCCode")', function() {
      // uncomment below and update the code to test the property alcoholSCCCode
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property billingQuantity (base name: "billingQuantity")', function() {
      // uncomment below and update the code to test the property billingQuantity
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property chargeRate (base name: "chargeRate")', function() {
      // uncomment below and update the code to test the property chargeRate
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property extendedCharge (base name: "extendedCharge")', function() {
      // uncomment below and update the code to test the property extendedCharge
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

    it('should have the property customFields (base name: "customFields")', function() {
      // uncomment below and update the code to test the property customFields
      //var instane = new infoplus.WorkActivity();
      //expect(instance).to.be();
    });

  });

}));
