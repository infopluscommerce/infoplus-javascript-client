/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.infoplus);
  }
}(this, function(expect, infoplus) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new infoplus.Work();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Work', function() {
    it('should create an instance of Work', function() {
      // uncomment below and update the code to test Work
      //var instane = new infoplus.Work();
      //expect(instance).to.be.a(infoplus.Work);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new infoplus.Work();
      //expect(instance).to.be();
    });

    it('should have the property sourceWarehouseId (base name: "sourceWarehouseId")', function() {
      // uncomment below and update the code to test the property sourceWarehouseId
      //var instane = new infoplus.Work();
      //expect(instance).to.be();
    });

    it('should have the property sourceBuildingId (base name: "sourceBuildingId")', function() {
      // uncomment below and update the code to test the property sourceBuildingId
      //var instane = new infoplus.Work();
      //expect(instance).to.be();
    });

    it('should have the property sourceLocation (base name: "sourceLocation")', function() {
      // uncomment below and update the code to test the property sourceLocation
      //var instane = new infoplus.Work();
      //expect(instance).to.be();
    });

    it('should have the property destinationWarehouseId (base name: "destinationWarehouseId")', function() {
      // uncomment below and update the code to test the property destinationWarehouseId
      //var instane = new infoplus.Work();
      //expect(instance).to.be();
    });

    it('should have the property destinationBuildingId (base name: "destinationBuildingId")', function() {
      // uncomment below and update the code to test the property destinationBuildingId
      //var instane = new infoplus.Work();
      //expect(instance).to.be();
    });

    it('should have the property destinationLocation (base name: "destinationLocation")', function() {
      // uncomment below and update the code to test the property destinationLocation
      //var instane = new infoplus.Work();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new infoplus.Work();
      //expect(instance).to.be();
    });

    it('should have the property createDate (base name: "createDate")', function() {
      // uncomment below and update the code to test the property createDate
      //var instane = new infoplus.Work();
      //expect(instance).to.be();
    });

    it('should have the property modifyDate (base name: "modifyDate")', function() {
      // uncomment below and update the code to test the property modifyDate
      //var instane = new infoplus.Work();
      //expect(instance).to.be();
    });

    it('should have the property priorityCode (base name: "priorityCode")', function() {
      // uncomment below and update the code to test the property priorityCode
      //var instane = new infoplus.Work();
      //expect(instance).to.be();
    });

    it('should have the property userDefinedMessage (base name: "userDefinedMessage")', function() {
      // uncomment below and update the code to test the property userDefinedMessage
      //var instane = new infoplus.Work();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new infoplus.Work();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "userId")', function() {
      // uncomment below and update the code to test the property userId
      //var instane = new infoplus.Work();
      //expect(instance).to.be();
    });

    it('should have the property lobId (base name: "lobId")', function() {
      // uncomment below and update the code to test the property lobId
      //var instane = new infoplus.Work();
      //expect(instance).to.be();
    });

    it('should have the property workBatchId (base name: "workBatchId")', function() {
      // uncomment below and update the code to test the property workBatchId
      //var instane = new infoplus.Work();
      //expect(instance).to.be();
    });

    it('should have the property workProductList (base name: "workProductList")', function() {
      // uncomment below and update the code to test the property workProductList
      //var instane = new infoplus.Work();
      //expect(instance).to.be();
    });

    it('should have the property fulfillmentProcessId (base name: "fulfillmentProcessId")', function() {
      // uncomment below and update the code to test the property fulfillmentProcessId
      //var instane = new infoplus.Work();
      //expect(instance).to.be();
    });

    it('should have the property pickLineId (base name: "pickLineId")', function() {
      // uncomment below and update the code to test the property pickLineId
      //var instane = new infoplus.Work();
      //expect(instance).to.be();
    });

    it('should have the property customFields (base name: "customFields")', function() {
      // uncomment below and update the code to test the property customFields
      //var instane = new infoplus.Work();
      //expect(instance).to.be();
    });

  });

}));
