/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: v3.0
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.infoplus);
  }
}(this, function(expect, infoplus) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new infoplus.FulfillmentPlan();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FulfillmentPlan', function() {
    it('should create an instance of FulfillmentPlan', function() {
      // uncomment below and update the code to test FulfillmentPlan
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be.a(infoplus.FulfillmentPlan);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property createDate (base name: "createDate")', function() {
      // uncomment below and update the code to test the property createDate
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property modifyDate (base name: "modifyDate")', function() {
      // uncomment below and update the code to test the property modifyDate
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property warehouseId (base name: "warehouseId")', function() {
      // uncomment below and update the code to test the property warehouseId
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property priorityCode (base name: "priorityCode")', function() {
      // uncomment below and update the code to test the property priorityCode
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property lastRunTime (base name: "lastRunTime")', function() {
      // uncomment below and update the code to test the property lastRunTime
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property orderSmartFilterId (base name: "orderSmartFilterId")', function() {
      // uncomment below and update the code to test the property orderSmartFilterId
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property locationSmartFilterId (base name: "locationSmartFilterId")', function() {
      // uncomment below and update the code to test the property locationSmartFilterId
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property maxOrders (base name: "maxOrders")', function() {
      // uncomment below and update the code to test the property maxOrders
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property batchSizeMax (base name: "batchSizeMax")', function() {
      // uncomment below and update the code to test the property batchSizeMax
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property batchSizeMin (base name: "batchSizeMin")', function() {
      // uncomment below and update the code to test the property batchSizeMin
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property maxCartons (base name: "maxCartons")', function() {
      // uncomment below and update the code to test the property maxCartons
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property isMassDistribution (base name: "isMassDistribution")', function() {
      // uncomment below and update the code to test the property isMassDistribution
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property createPickWork (base name: "createPickWork")', function() {
      // uncomment below and update the code to test the property createPickWork
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property pickingRule (base name: "pickingRule")', function() {
      // uncomment below and update the code to test the property pickingRule
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property pickBatchGroupId (base name: "pickBatchGroupId")', function() {
      // uncomment below and update the code to test the property pickBatchGroupId
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property maxSKUsPerBatch (base name: "maxSKUsPerBatch")', function() {
      // uncomment below and update the code to test the property maxSKUsPerBatch
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property layoutRule (base name: "layoutRule")', function() {
      // uncomment below and update the code to test the property layoutRule
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property pickSortRule (base name: "pickSortRule")', function() {
      // uncomment below and update the code to test the property pickSortRule
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property locationSort (base name: "locationSort")', function() {
      // uncomment below and update the code to test the property locationSort
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property createPickList (base name: "createPickList")', function() {
      // uncomment below and update the code to test the property createPickList
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property pickListFormat (base name: "pickListFormat")', function() {
      // uncomment below and update the code to test the property pickListFormat
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property pickListLayout (base name: "pickListLayout")', function() {
      // uncomment below and update the code to test the property pickListLayout
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property pickListGroup (base name: "pickListGroup")', function() {
      // uncomment below and update the code to test the property pickListGroup
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property pickListSort (base name: "pickListSort")', function() {
      // uncomment below and update the code to test the property pickListSort
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property pickListLocationSort (base name: "pickListLocationSort")', function() {
      // uncomment below and update the code to test the property pickListLocationSort
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property createPickSummary (base name: "createPickSummary")', function() {
      // uncomment below and update the code to test the property createPickSummary
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property pickSummaryFormat (base name: "pickSummaryFormat")', function() {
      // uncomment below and update the code to test the property pickSummaryFormat
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property pickSummaryLayout (base name: "pickSummaryLayout")', function() {
      // uncomment below and update the code to test the property pickSummaryLayout
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property pickSummarySort (base name: "pickSummarySort")', function() {
      // uncomment below and update the code to test the property pickSummarySort
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property pickScanSchemeId (base name: "pickScanSchemeId")', function() {
      // uncomment below and update the code to test the property pickScanSchemeId
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property cartonizeOrders (base name: "cartonizeOrders")', function() {
      // uncomment below and update the code to test the property cartonizeOrders
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property cartonizationScriptId (base name: "cartonizationScriptId")', function() {
      // uncomment below and update the code to test the property cartonizationScriptId
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property autoShipCasebreakCartons (base name: "autoShipCasebreakCartons")', function() {
      // uncomment below and update the code to test the property autoShipCasebreakCartons
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property autoShipOrders (base name: "autoShipOrders")', function() {
      // uncomment below and update the code to test the property autoShipOrders
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property preGenerateParcelLabels (base name: "preGenerateParcelLabels")', function() {
      // uncomment below and update the code to test the property preGenerateParcelLabels
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property labelSort (base name: "labelSort")', function() {
      // uncomment below and update the code to test the property labelSort
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property createPackingSlip (base name: "createPackingSlip")', function() {
      // uncomment below and update the code to test the property createPackingSlip
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property overridePackingSlipTemplateId (base name: "overridePackingSlipTemplateId")', function() {
      // uncomment below and update the code to test the property overridePackingSlipTemplateId
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property createOrderAssemblyGuide (base name: "createOrderAssemblyGuide")', function() {
      // uncomment below and update the code to test the property createOrderAssemblyGuide
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property orderAssemblyGuideLayout (base name: "orderAssemblyGuideLayout")', function() {
      // uncomment below and update the code to test the property orderAssemblyGuideLayout
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property createOrderInvoice (base name: "createOrderInvoice")', function() {
      // uncomment below and update the code to test the property createOrderInvoice
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property overrideOrderInvoiceTemplateId (base name: "overrideOrderInvoiceTemplateId")', function() {
      // uncomment below and update the code to test the property overrideOrderInvoiceTemplateId
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property createCartonGS1128Labels (base name: "createCartonGS1128Labels")', function() {
      // uncomment below and update the code to test the property createCartonGS1128Labels
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property createLineItemEachGS1128Labels (base name: "createLineItemEachGS1128Labels")', function() {
      // uncomment below and update the code to test the property createLineItemEachGS1128Labels
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property sendToExternalShippingSystem (base name: "sendToExternalShippingSystem")', function() {
      // uncomment below and update the code to test the property sendToExternalShippingSystem
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property externalShippingSystemId (base name: "externalShippingSystemId")', function() {
      // uncomment below and update the code to test the property externalShippingSystemId
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property customFields (base name: "customFields")', function() {
      // uncomment below and update the code to test the property customFields
      //var instane = new infoplus.FulfillmentPlan();
      //expect(instance).to.be();
    });

  });

}));
