/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.infoplus);
  }
}(this, function(expect, infoplus) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new infoplus.ShoppingCartConnection();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ShoppingCartConnection', function() {
    it('should create an instance of ShoppingCartConnection', function() {
      // uncomment below and update the code to test ShoppingCartConnection
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be.a(infoplus.ShoppingCartConnection);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property createDate (base name: "createDate")', function() {
      // uncomment below and update the code to test the property createDate
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property modifyDate (base name: "modifyDate")', function() {
      // uncomment below and update the code to test the property modifyDate
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property clientId (base name: "clientId")', function() {
      // uncomment below and update the code to test the property clientId
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property nonce (base name: "nonce")', function() {
      // uncomment below and update the code to test the property nonce
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property lobId (base name: "lobId")', function() {
      // uncomment below and update the code to test the property lobId
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property orderSourceId (base name: "orderSourceId")', function() {
      // uncomment below and update the code to test the property orderSourceId
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property integrationPartnerId (base name: "integrationPartnerId")', function() {
      // uncomment below and update the code to test the property integrationPartnerId
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property connectionType (base name: "connectionType")', function() {
      // uncomment below and update the code to test the property connectionType
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property itemFilterId (base name: "itemFilterId")', function() {
      // uncomment below and update the code to test the property itemFilterId
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property infoplusSKUFieldToMap (base name: "infoplusSKUFieldToMap")', function() {
      // uncomment below and update the code to test the property infoplusSKUFieldToMap
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property shoppingCartSKUFieldToMap (base name: "shoppingCartSKUFieldToMap")', function() {
      // uncomment below and update the code to test the property shoppingCartSKUFieldToMap
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property scriptId (base name: "scriptId")', function() {
      // uncomment below and update the code to test the property scriptId
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property shoppingCartStoreURL (base name: "shoppingCartStoreURL")', function() {
      // uncomment below and update the code to test the property shoppingCartStoreURL
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property accessCode (base name: "accessCode")', function() {
      // uncomment below and update the code to test the property accessCode
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property accessToken (base name: "accessToken")', function() {
      // uncomment below and update the code to test the property accessToken
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property password (base name: "password")', function() {
      // uncomment below and update the code to test the property password
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property defaultCarrierId (base name: "defaultCarrierId")', function() {
      // uncomment below and update the code to test the property defaultCarrierId
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property orderShipmentLevel (base name: "orderShipmentLevel")', function() {
      // uncomment below and update the code to test the property orderShipmentLevel
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property createInvoices (base name: "createInvoices")', function() {
      // uncomment below and update the code to test the property createInvoices
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property syncOrders (base name: "syncOrders")', function() {
      // uncomment below and update the code to test the property syncOrders
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property syncInventory (base name: "syncInventory")', function() {
      // uncomment below and update the code to test the property syncInventory
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property syncTrackingData (base name: "syncTrackingData")', function() {
      // uncomment below and update the code to test the property syncTrackingData
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property syncInventoryCronString (base name: "syncInventoryCronString")', function() {
      // uncomment below and update the code to test the property syncInventoryCronString
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property fulfillAllItems (base name: "fulfillAllItems")', function() {
      // uncomment below and update the code to test the property fulfillAllItems
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property syncInventoryLevelsLastRunTime (base name: "syncInventoryLevelsLastRunTime")', function() {
      // uncomment below and update the code to test the property syncInventoryLevelsLastRunTime
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property syncOrdersLastRunTime (base name: "syncOrdersLastRunTime")', function() {
      // uncomment below and update the code to test the property syncOrdersLastRunTime
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property inventoryLevelWarehouseControls (base name: "inventoryLevelWarehouseControls")', function() {
      // uncomment below and update the code to test the property inventoryLevelWarehouseControls
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property warehouseList (base name: "warehouseList")', function() {
      // uncomment below and update the code to test the property warehouseList
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property inventoryLevelStoreControls (base name: "inventoryLevelStoreControls")', function() {
      // uncomment below and update the code to test the property inventoryLevelStoreControls
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property storeList (base name: "storeList")', function() {
      // uncomment below and update the code to test the property storeList
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

    it('should have the property customFields (base name: "customFields")', function() {
      // uncomment below and update the code to test the property customFields
      //var instane = new infoplus.ShoppingCartConnection();
      //expect(instance).to.be();
    });

  });

}));
