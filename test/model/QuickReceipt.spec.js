/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.infoplus);
  }
}(this, function(expect, infoplus) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new infoplus.QuickReceipt();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('QuickReceipt', function() {
    it('should create an instance of QuickReceipt', function() {
      // uncomment below and update the code to test QuickReceipt
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be.a(infoplus.QuickReceipt);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property createdBy (base name: "createdBy")', function() {
      // uncomment below and update the code to test the property createdBy
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property createDate (base name: "createDate")', function() {
      // uncomment below and update the code to test the property createDate
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property modifyDate (base name: "modifyDate")', function() {
      // uncomment below and update the code to test the property modifyDate
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property warehouseId (base name: "warehouseId")', function() {
      // uncomment below and update the code to test the property warehouseId
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property lobId (base name: "lobId")', function() {
      // uncomment below and update the code to test the property lobId
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property sku (base name: "sku")', function() {
      // uncomment below and update the code to test the property sku
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property locationId (base name: "locationId")', function() {
      // uncomment below and update the code to test the property locationId
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property quantity (base name: "quantity")', function() {
      // uncomment below and update the code to test the property quantity
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property vendorId (base name: "vendorId")', function() {
      // uncomment below and update the code to test the property vendorId
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property carrier (base name: "carrier")', function() {
      // uncomment below and update the code to test the property carrier
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property unitCode (base name: "unitCode")', function() {
      // uncomment below and update the code to test the property unitCode
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property wrapCode (base name: "wrapCode")', function() {
      // uncomment below and update the code to test the property wrapCode
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property weightPerWrap (base name: "weightPerWrap")', function() {
      // uncomment below and update the code to test the property weightPerWrap
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property unitsPerWrap (base name: "unitsPerWrap")', function() {
      // uncomment below and update the code to test the property unitsPerWrap
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property quantityPerInnerPack (base name: "quantityPerInnerPack")', function() {
      // uncomment below and update the code to test the property quantityPerInnerPack
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property unitsPerCase (base name: "unitsPerCase")', function() {
      // uncomment below and update the code to test the property unitsPerCase
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property quantityPerPallet (base name: "quantityPerPallet")', function() {
      // uncomment below and update the code to test the property quantityPerPallet
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property caseWeight (base name: "caseWeight")', function() {
      // uncomment below and update the code to test the property caseWeight
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property productionLot (base name: "productionLot")', function() {
      // uncomment below and update the code to test the property productionLot
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property revisionDate (base name: "revisionDate")', function() {
      // uncomment below and update the code to test the property revisionDate
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property origin (base name: "origin")', function() {
      // uncomment below and update the code to test the property origin
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property cartonLength (base name: "cartonLength")', function() {
      // uncomment below and update the code to test the property cartonLength
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property cartonWidth (base name: "cartonWidth")', function() {
      // uncomment below and update the code to test the property cartonWidth
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property cartonHeight (base name: "cartonHeight")', function() {
      // uncomment below and update the code to test the property cartonHeight
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property cost (base name: "cost")', function() {
      // uncomment below and update the code to test the property cost
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property sellPrice (base name: "sellPrice")', function() {
      // uncomment below and update the code to test the property sellPrice
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property pricingPer (base name: "pricingPer")', function() {
      // uncomment below and update the code to test the property pricingPer
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property generatedItemReceiptId (base name: "generatedItemReceiptId")', function() {
      // uncomment below and update the code to test the property generatedItemReceiptId
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property generatedASNId (base name: "generatedASNId")', function() {
      // uncomment below and update the code to test the property generatedASNId
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property dockDate (base name: "dockDate")', function() {
      // uncomment below and update the code to test the property dockDate
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property productIdTag (base name: "productIdTag")', function() {
      // uncomment below and update the code to test the property productIdTag
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property expirationDate (base name: "expirationDate")', function() {
      // uncomment below and update the code to test the property expirationDate
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

    it('should have the property customFields (base name: "customFields")', function() {
      // uncomment below and update the code to test the property customFields
      //var instane = new infoplus.QuickReceipt();
      //expect(instance).to.be();
    });

  });

}));
