/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.infoplus);
  }
}(this, function(expect, infoplus) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new infoplus.WorkBatchApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('WorkBatchApi', function() {
    describe('addWorkBatchAudit', function() {
      it('should call addWorkBatchAudit successfully', function(done) {
        //uncomment below and update the code to test addWorkBatchAudit
        //instance.addWorkBatchAudit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addWorkBatchFile', function() {
      it('should call addWorkBatchFile successfully', function(done) {
        //uncomment below and update the code to test addWorkBatchFile
        //instance.addWorkBatchFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addWorkBatchFileByURL', function() {
      it('should call addWorkBatchFileByURL successfully', function(done) {
        //uncomment below and update the code to test addWorkBatchFileByURL
        //instance.addWorkBatchFileByURL(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addWorkBatchTag', function() {
      it('should call addWorkBatchTag successfully', function(done) {
        //uncomment below and update the code to test addWorkBatchTag
        //instance.addWorkBatchTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWorkBatchFile', function() {
      it('should call deleteWorkBatchFile successfully', function(done) {
        //uncomment below and update the code to test deleteWorkBatchFile
        //instance.deleteWorkBatchFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWorkBatchTag', function() {
      it('should call deleteWorkBatchTag successfully', function(done) {
        //uncomment below and update the code to test deleteWorkBatchTag
        //instance.deleteWorkBatchTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDuplicateWorkBatchById', function() {
      it('should call getDuplicateWorkBatchById successfully', function(done) {
        //uncomment below and update the code to test getDuplicateWorkBatchById
        //instance.getDuplicateWorkBatchById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWorkBatchByFilter', function() {
      it('should call getWorkBatchByFilter successfully', function(done) {
        //uncomment below and update the code to test getWorkBatchByFilter
        //instance.getWorkBatchByFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWorkBatchById', function() {
      it('should call getWorkBatchById successfully', function(done) {
        //uncomment below and update the code to test getWorkBatchById
        //instance.getWorkBatchById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWorkBatchFiles', function() {
      it('should call getWorkBatchFiles successfully', function(done) {
        //uncomment below and update the code to test getWorkBatchFiles
        //instance.getWorkBatchFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWorkBatchTags', function() {
      it('should call getWorkBatchTags successfully', function(done) {
        //uncomment below and update the code to test getWorkBatchTags
        //instance.getWorkBatchTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWorkBatch', function() {
      it('should call updateWorkBatch successfully', function(done) {
        //uncomment below and update the code to test updateWorkBatch
        //instance.updateWorkBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWorkBatchCustomFields', function() {
      it('should call updateWorkBatchCustomFields successfully', function(done) {
        //uncomment below and update the code to test updateWorkBatchCustomFields
        //instance.updateWorkBatchCustomFields(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
