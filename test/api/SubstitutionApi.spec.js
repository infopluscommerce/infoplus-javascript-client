/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.infoplus);
  }
}(this, function(expect, infoplus) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new infoplus.SubstitutionApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SubstitutionApi', function() {
    describe('addSubstitution', function() {
      it('should call addSubstitution successfully', function(done) {
        //uncomment below and update the code to test addSubstitution
        //instance.addSubstitution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addSubstitutionAudit', function() {
      it('should call addSubstitutionAudit successfully', function(done) {
        //uncomment below and update the code to test addSubstitutionAudit
        //instance.addSubstitutionAudit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addSubstitutionFile', function() {
      it('should call addSubstitutionFile successfully', function(done) {
        //uncomment below and update the code to test addSubstitutionFile
        //instance.addSubstitutionFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addSubstitutionFileByURL', function() {
      it('should call addSubstitutionFileByURL successfully', function(done) {
        //uncomment below and update the code to test addSubstitutionFileByURL
        //instance.addSubstitutionFileByURL(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addSubstitutionTag', function() {
      it('should call addSubstitutionTag successfully', function(done) {
        //uncomment below and update the code to test addSubstitutionTag
        //instance.addSubstitutionTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSubstitution', function() {
      it('should call deleteSubstitution successfully', function(done) {
        //uncomment below and update the code to test deleteSubstitution
        //instance.deleteSubstitution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSubstitutionFile', function() {
      it('should call deleteSubstitutionFile successfully', function(done) {
        //uncomment below and update the code to test deleteSubstitutionFile
        //instance.deleteSubstitutionFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSubstitutionTag', function() {
      it('should call deleteSubstitutionTag successfully', function(done) {
        //uncomment below and update the code to test deleteSubstitutionTag
        //instance.deleteSubstitutionTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDuplicateSubstitutionById', function() {
      it('should call getDuplicateSubstitutionById successfully', function(done) {
        //uncomment below and update the code to test getDuplicateSubstitutionById
        //instance.getDuplicateSubstitutionById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSubstitutionByFilter', function() {
      it('should call getSubstitutionByFilter successfully', function(done) {
        //uncomment below and update the code to test getSubstitutionByFilter
        //instance.getSubstitutionByFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSubstitutionById', function() {
      it('should call getSubstitutionById successfully', function(done) {
        //uncomment below and update the code to test getSubstitutionById
        //instance.getSubstitutionById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSubstitutionFiles', function() {
      it('should call getSubstitutionFiles successfully', function(done) {
        //uncomment below and update the code to test getSubstitutionFiles
        //instance.getSubstitutionFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSubstitutionTags', function() {
      it('should call getSubstitutionTags successfully', function(done) {
        //uncomment below and update the code to test getSubstitutionTags
        //instance.getSubstitutionTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSubstitution', function() {
      it('should call updateSubstitution successfully', function(done) {
        //uncomment below and update the code to test updateSubstitution
        //instance.updateSubstitution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSubstitutionCustomFields', function() {
      it('should call updateSubstitutionCustomFields successfully', function(done) {
        //uncomment below and update the code to test updateSubstitutionCustomFields
        //instance.updateSubstitutionCustomFields(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
