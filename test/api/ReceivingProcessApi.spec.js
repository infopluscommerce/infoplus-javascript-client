/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.infoplus);
  }
}(this, function(expect, infoplus) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new infoplus.ReceivingProcessApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ReceivingProcessApi', function() {
    describe('addReceivingProcessAudit', function() {
      it('should call addReceivingProcessAudit successfully', function(done) {
        //uncomment below and update the code to test addReceivingProcessAudit
        //instance.addReceivingProcessAudit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addReceivingProcessFile', function() {
      it('should call addReceivingProcessFile successfully', function(done) {
        //uncomment below and update the code to test addReceivingProcessFile
        //instance.addReceivingProcessFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addReceivingProcessFileByURL', function() {
      it('should call addReceivingProcessFileByURL successfully', function(done) {
        //uncomment below and update the code to test addReceivingProcessFileByURL
        //instance.addReceivingProcessFileByURL(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addReceivingProcessTag', function() {
      it('should call addReceivingProcessTag successfully', function(done) {
        //uncomment below and update the code to test addReceivingProcessTag
        //instance.addReceivingProcessTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteReceivingProcessFile', function() {
      it('should call deleteReceivingProcessFile successfully', function(done) {
        //uncomment below and update the code to test deleteReceivingProcessFile
        //instance.deleteReceivingProcessFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteReceivingProcessTag', function() {
      it('should call deleteReceivingProcessTag successfully', function(done) {
        //uncomment below and update the code to test deleteReceivingProcessTag
        //instance.deleteReceivingProcessTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDuplicateReceivingProcessById', function() {
      it('should call getDuplicateReceivingProcessById successfully', function(done) {
        //uncomment below and update the code to test getDuplicateReceivingProcessById
        //instance.getDuplicateReceivingProcessById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getReceivingProcessByFilter', function() {
      it('should call getReceivingProcessByFilter successfully', function(done) {
        //uncomment below and update the code to test getReceivingProcessByFilter
        //instance.getReceivingProcessByFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getReceivingProcessById', function() {
      it('should call getReceivingProcessById successfully', function(done) {
        //uncomment below and update the code to test getReceivingProcessById
        //instance.getReceivingProcessById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getReceivingProcessFiles', function() {
      it('should call getReceivingProcessFiles successfully', function(done) {
        //uncomment below and update the code to test getReceivingProcessFiles
        //instance.getReceivingProcessFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getReceivingProcessTags', function() {
      it('should call getReceivingProcessTags successfully', function(done) {
        //uncomment below and update the code to test getReceivingProcessTags
        //instance.getReceivingProcessTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateReceivingProcessCustomFields', function() {
      it('should call updateReceivingProcessCustomFields successfully', function(done) {
        //uncomment below and update the code to test updateReceivingProcessCustomFields
        //instance.updateReceivingProcessCustomFields(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
