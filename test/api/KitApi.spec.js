/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.infoplus);
  }
}(this, function(expect, infoplus) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new infoplus.KitApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('KitApi', function() {
    describe('addKit', function() {
      it('should call addKit successfully', function(done) {
        //uncomment below and update the code to test addKit
        //instance.addKit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addKitAudit', function() {
      it('should call addKitAudit successfully', function(done) {
        //uncomment below and update the code to test addKitAudit
        //instance.addKitAudit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addKitFile', function() {
      it('should call addKitFile successfully', function(done) {
        //uncomment below and update the code to test addKitFile
        //instance.addKitFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addKitFileByURL', function() {
      it('should call addKitFileByURL successfully', function(done) {
        //uncomment below and update the code to test addKitFileByURL
        //instance.addKitFileByURL(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addKitTag', function() {
      it('should call addKitTag successfully', function(done) {
        //uncomment below and update the code to test addKitTag
        //instance.addKitTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteKit', function() {
      it('should call deleteKit successfully', function(done) {
        //uncomment below and update the code to test deleteKit
        //instance.deleteKit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteKitFile', function() {
      it('should call deleteKitFile successfully', function(done) {
        //uncomment below and update the code to test deleteKitFile
        //instance.deleteKitFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteKitTag', function() {
      it('should call deleteKitTag successfully', function(done) {
        //uncomment below and update the code to test deleteKitTag
        //instance.deleteKitTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDuplicateKitById', function() {
      it('should call getDuplicateKitById successfully', function(done) {
        //uncomment below and update the code to test getDuplicateKitById
        //instance.getDuplicateKitById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getKitByFilter', function() {
      it('should call getKitByFilter successfully', function(done) {
        //uncomment below and update the code to test getKitByFilter
        //instance.getKitByFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getKitById', function() {
      it('should call getKitById successfully', function(done) {
        //uncomment below and update the code to test getKitById
        //instance.getKitById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getKitFiles', function() {
      it('should call getKitFiles successfully', function(done) {
        //uncomment below and update the code to test getKitFiles
        //instance.getKitFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getKitTags', function() {
      it('should call getKitTags successfully', function(done) {
        //uncomment below and update the code to test getKitTags
        //instance.getKitTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateKit', function() {
      it('should call updateKit successfully', function(done) {
        //uncomment below and update the code to test updateKit
        //instance.updateKit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateKitCustomFields', function() {
      it('should call updateKitCustomFields successfully', function(done) {
        //uncomment below and update the code to test updateKitCustomFields
        //instance.updateKitCustomFields(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
